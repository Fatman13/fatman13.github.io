<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Fatman13]]></title>
  <link href="http://Fatman13.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://Fatman13.github.io/"/>
  <updated>2015-10-10T21:53:21+08:00</updated>
  <id>http://Fatman13.github.io/</id>
  <author>
    <name><![CDATA[Fatman13]]></name>
    <email><![CDATA[tctctcly@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何在没有外网的机器上安装gem]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/27/ru-he-zai-mei-you-wai-wang-de-ji-qi-shang-an-zhuang-gem/"/>
    <updated>2014-02-27T20:16:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/27/ru-he-zai-mei-you-wai-wang-de-ji-qi-shang-an-zhuang-gem</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何在没有外网的机器上安装<code>Cucumber</code>小黄瓜自动化测所需的<code>gem</code>库。</p>

<!--more-->


<h1>1. 软件安装（Jenkins机器）</h1>

<ul>
<li>安装<code>Jumbo</code>。</li>
</ul>


<p><code>
bash -c "$( curl http://jumbo.baidu.com/install_jumbo.sh )"; source ~/.bashrc
</code></p>

<ul>
<li>安装<code>Ruby 1.9.3</code>。</li>
</ul>


<p><code>
jumbo install ruby
</code></p>

<ul>
<li>安装<code>svn</code>。</li>
</ul>


<p><code>
jumbo install subversion
</code></p>

<h1>2. 在无外网的Jenkins服务器（或者Slave机）上安装Gem</h1>

<ul>
<li>在jenkins机器上，选择一个合适的文件夹。从<code>svn</code>上下载小黄瓜所依赖的<code>gem</code>。</li>
</ul>


<p><code>
svn export https://svn.baidu.com/app-test/ecom/shifen/sf-crm/trunk/weigou/cuke_gems/
</code></p>

<ul>
<li><code>cd cuke_gems</code>至刚刚下载的文件夹中。运行如下指令，会先安装<code>bundler</code>这个<code>gem</code>。</li>
</ul>


<p><code>
gem install --local bundler-1.3.4.gem
</code></p>

<ul>
<li>安装完成后，运行以下指令。</li>
</ul>


<p><code>
bundle install --local
</code></p>

<h1>3. 添加新的Gem</h1>

<ul>
<li>如果需要添加新的gem的话，找一台有外网的机器。（如果Jenkins或者Slave机器是Linux机器，就得用Linux机器，是Windows就得用Windows机器。）</li>
<li>先<code>co</code>之前的<code>gem</code>库。</li>
</ul>


<p><code>
svn co https://svn.baidu.com/app-test/ecom/shifen/sf-crm/trunk/weigou/cuke_gems/
</code>
&ndash; <code>cd cuke_gems</code>至刚下载的文件夹中，修改<code>Gemfile</code>，添加新的<code>gem</code>。（最好能选定<code>gem</code>的版本）例如：</p>

<p>``` ruby
source &lsquo;<a href="http://rubygems.org">http://rubygems.org</a>&rsquo;</p>

<p>gem &lsquo;json&rsquo;, &lsquo;1.7.3&rsquo;
gem &lsquo;bundler&rsquo;, &lsquo;1.3.4&rsquo;</p>

<h1>添加新Gem示例 &lt;&mdash;&mdash;&mdash;</h1>

<p>gem &lsquo;new_gem&rsquo;, &lsquo;0.0.1&rsquo;</p>

<p>group :test do
  gem &lsquo;cucumber&rsquo;, &lsquo;1.2.1&rsquo;
  gem &lsquo;rspec&rsquo;, &lsquo;2.11.0&rsquo;
  gem &lsquo;httparty&rsquo;, &lsquo;0.8.3&rsquo;
  gem &lsquo;rest-client&rsquo;, &lsquo;1.6.7&rsquo;
end
<code>``
- 添加完成后，运行</code>bundle install<code>，然后运行</code>bundle package<code>。这样</code>bundler<code>就会生成新添加的</code>gem<code>的</code>.gem<code>文件以提供本地安装了。
- 把更新后的代码提交至</code>svn`。</p>

<p><code>
svn commit -m "add new gem(s)"
</code></p>

<ul>
<li>最后重复上文第2大点中的步骤，就能更新Jenkins机器上的<code>gem</code>库了。</li>
</ul>


<h1>附录</h1>

<ul>
<li><code>bundler</code>是给<code>gem</code>打包的一个<code>gem</code>，所以在上文中先安装了<code>bundler</code>，然后让<code>bundler</code>去本地安装其他的<code>gem</code>。</li>
<li>更多关于<code>Gemfile</code>的使用方法，可以参考<a href="http://bundler.io/">官方网站</a>。</li>
<li>所有<code>.gem</code>文件都可以在<a href="http://rubygems.org/">rubygems.org</a>上下载到。其中包括<code>gem</code>的所有历史版本。</li>
<li>如有更多问题，发送email至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何整合Cucumber小黄瓜至Jenkins持续集成服务器]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/17/ru-he-zheng-he-cucumberxiao-huang-gua-zhi-jenkinschi-xu-ji-cheng-fu-wu-qi/"/>
    <updated>2014-02-17T21:18:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/17/ru-he-zheng-he-cucumberxiao-huang-gua-zhi-jenkinschi-xu-ji-cheng-fu-wu-qi</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何将<code>Cucumber</code>小黄瓜的测试case整合到你的<code>Jenkins CI服务器</code>中。</p>

<!--more-->


<h1>软件安装</h1>

<p>以Windows工作机为例<br/>
&ndash; JDK或者JRE（记得设置JAVA_HOME这个环境变量）<br/>
&ndash; git（如果你已经安装了<a href="http://railsinstaller.org/">RailsInstaller</a>，里面是包含git的）<br/>
&ndash; 下载最新稳定版的<a href="http://mirrors.jenkins-ci.org/war/latest/jenkins.war">Jenkins</a></p>

<h1>本地建立git代码库</h1>

<p>下载，解压源代码，打开命令行，cd至刚解压的文件夹中，运行以下命令。</p>

<p><code>
git init
git add .
git commit -m "initial commit"
</code></p>

<h1>本地配置和运行Jenkins</h1>

<ul>
<li>拷贝<code>Jenkins</code>的<code>war包</code>至你想要的文件夹，打开命令行，cd至那个文件夹。</li>
<li>运行<code>java -Dfile.encoding=UTF-8 -jar jenkins.war</code>。</li>
<li>在网页浏览器中打开<code>http://localhost:8080/configureSecurity/</code>，按下图中的配置以后点击<code>Save</code>。</li>
</ul>


<p><img src="http://i.imgur.com/ea5IK3k.jpg" alt="" /></p>

<ul>
<li>打开<code>http://localhost:8080/pluginManager/available</code>，勾选<code>Source Code Management</code>下的<code>Git Plugin</code>和<code>Build Tools</code>下的<code>Rake plugin</code>。点击<code>Download now and install after restart</code>。</li>
<li>等待Jenkins安装插件，失败的话再重新装。安装完成后<code>ctrl+c</code>杀掉进程，并重新运行<code>Jenkins</code>。</li>
<li>打开<code>http://localhost:8080/view/All/newJob</code>。填入你想要的Job名称，选择<code>Build a free-style software project</code>。点击<code>OK</code>。</li>
<li>打开<code>http://localhost:8080/job/[job名称]/configure</code>。</li>
<li>在<code>Source Code Management</code>下，选择<code>Git</code>。并在<code>Repository URL</code>中填上小黄瓜case所在的文件夹地址。如下图。</li>
</ul>


<p><img src="http://i.imgur.com/OVjhttE.jpg" alt="" /></p>

<ul>
<li>在<code>Build Triggers</code>中勾选<code>Trigger builds remotely</code>。填一个你喜欢的token。这样这个job就可以被远程执行了。以下图为例，在浏览器中输入<code>http://localhost:8080/job/wg_merchant_oc_regression/build?token=lengyu</code>就能执行这个job了。</li>
</ul>


<p><img src="http://i.imgur.com/YhfCOzS.jpg" alt="" /></p>

<ul>
<li>在<code>Build</code>下，点击<code>Add Build Step</code>，并选择<code>Invoke Rake</code>。点击<code>Advanced</code>。配置如下图。<code>features</code>是一个<code>rake task</code>，需要在前面<code>Repository URL</code>目录中配置<code>Rakefile</code>，参见上传的代码。</li>
</ul>


<p><img src="http://i.imgur.com/V7AfNPc.jpg" alt="" /></p>

<h1>总结</h1>

<p>在<code>git plugin</code>和<code>rake plugin</code>的帮助下，轻轻松松就能将小黄瓜整合到<code>jenkins</code>中。如有问题可发送邮件至<a href="mailto:lengu@baidu.com">lengyu@baidu.com</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Cucumber小黄瓜做结算中心数据校验自动化]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/15/ru-he-shi-yong-cucumberxiao-huang-gua-zuo-jie-suan-zhong-xin-shu-ju-xiao-yan-zi-dong-hua/"/>
    <updated>2014-02-15T15:53:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/15/ru-he-shi-yong-cucumberxiao-huang-gua-zuo-jie-suan-zhong-xin-shu-ju-xiao-yan-zi-dong-hua</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用<code>小黄瓜</code>来实结算中心数据比对的自动化。如果你对小黄瓜还没有初步认识的话，推荐阅读我之前写的一篇<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">文章</a>。</p>

<!--more-->


<h1>运行自动化</h1>

<p>按照惯例，下载代码，解压，打开命令行，切换到解压后的文件夹中。<br/>
运行<code>bundle install</code>。<br/>
运行<code>cucumber features/wgpc_sc.feature</code>，运行成功的话，应该能看见如下输出。</p>

<p><img src="http://i.imgur.com/oPyqlVY.jpg" alt="" /></p>

<p>注意这个case挂掉了，因为<code>jianzhong</code>2月14号的数据跟线上数据校验后有出入。输出中浅蓝色的字体（{&ldquo;540&rdquo;=>[46.0, 0.0]}）为账户金额有出入的商家id以及<code>jianzhong</code>与线上数据金额的差额。</p>

<h1>feature文档</h1>

<p>这次的feature文档简单很多。如对feature文档中的关键词存有疑惑，可参考我之前写的这篇<a href="http://tauntaunslayer13.me/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi/">文章</a>。</p>

<p>``` cucumber
Feature: 比对结算数据
  为了保证结算数据中各个资金帐户余额的准确性，跟建忠计算的数据进行验对。</p>

<p>  Scenario: 校验逻辑</p>

<pre><code>Given 我读取"./data/sc/2014-02-13.xls"建忠excel文件中的数据
And 我打开"http://settlement.weigou.baidu.com/macount/account_info?merchantId="线上结算中心网站并抓取结算数据
When 我比对这二组数据
Then 我将会生成校验报告并评估此次校验
</code></pre>

<p>```</p>

<p>整个比对过程大致为，打开<code>jianzhong</code>的excel文件，打开线上的结算中心，并抓取线上结算中心网页上的数据，并跟<code>jianzhong</code>的数据进行比对，如有出入，打印有出入的商家id以及2份数据余额的差额并断言。（注：本来想自动发email的，但是mail这个gem所依赖的mime-type这个gem跟cucumber也不知道是capybara用到的mime-type的版本好像有冲突。望高人留言指点。）</p>

<h1>代码详解</h1>

<p>``` ruby
Given /^我读取"(.*?)&ldquo;建忠excel文件中的数据$/ do |excel_file|
  # 使用spreadsheet这个gem来读取xls文件
  sc_file = Spreadsheet.open excel_file
  # 选择记录各资金账户余额的一张sheet
  sc_sheet = sc_file.worksheet 2
  # @sc_data_jianzhong以商家id为key，对应value为长度为2的一个数组
  # 数组中第1个值为用户担保帐余额，第2个是待结算账户余额
  @sc_data_jianzhong = Hash.new
  counter = 0
  # 读取每一行
  sc_sheet.each do |row|</p>

<pre><code># 跳过第一行，其实不跳也没关系
counter += 1
if counter == 1
  next
end 
# row[2]就是用户担保帐余额，row[3]是待结算账户余额
@sc_data_jianzhong[row[0]] = Array.new
@sc_data_jianzhong[row[0]] &lt;&lt; row[2]    
@sc_data_jianzhong[row[0]] &lt;&lt; row[3]
</code></pre>

<p>  end
end
```</p>

<p>从excel文件里面读取<code>jianzhong</code>结算的结算数据，并保存到<code>@sc_data_jianzhong</code>这个变量中。</p>

<p>``` ruby
Given /^我打开"(.*?)&ldquo;线上结算中心网站并抓取结算数据$/ do |sc_url|
  # 访问结算中心线上环境
  visit sc_url
  # 算一下一共有多少行商家
  count = page.all(&lsquo;table tr&rsquo;).count
  @sc_data_yanghu = Hash.new
  # 有多少行，就loop多少次
  count.times do |i|</p>

<pre><code># 跳过第一行，其实也可以不跳
if i == 0
  next
end 
# 用xpath选到每一行，拿他的text。
row = find(:xpath, "(//tr)[" + (i + 1).to_s + "]").text.split
@sc_data_yanghu[row[1]] = Array.new
# row[4]为用户担保帐余额，row[5]为待结算账户余额
@sc_data_yanghu[row[1]] &lt;&lt; row[4][1, row[4].length]
@sc_data_yanghu[row[1]] &lt;&lt; row[5][1, row[5].length]
</code></pre>

<p>  end
end
```</p>

<p>使用<code>selenium-webdriver</code>配合<code>capybara</code>打开结算中心线上环境。并抓取页面上的数据，保存至<code>@sc_data_yanghu</code>这个参数中。</p>

<p>``` ruby
When /^我比对这二组数据$/ do
  # 数据比对结果
  @result = Hash.new
  # 比对@sc_data_yanghu和@sc_data_jianzhong，写的比较死，不是最灵活
  @sc_data_yanghu.each do |key, value|</p>

<pre><code>if @sc_data_jianzhong.has_key?(key)
  if @sc_data_jianzhong[key][0].to_f != value[0].delete(',').to_f || @sc_data_jianzhong[key][1].to_f != value[1].delete(',').to_f
    @result[key] = Array.new
    # 现在想来可能这个delete(',')的处理放在上面可能比较好。
    @result[key] &lt;&lt; (@sc_data_jianzhong[key][0].to_f - value[0].delete(',').to_f)
    @result[key] &lt;&lt; (@sc_data_jianzhong[key][1].to_f - value[1].delete(',').to_f)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>比对@sc_data_yanghu和@sc_data_jianzhong里面的数据，如果数据有出入的话，保存商家id至<code>@result</code>中，然后计算2份数据之间的差额，差额越大bug的可能性也越大，大概。。。</p>

<p>``` ruby
Then /^我将会生成校验报告并评估此次校验$/ do
  # 本来想自动发email的，但是这个mail的依赖好像有冲突，求高人指点
  # Mail.deliver do
  #   from     &lsquo;<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#113;&#x61;&#45;&#x61;&#117;&#x74;&#x6f;&#109;&#x61;&#116;&#105;&#x6f;&#110;&#64;&#98;&#97;&#105;&#100;&#117;&#46;&#x63;&#x6f;&#109;">&#x71;&#x61;&#x2d;&#x61;&#117;&#x74;&#111;&#x6d;&#97;&#x74;&#x69;&#x6f;&#x6e;&#x40;&#98;&#x61;&#105;&#x64;&#x75;&#x2e;&#x63;&#111;&#109;</a>&rsquo;
  #   to       &lsquo;<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x6c;&#x65;&#x6e;&#103;&#121;&#117;&#64;&#98;&#x61;&#105;&#x64;&#117;&#x2e;&#x63;&#x6f;&#109;">&#108;&#x65;&#x6e;&#103;&#x79;&#117;&#64;&#x62;&#x61;&#105;&#x64;&#x75;&#46;&#99;&#x6f;&#x6d;</a>&rsquo;
  #   subject  &lsquo;【结算中心线上数据与建忠数据比对结果】&rsquo;
  #   body     @result.to_s
  #   # add_file &lsquo;/full/path/to/somefile.png&rsquo;
  # end</p>

<p>  # 打印结果
  puts @result
  # 断言，@result应该为空。
  @result.should be_empty
end
```</p>

<p>最后看<code>@result</code>是否为空，不是的话，就需要断言。说明2份数据有出入。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用小黄瓜来做接口级自动化测试]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi/"/>
    <updated>2014-02-13T21:08:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用<code>小黄瓜</code>来实现接口级别的自动化测试。如果你还没有对小黄瓜有初步认识的话，推荐阅读我之前写的一篇<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">文章</a>。</p>

<!--more-->


<h1>运行自动化</h1>

<p>下载代码，解压，打开命令行，切换到解压后的文件夹中，运行<code>bundle install</code>。<br/>
运行<code>cucumber features/wgpc_check_kai.feature</code>，运行成功的话，应该能看见如下输出。</p>

<p><img src="http://i.imgur.com/ghYr3bJ.jpg" alt="" /></p>

<p>以及其他的一些case等等&hellip;</p>

<h1>feature文档</h1>

<p>用<code>小黄瓜</code>写测试case的第一步就是写case的feature文档。<br/>
例如：<code>cuke_oc\features\wgoc_check_kai.feature</code>。<br/>
<code>小黄瓜</code>的feature文档使用<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a>格式来更好的帮你理解，管理和维护你的case。</p>

<p>``` cucumber
@checkorder
Feature: Check Order
  为了保证订单的准确性，在提交订单之前，对订单进行验对。</p>

<p>  Background:</p>

<pre><code>Given 我根据"./data/wgoc_cases/shipping_region.txt"设置配送范围
</code></pre>

<p>  Scenario Outline: 验单逻辑</p>

<pre><code>Given 我根据 &lt;mprpc_data_file&gt; 文件中的配置建立运费信息
And 我根据 &lt;mock_data_file&gt; 文件中的配置制造mock商品信息
And 我从 &lt;request_data_file&gt; 文件中读取某http请求
When 我用post方法发送该请求至oc的话
Then 我将得到与 &lt;response_data_file&gt; 文件中相同的json串
</code></pre>

<p>  Examples: case_1: 默认全国10块, 非促销商品验单成功（购买1件&amp;支持配送&lt;上海&amp;北京&amp;天津>&amp;未绑定运费模板）</p>

<pre><code>| mprpc_data_file | mock_data_file | request_data_file | response_data_file |
| empty.json | check_mock_1.yaml | check_request_1.yaml | check_response_1.json |
</code></pre>

<p><code>``
-</code>Feature<code>关键词：简单介绍你要测试的feature。</code>Feature: Check Order<code>的下一行可以跟任意长度的更为详细的功能摘要。一个</code>Feature<code>能包含多个</code>Scenario<code>。（以上例子只有一个</code>Scenario<code>）  
-</code>Backgroud<code>关键词：定义一个全局的setup的步骤。</code>Background<code>对应的代码，整个feature只运行一次。
-</code>Scenario Outline<code>关键词：配合</code>&lt;><code>括号内的变量与</code>Examples<code>关键词，用</code>Examples<code>下面的表格中定义的具体数值来对应到</code>&lt;><code>括号中的变量中的位置。（以上面为例，当这个</code>Scenario<code>被执行的时候，</code>&lt;mprpc_data_file><code>这个参数的数值，就会被</code>Examples<code>中，</code>mprpc_data_file<code>栏中的</code>empty.json<code>替代。）  
-</code>Given<code>关键词：定义case执行时所要做的一些准备工作。  
-</code>When<code>关键词：定义case执行时所要做一个关键动作。  
-</code>Then<code>关键词：定义case执行后，校验工作，一般断言都放在这里。  
-</code>@checkorder<code>关键词：其实这个也不能算是关键词，</code>@checkorder<code>定义了这个feature会使用名为</code>@checkorder`的一个hook。hook定义了这个feature在case级别的setup/teardown应该执行哪儿些代码。</p>

<h1>code block生成</h1>

<p>有了feature文档以后，运行<code>cucumber features/wgpc_check_kai.feature</code>，<code>小黄瓜</code>会帮你生成如下各个关键词对应的code block。（在你还没有定义对应的steps.rb才会生成，参见<code>cuke_oc/features/step_definitions/check_kai_steps.rb</code>。文件命名关系不大，但是一般以steps结尾。）</p>

<p><img src="http://i.imgur.com/JqweeIf.jpg" alt="" /></p>

<p>复制粘帖以上<code>小黄瓜</code>的输出至<code>cuke_oc/features/step_definitions/foo_steps.rb</code>然后就可以开始填写代码了。当case运行时，会按序运行各个code block中的代码。使用除了英文以外的语言时，别忘记在文件顶端加上<code># encoding: utf-8</code></p>

<h1>代码详解</h1>

<p>``` ruby
Given /^我根据 (.*) 文件中的配置建立运费信息$/ do |mprpc_data_file|
  @fid = 0
  @mprpc_res = nil
  # 从mprpc_data_file文件中读取这个case所需要的运费模板参数
  @mprpc_params = JSON.parse(File.read(&lsquo;./data/wgoc_cases/&rsquo; + mprpc_data_file))
  # 向桩发送请求，生成运费模板
  @mprpc_res = RestClient.post JSONRPC_SEND_POSTAGEAPI_ADDTEMPLATE_URI, @mprpc_params.to_json unless @mprpc_params.empty?
  # 从返回中获得运费模板的id
  if !@mprpc_res.nil? &amp;&amp; @mprpc_res.code == 200</p>

<pre><code>@fid = (JSON.parse(@mprpc_res.body))['result']['result']
</code></pre>

<p>  end
end
```</p>

<p>向桩发送请求，并根据<code>mprpc_data_file</code>中的参数，生成运费模板。现在<code>mprpc_data_file</code>用的是yaml格式。使用了<a href="https://github.com/rest-client/rest-client">RestClient</a>这个<code>gem</code>来发送各种<code>http</code>请求。（什么是<a href="http://guides.rubygems.org/">gem</a>?）</p>

<p>``` ruby
Given /^我根据 (.*) 文件中的配置制造mock商品信息$/ do |mock_data_file|
  # 从mock_data_file读取mock商品的参数
  File.open(&lsquo;./data/wgoc_cases/&rsquo; + mock_data_file, &lsquo;r&rsquo;) { |file|</p>

<pre><code>  @mock_params = YAML.load(file.read)
}
</code></pre>

<p>  # 把前面mprpc返回的delivery_id设定为mock商品的fid
  @mock_params[&lsquo;queryInfo&rsquo;][&lsquo;fid&rsquo;] = @fid unless @fid == 0
  # 向桩发送请求，生成mock商品的kv和queryInfo信息
  RestClient.get SCAFFOLDING_CREATE_KV_URI, :params => @mock_params[&lsquo;kv&rsquo;] unless !@mock_params.key?(&lsquo;kv&rsquo;) || @mock_params[&lsquo;kv&rsquo;].nil?
  RestClient.get SCAFFOLDING_CREATE_PRODUCTAPI_QUERYINFO_URI, :params => @mock_params[&lsquo;queryInfo&rsquo;] unless !@mock_params.key?(&lsquo;queryInfo&rsquo;) || @mock_params[&lsquo;queryInfo&rsquo;].nil?
end
```</p>

<p>向商品库的桩发送请求，并根据<code>mock_data_file</code>中的参数，制造mock商品。现在<code>mock_data_file</code>用的是yaml格式。</p>

<p>``` ruby
Given /^我从 (.*) 文件中读取某http请求$/ do |request_data_file|
  # 从request_data_file中读取验单所需的参数信息
  File.open(&lsquo;./data/wgoc_cases/&rsquo; + request_data_file, &lsquo;r&rsquo;) { |file|</p>

<pre><code>  @request_params = YAML.load(file.read)
}
</code></pre>

<p>end
```</p>

<p>读取<code>request_data_file</code>文件中定义的请求信息。</p>

<p><code>ruby
When /^我用post方法发送该请求至oc的话$/ do
  # 向oc发送验单请求
  @last_response = RestClient.get CHECK_REQUEST_URI, :params =&gt; @request_params
end
</code></p>

<p>根据刚刚读取的请求信息，给oc发送验单请求。</p>

<p><code>ruby
Then /^我将得到与 (.*) 文件中相同的json串$/ do |response_data_file|
  # 使用了Rspec提供的should的断言方法
  JSON.parse(@last_response.body).should == JSON.parse(File.read('./data/wgoc_cases/' + response_data_file))
end
</code></p>

<p>跟<code>response_data_file</code>中定义的预期的json串作比较。不相同的话就触发断言。</p>

<h1>总结</h1>

<p>有问题可发送邮件至<code>lengyu@baidu.com</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Capybara和Cucumber实现页面级别自动化]]></title>
    <link href="http://Fatman13.github.io/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/"/>
    <updated>2014-01-26T21:37:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用capybara/cucumber来实现页面级别的自动化。并将结合微购的订单流程做一个讲解。在这儿为大家强烈推讲下<a href="http://pragprog.com/book/hwcuc/the-cucumber-book">The Cucumber Book</a>以及<a href="http://pragprog.com/book/dhwcr/cucumber-recipes">Cucumber Recipes</a>这2本书。几乎包含了关于<code>小黄瓜</code>的一切。<a href="http://product.dangdang.com/23280484.html#ddclick?act=click&amp;pos=23280484_16_1_p&amp;cat=01.00.00.00.00.00&amp;key=Cucumber&amp;qinfo=&amp;pinfo=20_1_72&amp;minfo=&amp;ninfo=&amp;custid=&amp;permid=20140126101508135714985587192225073&amp;ref=http%3A%2F%2Fbook.dangdang.com%2F&amp;rcount=&amp;type=&amp;t=1390702656000">当当网</a>上也有购买，有兴趣的同学可以问我借阅。以下将这2本书简称为<code>小黄瓜全书</code>和<code>小黄瓜食谱</code>。</p>

<!--more-->


<h1>Capybara简介</h1>

<p>Capybara封装了众多帮助页面自动化的函数。极大的简化了开发流程。Capybara的API可参看<code>小黄瓜全书</code>中<code>15.3 The Capybara API</code>章节。</p>

<h1>Cucumber简介</h1>

<p>小黄瓜是一个强大的自动化测试框架。完善的文档，Gherkin式的测试文档，全局/Case级别的setup/teardown，配合Ruby庞大的gem库，支持各种格式report的生成，等等。</p>

<h1>软件安装</h1>

<p>请参看<code>小黄瓜全书</code>里面的Appendix 2: Installing cucumber的章节。以工作机为例，安装以下即可。<br/>
&ndash; <a href="http://railsinstaller.org/">RailsInstaller</a>（RailsInstaller包含了Ruby1.9.3，Bundler，Git等等众多Ruby开发工具。）<br/>
&ndash; <a href="https://github.com/adoxa/ansicon/downloads">ANSICON</a></p>

<h1>运行自动化</h1>

<p>下载代码，解压，打开命令行，切换到解压后的文件夹中，运行<code>bundle install</code>，修改<code>cuke_pc/features/step_definitions/cod_steps.rb</code>，把以下登录信息改为你自己的百度账号和密码。</p>

<p><code>ruby
fill_in 'userName', :with =&gt; '在此输入你的百度账号'
fill_in 'TANGRAM__PSP_4__password', :with =&gt; '在此输入你的百度帐号密码'
</code></p>

<p>运行<code>cucumber features/wgpc_cod.feature</code>，自动化就跑起来了！</p>

<h1>代码讲解</h1>

<p>在这个<code>cucumber features/wgpc_cod.feature</code>自动化Case中，<br/>
代码都在<code>cuke_pc/features/step_definitions/cod_steps.rb</code>里面。为大家详解一下<code>cod_steps.rb</code>中的代码。</p>

<p><code>ruby
Given /^我已登录用户中心$/ do
  # 访问个人中心页面
  visit 'http://zhixin.baidu.com/Login/index?module=onesite&amp;u=http%3A%2F%2Fcp01-testing-cbbs06.cp01.baidu.com%3A8888%2Fitem%3Fid%3D181835090&amp;from='
  # 在登录页面中，输入自己的百度账号
  fill_in 'userName', :with =&gt; '在此输入你的百度账号'
  # 输入自己百度账号密码
  fill_in 'TANGRAM__PSP_4__password', :with =&gt; '在此输入你的百度帐号密码'
  # 点击登录
  click_button 'TANGRAM__PSP_4__submit'
end
</code></p>

<p><code>visit</code>函数: 根据配置，自动打开网页浏览器，并访问参数中指定的url。<br/>
<code>fill_in</code>函数: 根据id,name或者label text找到输入框，并填写参数所指定的String。<br/>
<code>click_button</code>函数: 根据id,name或者label text找到按钮，并点击该按钮。<br/>
以上代码实现的是，首先打开火狐，进入个人中心页面，输入用户名密码，并点击登录。</p>

<p><code>ruby
Given /^我在中间页对"(.*?)"商品下单:一$/ do |arg1|
  # 这个暂时不关注
  @expected_time_range = Time.now .. (Time.now + 600)
  # 点击立即购买
  find('#detail-buy').click
  # 浏览器窗口最大化
  page.driver.browser.manage.window.maximize
end
</code></p>

<p><code>find</code>函数: 根据CSS Selector或者Xpath找到对应的元素。以便于更进一步的操作。<br/>
以上代码实现的是，在中间页，点击<code>立刻购买</code>。</p>

<p><code>ruby
When /^我选取货到付款$/ do
  # 根据lablel元素上的字，找到“货到付款”并点击
  find("label", :text =&gt; /\A货到付款\z/).click
  # 等待“提交订单”的出现
  find('.order-summary-submit')
  # 点击“提交订单”
  find('.order-summary-submit').click
  # 通过xpath，找到查看所有订单按钮，并点击
  find(:xpath, "//a[@href='/service/user/order/list']").click
end
</code></p>

<p>以上代码实现的是，在验单页面，点击<code>货到付款</code>，点击<code>提交订单</code>，点击<code>查看订单</code>。注意，如果提交订单失败的话，这个case就会在这儿挂掉。</p>

<p><code>ruby
Then /^个人中心订单状态被告更改为"(.*?)"$/ do |arg1|
  # 这个暂时不关注
  puts find(:xpath, "(//td[@class='time'])[1]").text
  @order_time = DateTime.strptime(find(:xpath, "(//td[@class='time'])[1]").text, '%Y-%m-%d %H:%M:%S')
  puts @expected_time_range.cover?(@order_time)
  # 使用xpath，找到之前下的订单，并比较订单状态是否是“等待发货”
  find(:xpath, "(//span[@class=' status_confirm'])[1]").should have_content(arg1)
end
</code></p>

<p><code>should</code>函数: RSpec里面的一个断言的方法。<br/>
<code>have_content</code>函数: 判定元素中是否存在参数中的字段。<br/>
以上代码实现的是，回到个人中心后，比较最近的一个订单是不是处于<code>等待发货</code>状态，如果状态错误Case就会挂掉。</p>

<h1>总结</h1>

<p><code>Capybara/Cucumner</code>是一个有完善文档的，非常强大的测试框架。希望以后能用于主流程的保证。不知道医疗那边的同学需不需要？无论是测死链，或者是ajax也都完全没有问题。</p>
]]></content>
  </entry>
  
</feed>
