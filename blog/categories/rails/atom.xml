<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Fatman13]]></title>
  <link href="http://Fatman13.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://Fatman13.github.io/"/>
  <updated>2019-04-28T16:40:52+08:00</updated>
  <id>http://Fatman13.github.io/</id>
  <author>
    <name><![CDATA[Fatman13]]></name>
    <email><![CDATA[tctctcly@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何整合支付宝到Rails应用中]]></title>
    <link href="http://Fatman13.github.io/blog/2014/06/21/ru-he-zheng-he-zhi-fu-bao-dao-railsying-yong-zhong/"/>
    <updated>2014-06-21T12:38:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/06/21/ru-he-zheng-he-zhi-fu-bao-dao-railsying-yong-zhong</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何接入支付宝到你的<code>Rails4</code>应用中。本人已知的一些支持接入支付宝的<code>gem</code>有<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>等等。但是由于<code>RoR</code>目前国内仍然比较非主流，这2个<code>gem</code>并没有维护的非常好。本文将介绍如何自己写一个简单接入支付宝的<code>Rails helper</code>。（用到了很多<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>中的源代码）</p>

<!--more-->


<h1>申请支付宝商家服务</h1>

<p>在技术集成之前，首先需要申请支付宝<a href="https://b.alipay.com/">商家服务</a>产品，获取<code>PID</code>和<code>Key</code>。现在支付宝商家服务最常见的产品包括<code>双功能收款</code>和<code>平台商双功能收款</code>。二者的主要区别在于<code>双功能收款</code>的买家只能对你进行付款，<code>平台商双功能收款</code>能让买家直接对入驻你平台的卖家进行付款。审核通过后，就能在<a href="https://b.alipay.com/order/techService.htm?src=nsf05/">这里</a>找到相关的技术文档，进行技术集成了。</p>

<h1>支付宝接口调用流程</h1>

<p>当用户在你的应用上完成订单，点击例如<code>去支付</code>之类的按钮时，按照<a href="https://b.alipay.com/order/techService.htm?src=nsf05/">支付宝文档</a>中的参数要求生成请求参数，利用<code>Rails</code>的 <code>redirect_to</code>函数，让用户跳转到<code>支付宝网关的url+请求参数</code>。你应用这边的事情就结束了，一切顺利的话，用户跳转到支付宝网关，登录支付宝账号并支付，一笔交易就完成啦！需要注意的是，请求参数中提供了2个可选参数<code>return_url</code>和<code>notify_url</code>。分别是支付宝交易处理完成后，同步和异步反调请求地址。也就是说，你的应用需要提供2个<code>url</code>给支付宝调用，用来通知你交易的状态。如果这2个参数为空，支付宝不会进行反调。所有交易记录都可以在支付宝账号中查看。</p>

<h1>关于生成签名</h1>

<p>你发送给支付宝网关的请求参数，支付宝会通过验证<code>sign</code>和<code>sign_type</code>这2个必填参数来判断请求的合法性。但是如何生成<code>sign</code>和<code>sign_type</code>呢？举个例子，假如说现在除了<code>sign</code>和<code>sign_type</code>我只要传<code>a=1</code>，<code>b=2</code>，<code>c=3</code>这三个参数给支付宝网关。那么sign的值应该如下。（注意：参数需按照字母顺序排序。示例使用<code>sign_type</code>为MD5，其他还有<code>RSA</code>等等的验证方式。<code>key</code>就是之前申请支付宝商家服务时，支付宝给你的一个密钥。）
<code>
sign      = MD5('a=1&amp;b=2&amp;c=3' + key )
sign_type = 'MD5'
</code></p>

<h1>helper函数</h1>

<p>首先在helper文件夹下建<code>alipay</code>文件夹。这里比较随意，你也可以不建这个文件夹。在<code>alipay</code>下建立<code>gateway_helper.rb</code>。名字可以随意，<code>_helper.rb</code>后缀能保证默认配置下，<code>Rails</code>读取这个文件。</p>

<p><code>
D:.
├─app
│  ├─assets
│  ├─controllers
│  ├─helpers
│  │  └─alipay
</code></p>

<h1>生成请求参数</h1>

<p>在<code>gateway_helper.rb</code>中添加如下代码。（其中用到了很多<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>中的源代码）</p>

<p>``` ruby</p>

<h1>encoding: utf-8</h1>

<p>require &lsquo;digest/md5&rsquo;</p>

<p>module Alipay #:nodoc:
  module GatewayHelper #:nodoc:</p>

<pre><code># 直接叫这个函数，放入参数，就能实现跳转啦
def alipay_purchase(options={})
  # 准备请求参数
  query = prep_params(options)
  # 阿里网关url + 请求参数
  alipay_url = 'https://mapi.alipay.com/gateway.do?' + querify_esc(query)
  # 页面跳转
  redirect_to alipay_url
end

private

def prep_params(options={})
  query_params = {
    # ===&gt; 配置信息 &lt;===
    #   隐藏隐私信息在配置文件中，配置文件不要用SCM管理。
    :partner =&gt; ALIPAY_CONFIG[Rails.env]['pid'],
    :"_input_charset" =&gt; 'utf-8',
    # return_url和notify_url暂时不用
    # :notify_url =&gt; options[:notify_url],
    # :return_url =&gt; options[:return_url],
    # 支付宝商家服务类型，这里是双功能收款。
    :service =&gt; 'trade_create_by_buyer',
    # ===&gt; 交易信息 &lt;===
    #   你系统中的订单号，交易成功的订单号再次请求会失败
    :out_trade_no =&gt; options[:out_trade_no],
    :price =&gt; options[:price],
    :quantity =&gt; 1,
    # :seller_email =&gt; SELLER_EMAIL,
    :seller_id =&gt; ALIPAY_CONFIG[Rails.env]['pid'],
    :payment_type =&gt; 1,
    #   题目（你网站名称）
    :subject =&gt; options[:subject],
    #   商品清单（我个人理解。。。）
    :body =&gt; options[:body], 
    # ===&gt; 物流 &lt;===
    :logistics_type =&gt; 'POST',
    :logistics_fee =&gt; 0,
    :logistics_payment =&gt; 'BUYER_PAY',
    # ===&gt; 用户信息 &lt;=== 
    :receive_name =&gt; options[:receive_name],    
    :receive_address =&gt; options[:receive_address],    
    :receive_mobile =&gt; options[:receive_mobile],    
    :receive_zip =&gt; options[:receive_zip],    
    :receive_phone =&gt; options[:receive_phone],    
  }
  query_params = Hash[query_params.sort]
  # sign = MD5('a=1&amp;b=2&amp;c=3' + key )
  query_params[:sign] = Digest::MD5.hexdigest(querify(query_params) + ALIPAY_CONFIG[Rails.env]['key'])
  query_params[:sign_type] = 'MD5'
  query_params
end 

def querify(query_hash)
  # 把哈希变成'a=1&amp;b=2&amp;c=3'，验证md5用
  query_hash.map {|key, value| "#{key}=#{value.to_s}" }.join("&amp;")
end

def querify_esc(query_hash)
  # 把哈希变成'a=1&amp;b=2&amp;c=3'，跳转用
  query_hash.map {|key, value| "#{key}=#{CGI.escape(value.to_s)}" }.join("&amp;")
end 
</code></pre>

<p>  end
end
```</p>

<p>这样就<code>okay</code>了。下面将简单示范参考调用方法。</p>

<h1>在routes.rb中 （参考用法）</h1>

<p><code>ruby
resources :orders do
  post 'pay', on: :member
end
</code></p>

<h1>在View中 （参考用法）</h1>

<p><code>erb
&lt;%= link_to pay_order_path(@order), class: 'btn-u', method: :post do %&gt;去支付&lt;% end %&gt;
</code></p>

<h1>在Controller中 （参考用法）</h1>

<p>``` ruby
def pay
  alipay_purchase(</p>

<pre><code>  :out_trade_no =&gt; @order.id, 
  :price =&gt; @order.total_price, 
  :subject =&gt; '某某网',
  :body =&gt; @order.products,
  :receive_name =&gt; @order.name,    
  :receive_address =&gt; @order.address,    
  :receive_mobile =&gt; @order.cell_phone,    
  :receive_zip =&gt; @order.zip,    
  :receive_phone =&gt; @order.phone
</code></pre>

<p>  )
end
```</p>

<h1>附录</h1>

<ul>
<li>平台商双功能收款接入<a href="http://pan.baidu.com/s/1qWwgs7E">文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Host rails app on OpenShift for FREE]]></title>
    <link href="http://Fatman13.github.io/blog/2013/09/16/how-to-host-rails-app-on-openshift-for-free/"/>
    <updated>2013-09-16T14:39:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/09/16/how-to-host-rails-app-on-openshift-for-free</id>
    <content type="html"><![CDATA[<p>There are many great options for hosting your rails application. For instances, <a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PaaS</a> like <a href="https://www.engineyard.com/">engine yard</a> and <a href="https://www.heroku.com/">heroku</a> provide great scalability and automations to ease your deployment. VPS like <a href="https://www.linode.com/">Linode</a> provides more traditional hosting services, which gives you full control of a node. But what if you just want to test your idea and have a public domain name (no tunneling and router tricks)? Then OpenShift is a great choice, cause it is FREE! (at least for your first 3 gears)</p>

<!--more-->


<h1>Good Resources</h1>

<ul>
<li><p>Official rails quick starter <a href="https://www.openshift.com/kb/kb-e1005-ruby-on-rails-openshift-quickstart-guide">guide</a>.</p></li>
<li><p>Official sample rails app on <a href="https://github.com/openshift-quickstart/rails-sunspot-openshift-quickstart">github</a>.</p></li>
<li><p>Official documentation on deployment <a href="http://openshift.github.io/documentation/oo_cartridge_developers_guide.html#openshift-builds">scripts</a>.</p></li>
<li><p>Deployment tutorial <a href="http://ror-tech.blogspot.com/2013/04/deploying-rails-application-on-to.html">guide</a>.</p></li>
</ul>


<h1>Deployment</h1>

<p><em>This guide will be similar to steps described in the resouces mentioned above. I will add my thoughts to some of the steps.</em></p>

<p><strong>1</strong>. Create an <a href="http://www.openshift.com">OpenShift</a> account.</p>

<p><strong>2</strong>.  Install <code>rhc</code> gem. (If you are using <code>rvm</code>, don’t use <code>sudo</code>.)
<code>
gem install rhc
</code></p>

<p><strong>3</strong>. Create your cartridge. This should create a folder called <code>[your_rails_app_name]</code> at <code>.</code>.
<code>
rhc app create -a [your_rails_app_name] -t ruby-1.9
</code></p>

<p><strong>4</strong>. Add database support to your application.
<code>
rhc cartridge add -a [your_rails_app_name] -c [database_name]
</code>
Here is a list of supported database.</p>

<table>
<thead>
<tr>
<th align="left">Short Name </th>
<th align="left"> Full name</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">10gen-mms-agent-0.1 </td>
<td align="left"> 10gen Mongo Monitoring Service Agent</td>
</tr>
<tr>
<td align="left">cron-1.4 </td>
<td align="left"> Cron 1.4</td>
</tr>
<tr>
<td align="left">jenkins-client-1 </td>
<td align="left"> Jenkins Client</td>
</tr>
<tr>
<td align="left">mongodb-2.2 </td>
<td align="left"> MongoDB NoSQL Database 2.2</td>
</tr>
<tr>
<td align="left">mysql-5.1 </td>
<td align="left"> MySQL Database 5.1</td>
</tr>
<tr>
<td align="left">metrics-0.1 </td>
<td align="left"> OpenShift Metrics 0.1</td>
</tr>
<tr>
<td align="left">haproxy-1.4 </td>
<td align="left"> OpenShift Web Balancer</td>
</tr>
<tr>
<td align="left">phpmyadmin-3 </td>
<td align="left"> phpMyAdmin 3.4</td>
</tr>
<tr>
<td align="left">postgresql-8.4 </td>
<td align="left"> PostgreSQL Database 8.4</td>
</tr>
<tr>
<td align="left">postgresql-9.2 </td>
<td align="left"> PostgreSQL Database 9.2</td>
</tr>
<tr>
<td align="left">rockmongo-1.1 </td>
<td align="left"> RockMongo 1.1</td>
</tr>
<tr>
<td align="left">switchyard-0 </td>
<td align="left"> SwitchYard 0.8.0</td>
</tr>
</tbody>
</table>


<p><strong>5</strong>. Add <code>deploy</code> script to <code>[your_rails_app_name]/.openshift/action_hooks/</code>.
<code>
touch [your_rails_app_name]/.openshift/action_hooks/deploy
</code>
Add the following code to <code>deploy</code> file to initialize database.
<code>ruby
pushd ${OPENSHIFT_REPO_DIR} &gt; /dev/null
bundle exec rake db:migrate RAILS_ENV="production"
popd &gt; /dev/null
</code>
<em>NOTE: This might be obvious to experienced Linux user, but I failed to realize this the first time. You have to do a <code>sudo chmod +x [your_rails_app_name]/.openshift/action_hooks/deploy</code> on your <code>deploy</code> script or it won’t be run by the server.</em></p>

<p><strong>6</strong>. Change production database configuration in <code>config/database.yml</code>. Then submit your change to your <a href="https://github.com/">github</a> repository.
``` yaml</p>

<p>production:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  pool: 5
  database: &lt;%=ENV[&lsquo;OPENSHIFT_APP_NAME&rsquo;]%>
  username: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_USERNAME&rsquo;]%>
  password: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_PASSWORD&rsquo;]%>
  socket: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_SOCKET&rsquo;]%>
  host: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_HOST&rsquo;]%>
  port: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_PORT&rsquo;]%>
<code>``
*NOTE: Remember to change adapter and ENV variable to corresponding database your are using. For example, If your are using postgresql then change</code>&lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_USERNAME&rsquo;]%><code>to</code>&lt;%=ENV[&lsquo;OPENSHIFT_POSTGRESQL_DB_USERNAME&rsquo;]%>`*</p>

<p><strong>7</strong>. Download your rails application from your github repository.
<code>
cd railsapp
git remote add upstream -m master [your_git_repo_ssh_url]
git pull -s recursive -X theirs upstream master
</code></p>

<p><strong>8</strong>. Do <code>git push</code>. <code>git push</code> will initialize the server and trigger the <code>deploy</code> script. If everything goes alright, you should see your application running on <code>http://[your_rails_app_name]-[your_namespace].rhcloud.com</code>. You can customize your domain name too. Check this <a href="http://ror-tech.blogspot.com/2013/04/deploying-rails-application-on-to.html">post</a> out to learn details.</p>
]]></content>
  </entry>
  
</feed>
