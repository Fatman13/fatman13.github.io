<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | Fatman13]]></title>
  <link href="http://Fatman13.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://Fatman13.github.io/"/>
  <updated>2014-06-21T12:56:16+08:00</updated>
  <id>http://Fatman13.github.io/</id>
  <author>
    <name><![CDATA[Fatman13]]></name>
    <email><![CDATA[tctctcly@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何整合支付宝到Rails应用中]]></title>
    <link href="http://Fatman13.github.io/blog/2014/06/21/ru-he-zheng-he-zhi-fu-bao-dao-railsying-yong-zhong/"/>
    <updated>2014-06-21T12:38:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/06/21/ru-he-zheng-he-zhi-fu-bao-dao-railsying-yong-zhong</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何接入支付宝到你的<code>Rails4</code>应用中。本人已知的一些支持接入支付宝的<code>gem</code>有<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>等等。但是由于<code>RoR</code>目前国内仍然比较非主流，这2个<code>gem</code>并没有维护的非常好。本文将介绍如何自己写一个简单接入支付宝的<code>Rails helper</code>。（用到了很多<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>中的源代码）</p>

<!--more-->


<h1>申请支付宝商家服务</h1>

<p>在技术集成之前，首先需要申请支付宝<a href="https://b.alipay.com/">商家服务</a>产品，获取<code>PID</code>和<code>Key</code>。现在支付宝商家服务最常见的产品包括<code>双功能收款</code>和<code>平台商双功能收款</code>。二者的主要区别在于<code>双功能收款</code>的买家只能对你进行付款，<code>平台商双功能收款</code>能让买家直接对入驻你平台的卖家进行付款。审核通过后，就能在<a href="https://b.alipay.com/order/techService.htm?src=nsf05/">这里</a>找到相关的技术文档，进行技术集成了。</p>

<h1>支付宝接口调用流程</h1>

<p>当用户在你的应用上完成订单，点击例如<code>去支付</code>之类的按钮时，按照<a href="https://b.alipay.com/order/techService.htm?src=nsf05/">支付宝文档</a>中的参数要求生成请求参数，利用<code>Rails</code>的 <code>redirect_to</code>函数，让用户跳转到<code>支付宝网关的url+请求参数</code>。你应用这边的事情就结束了，一切顺利的话，用户跳转到支付宝网关，登录支付宝账号并支付，一笔交易就完成啦！需要注意的是，请求参数中提供了2个可选参数<code>return_url</code>和<code>notify_url</code>。分别是支付宝交易处理完成后，同步和异步反调请求地址。也就是说，你的应用需要提供2个<code>url</code>给支付宝调用，用来通知你交易的状态。如果这2个参数为空，支付宝不会进行反调。所有交易记录都可以在支付宝账号中查看。</p>

<h1>关于生成签名</h1>

<p>你发送给支付宝网关的请求参数，支付宝会通过验证<code>sign</code>和<code>sign_type</code>这2个必填参数来判断请求的合法性。但是如何生成<code>sign</code>和<code>sign_type</code>呢？举个例子，假如说现在除了<code>sign</code>和<code>sign_type</code>我只要传<code>a=1</code>，<code>b=2</code>，<code>c=3</code>这三个参数给支付宝网关。那么sign的值应该如下。（注意：参数需按照字母顺序排序。示例使用<code>sign_type</code>为MD5，其他还有<code>RSA</code>等等的验证方式。<code>key</code>就是之前申请支付宝商家服务时，支付宝给你的一个密钥。）
<code>
sign      = MD5('a=1&amp;b=2&amp;c=3' + key )
sign_type = 'MD5'
</code></p>

<h1>helper函数</h1>

<p>首先在helper文件夹下建<code>alipay</code>文件夹。这里比较随意，你也可以不建这个文件夹。在<code>alipay</code>下建立<code>gateway_helper.rb</code>。名字可以随意，<code>_helper.rb</code>后缀能保证默认配置下，<code>Rails</code>读取这个文件。</p>

<p><code>
D:.
├─app
│  ├─assets
│  ├─controllers
│  ├─helpers
│  │  └─alipay
</code></p>

<h1>生成请求参数</h1>

<p>在<code>gateway_helper.rb</code>中添加如下代码。（其中用到了很多<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>中的源代码）</p>

<p>``` ruby</p>

<h1>encoding: utf-8</h1>

<p>require &lsquo;digest/md5&rsquo;</p>

<p>module Alipay #:nodoc:
  module GatewayHelper #:nodoc:</p>

<pre><code># 直接叫这个函数，放入参数，就能实现跳转啦
def alipay_purchase(options={})
  # 准备请求参数
  query = prep_params(options)
  # 阿里网关url + 请求参数
  alipay_url = 'https://mapi.alipay.com/gateway.do?' + querify_esc(query)
  # 页面跳转
  redirect_to alipay_url
end

private

def prep_params(options={})
  query_params = {
    # ===&gt; 配置信息 &lt;===
    #   隐藏隐私信息在配置文件中，配置文件不要用SCM管理。
    :partner =&gt; ALIPAY_CONFIG[Rails.env]['pid'],
    :"_input_charset" =&gt; 'utf-8',
    # return_url和notify_url暂时不用
    # :notify_url =&gt; options[:notify_url],
    # :return_url =&gt; options[:return_url],
    # 支付宝商家服务类型，这里是双功能收款。
    :service =&gt; 'trade_create_by_buyer',
    # ===&gt; 交易信息 &lt;===
    #   你系统中的订单号，交易成功的订单号再次请求会失败
    :out_trade_no =&gt; options[:out_trade_no],
    :price =&gt; options[:price],
    :quantity =&gt; 1,
    # :seller_email =&gt; SELLER_EMAIL,
    :seller_id =&gt; ALIPAY_CONFIG[Rails.env]['pid'],
    :payment_type =&gt; 1,
    #   题目（你网站名称）
    :subject =&gt; options[:subject],
    #   商品清单（我个人理解。。。）
    :body =&gt; options[:body], 
    # ===&gt; 物流 &lt;===
    :logistics_type =&gt; 'POST',
    :logistics_fee =&gt; 0,
    :logistics_payment =&gt; 'BUYER_PAY',
    # ===&gt; 用户信息 &lt;=== 
    :receive_name =&gt; options[:receive_name],    
    :receive_address =&gt; options[:receive_address],    
    :receive_mobile =&gt; options[:receive_mobile],    
    :receive_zip =&gt; options[:receive_zip],    
    :receive_phone =&gt; options[:receive_phone],    
  }
  query_params = Hash[query_params.sort]
  # sign = MD5('a=1&amp;b=2&amp;c=3' + key )
  query_params[:sign] = Digest::MD5.hexdigest(querify(query_params) + ALIPAY_CONFIG[Rails.env]['key'])
  query_params[:sign_type] = 'MD5'
  query_params
end 

def querify(query_hash)
  # 把哈希变成'a=1&amp;b=2&amp;c=3'，验证md5用
  query_hash.map {|key, value| "#{key}=#{value.to_s}" }.join("&amp;")
end

def querify_esc(query_hash)
  # 把哈希变成'a=1&amp;b=2&amp;c=3'，跳转用
  query_hash.map {|key, value| "#{key}=#{CGI.escape(value.to_s)}" }.join("&amp;")
end 
</code></pre>

<p>  end
end
```</p>

<p>这样就<code>okay</code>了。下面将简单示范参考调用方法。</p>

<h1>在routes.rb中 （参考用法）</h1>

<p><code>ruby
resources :orders do
  post 'pay', on: :member
end
</code></p>

<h1>在View中 （参考用法）</h1>

<p><code>erb
&lt;%= link_to pay_order_path(@order), class: 'btn-u', method: :post do %&gt;去支付&lt;% end %&gt;
</code></p>

<h1>在Controller中 （参考用法）</h1>

<p>``` ruby
def pay
  alipay_purchase(</p>

<pre><code>  :out_trade_no =&gt; @order.id, 
  :price =&gt; @order.total_price, 
  :subject =&gt; '某某网',
  :body =&gt; @order.products,
  :receive_name =&gt; @order.name,    
  :receive_address =&gt; @order.address,    
  :receive_mobile =&gt; @order.cell_phone,    
  :receive_zip =&gt; @order.zip,    
  :receive_phone =&gt; @order.phone
</code></pre>

<p>  )
end
```</p>

<h1>附录</h1>

<ul>
<li>平台商双功能收款接入<a href="http://pan.baidu.com/s/1qWwgs7E">文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Deploy Rails 4 app from Windows dev environment using Capistrano 3]]></title>
    <link href="http://Fatman13.github.io/blog/2014/05/24/how-to-deploy-rails-4-app-from-windows-dev-environment-using-capistrano-3/"/>
    <updated>2014-05-24T21:26:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/05/24/how-to-deploy-rails-4-app-from-windows-dev-environment-using-capistrano-3</id>
    <content type="html"><![CDATA[<p>This post will be primarily sharing some gotchas when I went through this <a href="http://corlewsolutions.com/articles/article-10-how-to-deploy-rails-applications-using-capistrano-3-1-and-windows-7">post</a> for deploying to a Linux server from Windows development machines using capistrano 3.</p>

<!--more-->


<h1>Environment</h1>

<ul>
<li>Development on Windows 7</li>
<li>Deployment on <a href="http://www.aliyun.com/">aliyun ECS</a> Ubuntu 12.04 image</li>
<li>Rails 4</li>
<li>Capistrano 3</li>
</ul>


<h1>Sidenote</h1>

<ul>
<li>Capistrano will automatically run <code>rake db:migration</code> for you if you uncomment <code>require 'capistrano/rails/migrations'</code> in capfile.</li>
<li>Capistrano will automatically precompile assets for you if you uncomment <code>require 'capistrano/rails/assets'</code> in capfile.</li>
</ul>


<h1>fetch not working?</h1>

<p>When running <code>cap production git:check</code>, I always get something like the following error when I use a variable defined by <code>set</code> method.</p>

<p><code>ruby
set :github_user, 'Fatman13'
set :repo_url, 'https://github.com/#{fetch(:github_user)}/foo.git'
</code></p>

<p><code>
DEBUG [39feea1e] Running /usr/bin/env git ls-remote -h https://github.com/#{fetch(:github_user)}/foo.git on 114.***.***.***
DEBUG [39feea1e] Command: ( GIT_ASKPASS=/bin/echo GIT_SSH=/tmp/foo/git-ssh.sh /usr/bin/env git ls-remote -h https://github.com/#{fetch(:github_user)}/foo.git )
DEBUG [39feea1e] Finished in 0.962 seconds with exit status 1 (failed).
DEBUG [39feea1e]        bash: -c: line 0: syntax error near unexpected token `('
DEBUG [39feea1e]        bash: -c: line 0: `( GIT_ASKPASS=/bin/echo GIT_SSH=/tmp/deepot/git-ssh.sh /usr/bin/env git ls-remote -h https://github.com/#{fetch(:github_user)}/foo.git )'
DEBUG [39feea1e] Finished in 0.962 seconds with exit status 1 (failed).
</code></p>

<p>I have to ditch <code>fetch</code> method and write something like&hellip;</p>

<p><code>ruby
set :repo_url, 'https://github.com/Fatman13/foo.git'
</code></p>

<h1>No such file to load &mdash; bcrypt</h1>

<p>Capistrano will try to precompile assets at somepoint while running <code>cap production deploy</code>. It kept throwing an error saying <code>No such file to load -- bcrypt</code>. I found a comment from <a href="http://railscasts.com/episodes/335-deploying-to-a-vps?view=comments">Railscast</a> solved my problem.</p>

<blockquote><p>I had this issue. I develop on Windows 7, and certain gems have windows-specific versions. I went into my Gemfile.lock and removed all &ldquo;x86-mingw32&rdquo; in the gem version numbers. After commiting the changes and deploying again, it worked. I also had this problem with postgres and the pg gem.
(by <a href="https://github.com/jdresner">jdresner</a>)</p></blockquote>

<h1>References</h1>

<ul>
<li>[1] My <a href="https://github.com/Fatman13/deepot/blob/master/Gemfile">gemfile</a>.</li>
<li>[2] Corlew solutions&rsquo;s <a href="http://corlewsolutions.com/articles/article-10-how-to-deploy-rails-applications-using-capistrano-3-1-and-windows-7">How-To Deploy Rails Applications Using Capistrano 3.1 and Windows 7</a></li>
<li>[3] Corlew solutions&rsquo;s <a href="http://corlewsolutions.com/articles/article-11-guide-to-setting-up-ssh-on-windows-7">Guide To Setting Up SSH on Windows 7</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4 strong parameter gotcha for beginners]]></title>
    <link href="http://Fatman13.github.io/blog/2014/05/24/rails4-strong-parameter-gotcha-for-beginners/"/>
    <updated>2014-05-24T21:24:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/05/24/rails4-strong-parameter-gotcha-for-beginners</id>
    <content type="html"><![CDATA[<p><code>Rails 4</code> gotcha for noobies(like me) &mdash; Strong Parameters</p>

<!--more-->


<p><code>Rails 4</code> now comes with <a href="https://github.com/rails/strong_parameters">strong_parameters</a> gem as part of standard installation now. For example if you run <code>rails g scaffold product name price:decimal</code>, the following will be generated in <code>app/controllers/products_controller.rb</code> under <code>private</code> methods section.</p>

<p>``` ruby</p>

<h1>Never trust parameters from the scary internet, only allow the white list through.</h1>

<p>def product_params
  params.require(:product).permit(:name, :price)
end
```</p>

<p>As the comments suggested, <code>product_params</code> will only allow a whitelist of product attributes. This is done by using <code>permit</code> method as shown above.</p>

<p>Now the gotcha part&hellip; When you add new columns using <code>rails g migration add_stock_to_product stock:integer</code>, <code>rake db:migrate</code>, changing the corresponding scaffold <code>html.erb</code> files. You expect the new product attribute <code>stock</code> to work, but it won&rsquo;t. You still need to add <code>:stock</code> hash to <code>permit</code> method like the following.</p>

<p>``` ruby</p>

<h1>Never trust parameters from the scary internet, only allow the white list through.</h1>

<p>def product_params
  params.require(:product).permit(:name, :price, :stock)
end
```</p>

<p>I kept forgetting adding new attribute to <code>permit</code>. Thus render controller methods not recognizing new attributes. It got me twice, so putting a note here. Hopefully helping someone on the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[顾妈妈网一期试运营版正式上线]]></title>
    <link href="http://Fatman13.github.io/blog/2014/04/18/gu-ma-ma-wang-yi-qi-shi-yun-ying-ban-zheng-shi-shang-xian/"/>
    <updated>2014-04-18T21:44:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/04/18/gu-ma-ma-wang-yi-qi-shi-yun-ying-ban-zheng-shi-shang-xian</id>
    <content type="html"><![CDATA[<p>公告，顾妈妈网一期试运行版上线啦。大家也快来<a href="gumama13.com">访问</a>吧。非常可惜<code>gumama.com</code>这个域名被人捷足先登了。好像是一个叫<code>谷妈妈</code>的婚庆网站。在下只能屈就于<code>gumama13.com</code>这个域名了。现在随便写下点什么。</p>

<!--more-->


<h1>流量统计</h1>

<p><img src="http://i.imgur.com/u4MlWXT.jpg" alt="" /></p>

<p>使用<a href="http://www.google.com/analytics/">Google Analytics</a>统计的第一天的流量。不过由于<code>Rails 4</code>自带的<code>turbo link</code>功能，不一定每次翻页都统计进去了。尝试了<code>SO</code>上<a href="http://stackoverflow.com/questions/18632644/google-analytics-with-rails-4">这个</a>答案。但是好像没有起到作用。</p>

<h1>部署</h1>

<p>这次部署使用了<a href="http://www.aliyun.com/?utm_medium=text&amp;utm_source=bdbrand&amp;utm_campaign=bdbrand">阿里云</a>。用下来真的挺好。而且阿里在使用百度推广的时候确实也挺精明。在大搜中搜索例如<code>Azure</code>，<code>ucloud</code>等等其他云服务供应商的时候，阿里故意买这些敏感词汇，然后打出自己的广告。</p>

<p><img src="http://i.imgur.com/S3PtAJL.jpg" alt="" /></p>

<p>搜索"Azure"。</p>

<p><img src="http://i.imgur.com/a4456Kx.jpg" alt="" /></p>

<p>搜索"uCloud"</p>

<p>而且<code>阿里云</code>在同类型云服务提供商中间，确实有价格优势，一个月55元。1核CPU，512MB内存，20G硬盘，1MBps网络流量，<code>Ubuntu 12.04</code>，对一个初出茅庐的小网站，是绰绰有余了。阿里杭州机房的响应速度也是良好。在用<code>passenger</code>部署我的<code>Rails 4</code>应用的时候，<code>passenger</code>提示我最好有1G内存，并且给了增加<code>swap</code>内存的指令。阿里云机器默认没有<code>swap</code>内存，不过使用root之后倒也改成功了。不知道是不是阿里云的初衷。</p>

<h1>题外话</h1>

<p>推荐一个4月神番，<a href="http://comic.letv.com/zt/pingpongbili/index.shtml#p1">乒乓</a>。就第一集来看，在下非常喜欢这部片子。鄙人总结了一些该番的看点。虽然都是一些商业片惯用的手法，但是运用的恰到好处。</p>

<h4>&mdash;&ndash;> 剧透分割线 &lt;&mdash;&ndash;</h4>

<ul>
<li>猪脚不苟言笑，但是有个外号叫"smile"</li>
<li>片子开头和当中2段<code>教练</code>和<code>山田队长</code>的对话，埋下了很多伏笔。不经意间带过了很多事情。特别是开头那段对话，后面<code>阿扁</code>被<code>China</code>打败时，让人不禁有“哇~”的感觉。</li>
<li>分镜和<code>BGM</code>也是一流。（从分镜就能感觉到制作满满的诚意）</li>
<li>人物各种幽默的对话，在CV的演绎下，感觉特别好。这个<code>China</code>的教练的CV很好，<code>China</code>的CV一般。</li>
<li><code>12:58</code>和<code>13:17</code>日本教练的细节表情。<code>16:32</code>天空中有鸟飞过。</li>
<li><code>China</code>和<code>阿扁</code>的对局很燃！</li>
<li>对局后<code>China</code>的自我评价，让人对角色的好感度上升很多。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber小黄瓜页面级自动化测试入门教程]]></title>
    <link href="http://Fatman13.github.io/blog/2014/03/12/cucumberxiao-huang-gua-ye-mian-ji-zi-dong-hua-ce-shi-ru-men-jiao-cheng/"/>
    <updated>2014-03-12T20:44:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/03/12/cucumberxiao-huang-gua-ye-mian-ji-zi-dong-hua-ce-shi-ru-men-jiao-cheng</id>
    <content type="html"><![CDATA[<p>之前也写了<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">一篇</a>小黄瓜页面级自动化测试的教程，但是感觉写的可能不是最好。再尝试写一篇入门级别的页面自动化教程。源代码在<a href="https://github.com/Fatman13/cuke_midpage">这里</a>。</p>

<!--more-->


<h1>自动化测试对象</h1>

<p>这段<a href="https://github.com/Fatman13/cuke_midpage">源代码</a>主要自动化测试了<code>百度微购</code>页面上的几个链接是否为死链。</p>

<h1>使用代码</h1>

<ul>
<li>首先<code>git clone https://github.com/Fatman13/cuke_midpage.git</code>。</li>
<li><code>cd cuke_midpage</code>进入刚下载的文件夹中。</li>
<li>运行<code>bundle install</code>。</li>
<li>跑自动化case运行<code>cucumber</code>。（你应该能看到小黄瓜打开火狐，并验证给予的链接是否是死链）</li>
</ul>


<h1>源代码结构</h1>

<p>小黄瓜大致文件结构如下。</p>

<p>```
D:.
└─features</p>

<pre><code>├─step_definitions
└─support
</code></pre>

<p>```</p>

<ul>
<li><code>features</code>文件夹：主要存放<code>.feature</code>文档。是每个测试case的文字解释。</li>
<li><code>step_definition</code>文件夹：主要存放<code>.rb</code>文件。每个case具体执行的代码，都应该放在这里。</li>
<li><code>support</code>文件夹：主要存放<code>env.rb</code>。主要定义一个环境变量。所有<code>require</code>都可以放在这儿里。因为<code>小黄瓜</code>在运行测试前，一定会先运行<code>env.rb</code>这个文件。</li>
</ul>


<p>如上所示，开发者只需将对应的<code>.feature</code>，<code>.rb</code>文件等等，按照小黄瓜约定，放入对应的文件夹中。运行<code>cucumber</code>时，小黄瓜就会自动在对应的文件夹中找运行case所需的代码。</p>

<h1>feature文档讲解</h1>

<p>作为一个<a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>行为驱动测试框架，小黄瓜会逼迫你写一些文档。给测死链case写一个feature文档可能略显<code>鸡肋</code>。这里主要是作为一个简单的例子做讲解一下<code>features/wgmp_link.feature</code>。</p>

<p>``` cucumber
Feature: 中间页死链
  为了保证中间页没有死链。</p>

<p>  Scenario Outline: 测死链（Capybara）</p>

<pre><code>When 我访问"http://weigou.baidu.com"并点击&lt;some_link&gt;链接时
Then 页面状态应该为"200"
</code></pre>

<p>  Examples: 点这些</p>

<pre><code>| some_link |
| 团购 |
</code></pre>

<p>  @new<br/>
  Scenario Outline: 测死链（http client）</p>

<pre><code>When 我访问&lt;some_link&gt;链接时
Then 我得到的页面状态应该为"200"
</code></pre>

<p>  Examples: 点这些</p>

<pre><code>| some_link |
| http://weigou.baidu.com/ |
| http://weigou.baidu.com/topic/food |
| http://weigou.baidu.com/topic/beauty |
</code></pre>

<p>```</p>

<p><code>feature</code>文档使用的是<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gerkins</a>的语法。以上这篇<code>feature</code>文档，使用了<code>Scenario Outline:</code>关键词，写了2个case。第一个是使用<code>Capybara</code>测死链，第二个是直接使用<code>http</code>客户端测死链。<code>Given</code>，<code>When</code>，<code>Then</code>三个关键词可以用来定义一个case所需要走的一个流程。（这个例子中省略了<code>Given</code>）这三个关键词后面的话都是可以根据case的需求改写的。<code>小黄瓜</code>会用这些话，用正则表达式自动对应到<code>feature/step_definitions/link_steps.rb</code>中每句话对应的<code>code block</code>中，并在测试时，运行每句话所对应的代码。</p>

<h1>代码讲解</h1>

<p>接下来讲解一下<code>feature/step_definitions/link_steps.rb</code>中的代码。</p>

<p>```ruby</p>

<h1>encoding: utf-8</h1>

<h1>使用Capybara</h1>

<p>When /^我访问"(.<em>?)&ldquo;并点击(.</em>)链接时$/ do |arg1, arg2|
  # 正则不仅将When关键词的话对应到这个code block中，
  # 还能从那句话中读取参数。
  # arg1的值是"<a href="http://weigou.baidu.com">http://weigou.baidu.com</a>&rdquo;
  # arg2的值是"团购"</p>

<p>  # visit是capybara封装的一个函数。
  # 他会自动打开火狐，并访问arg1。
  visit arg1
  # find是capybara封装的一个函数。
  # 这里通过html的a元素上的text找到了这个a元素，
  # 并将他存到@elem变量中。
  @elem = find(&ldquo;a&rdquo;, :text => /\A#{arg2}\z/)
end</p>

<p>Then /^页面状态应该为"(.*?)&ldquo;$/ do |arg1|
  # 点击该链接
  @elem.click
end</p>

<h1>使用http client</h1>

<p>When /^我访问(.*)链接时$/ do |arg1|
  # 由于在feature文档中使用了examples关键词
  # 这里arg1分别对应了
  # &ldquo;<a href="http://weigou.baidu.com/">http://weigou.baidu.com/</a>&rdquo;
  # &ldquo;<a href="http://weigou.baidu.com/topic/food">http://weigou.baidu.com/topic/food</a>&rdquo;
  # &ldquo;<a href="http://weigou.baidu.com/topic/beauty">http://weigou.baidu.com/topic/beauty</a>&rdquo;
  puts arg1
  # 直接使用http客户端，向每个arg1发送get请求。
  @response = RestClient.get arg1
end</p>

<p>Then /^我得到的页面状态应该为"(.*)&ldquo;$/ do |arg1|
  puts arg1
  # 检查页面status是不是200。
  @response.code.to_s.should eq(arg1)
end
```</p>

<p>这里可以清楚的看到，在<code>feature</code>文档中，<code>When</code>和<code>Then</code>后面跟的话，都一一对应了一块代码。在运行自动化case时，他们会按照<code>feature</code>文档中每个<code>Scenario</code>的顺序，依次执行每一段对应的代码。</p>

<h1>附录</h1>

<ul>
<li>如有问题可以发送邮件至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</li>
<li><a href="https://s3.amazonaws.com/macslow/index.html">这个</a>挺有意思。</li>
</ul>


<object data="https://s3.amazonaws.com/macslow/clock7.svg?w=3&amp;h=3" id="clock1" type="image/svg+xml"></object>

]]></content>
  </entry>
  
</feed>
