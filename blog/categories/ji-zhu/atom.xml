<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | Fatman13]]></title>
  <link href="http://Fatman13.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://Fatman13.github.io/"/>
  <updated>2014-01-03T22:51:13+08:00</updated>
  <id>http://Fatman13.github.io/</id>
  <author>
    <name><![CDATA[Fatman13]]></name>
    <email><![CDATA[tctctcly@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How-to: Host rails app on OpenShift for FREE]]></title>
    <link href="http://Fatman13.github.io/blog/2013/09/16/how-to-host-rails-app-on-openshift-for-free/"/>
    <updated>2013-09-16T14:39:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/09/16/how-to-host-rails-app-on-openshift-for-free</id>
    <content type="html"><![CDATA[<p>There are many great options for hosting your rails application. For instances, <a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PaaS</a> like <a href="https://www.engineyard.com/">engine yard</a> and <a href="https://www.heroku.com/">heroku</a> provide great scalability and automations to ease your deployment. VPS like <a href="https://www.linode.com/">Linode</a> provides more traditional hosting services, which gives you full control of a node. But what if you just want to test your idea and have a public domain name (no tunneling and router tricks)? Then OpenShift is a great choice, cause it is FREE! (at least for your first 3 gears)</p>

<!--more-->


<h1>Good Resources</h1>

<ul>
<li><p>Official rails quick starter <a href="https://www.openshift.com/kb/kb-e1005-ruby-on-rails-openshift-quickstart-guide">guide</a>.</p></li>
<li><p>Official sample rails app on <a href="https://github.com/openshift-quickstart/rails-sunspot-openshift-quickstart">github</a>.</p></li>
<li><p>Official documentation on deployment <a href="http://openshift.github.io/documentation/oo_cartridge_developers_guide.html#openshift-builds">scripts</a>.</p></li>
<li><p>Deployment tutorial <a href="http://ror-tech.blogspot.com/2013/04/deploying-rails-application-on-to.html">guide</a>.</p></li>
</ul>


<h1>Deployment</h1>

<p><em>This guide will be similar to steps described in the resouces mentioned above. I will add my thoughts to some of the steps.</em></p>

<p><strong>1</strong>. Create an <a href="http://www.openshift.com">OpenShift</a> account.</p>

<p><strong>2</strong>.  Install <code>rhc</code> gem. (If you are using <code>rvm</code>, don’t use <code>sudo</code>.)
<code>
gem install rhc
</code></p>

<p><strong>3</strong>. Create your cartridge. This should create a folder called <code>[your_rails_app_name]</code> at <code>.</code>.
<code>
rhc app create -a [your_rails_app_name] -t ruby-1.9
</code></p>

<p><strong>4</strong>. Add database support to your application.
<code>
rhc cartridge add -a [your_rails_app_name] -c [database_name]
</code>
Here is a list of supported database.</p>

<table>
<thead>
<tr>
<th align="left">Short Name </th>
<th align="left"> Full name</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">10gen-mms-agent-0.1 </td>
<td align="left"> 10gen Mongo Monitoring Service Agent</td>
</tr>
<tr>
<td align="left">cron-1.4 </td>
<td align="left"> Cron 1.4</td>
</tr>
<tr>
<td align="left">jenkins-client-1 </td>
<td align="left"> Jenkins Client</td>
</tr>
<tr>
<td align="left">mongodb-2.2 </td>
<td align="left"> MongoDB NoSQL Database 2.2</td>
</tr>
<tr>
<td align="left">mysql-5.1 </td>
<td align="left"> MySQL Database 5.1</td>
</tr>
<tr>
<td align="left">metrics-0.1 </td>
<td align="left"> OpenShift Metrics 0.1</td>
</tr>
<tr>
<td align="left">haproxy-1.4 </td>
<td align="left"> OpenShift Web Balancer</td>
</tr>
<tr>
<td align="left">phpmyadmin-3 </td>
<td align="left"> phpMyAdmin 3.4</td>
</tr>
<tr>
<td align="left">postgresql-8.4 </td>
<td align="left"> PostgreSQL Database 8.4</td>
</tr>
<tr>
<td align="left">postgresql-9.2 </td>
<td align="left"> PostgreSQL Database 9.2</td>
</tr>
<tr>
<td align="left">rockmongo-1.1 </td>
<td align="left"> RockMongo 1.1</td>
</tr>
<tr>
<td align="left">switchyard-0 </td>
<td align="left"> SwitchYard 0.8.0</td>
</tr>
</tbody>
</table>


<p><strong>5</strong>. Add <code>deploy</code> script to <code>[your_rails_app_name]/.openshift/action_hooks/</code>.
<code>
touch [your_rails_app_name]/.openshift/action_hooks/deploy
</code>
Add the following code to <code>deploy</code> file to initialize database.
<code>ruby
pushd ${OPENSHIFT_REPO_DIR} &gt; /dev/null
bundle exec rake db:migrate RAILS_ENV="production"
popd &gt; /dev/null
</code>
<em>NOTE: This might be obvious to experienced Linux user, but I failed to realize this the first time. You have to do a <code>sudo chmod +x [your_rails_app_name]/.openshift/action_hooks/deploy</code> on your <code>deploy</code> script or it won’t be run by the server.</em></p>

<p><strong>6</strong>. Change production database configuration in <code>config/database.yml</code>. Then submit your change to your <a href="https://github.com/">github</a> repository.
``` yaml</p>

<p>production:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  pool: 5
  database: &lt;%=ENV[&lsquo;OPENSHIFT_APP_NAME&rsquo;]%>
  username: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_USERNAME&rsquo;]%>
  password: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_PASSWORD&rsquo;]%>
  socket: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_SOCKET&rsquo;]%>
  host: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_HOST&rsquo;]%>
  port: &lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_PORT&rsquo;]%>
<code>``
*NOTE: Remember to change adapter and ENV variable to corresponding database your are using. For example, If your are using postgresql then change</code>&lt;%=ENV[&lsquo;OPENSHIFT_MYSQL_DB_USERNAME&rsquo;]%><code>to</code>&lt;%=ENV[&lsquo;OPENSHIFT_POSTGRESQL_DB_USERNAME&rsquo;]%>`*</p>

<p><strong>7</strong>. Download your rails application from your github repository.
<code>
cd railsapp
git remote add upstream -m master [your_git_repo_ssh_url]
git pull -s recursive -X theirs upstream master
</code></p>

<p><strong>8</strong>. Do <code>git push</code>. <code>git push</code> will initialize the server and trigger the <code>deploy</code> script. If everything goes alright, you should see your application running on <code>http://[your_rails_app_name]-[your_namespace].rhcloud.com</code>. You can customize your domain name too. Check this <a href="http://ror-tech.blogspot.com/2013/04/deploying-rails-application-on-to.html">post</a> out to learn details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写给毛藏的使用指南]]></title>
    <link href="http://Fatman13.github.io/blog/2013/09/03/xie-gei-mao-cang-de-shi-yong-zhi-nan/"/>
    <updated>2013-09-03T16:46:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/09/03/xie-gei-mao-cang-de-shi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<p>写给毛藏的使用指南。</p>

<!--more-->


<h1>如何安装</h1>

<p><strong>1</strong>. 下载并安装<a href="http://files.rubyforge.vm.bytemark.co.uk/railsinstaller/railsinstaller-2.2.1.exe">RailsInstaller</a>。</p>

<p><strong>2</strong>. 安装完成之后，应该会有一个<code>命令行</code>跳出来。输入以下指令。</p>

<p><code>
git clone https://github.com/Fatman13/MaoZangLED.git
cd MaoZangLED
bundle install
rake db:migrate
</code></p>

<p><em>注：如果有除了c盘以外其他分盘的话需要替换</em><code>bundle install</code><em>为</em><code>bundle install --path .bundle</code><em>。好像sass在windows上有bug。</em></p>

<p><strong>3</strong>. 至此安装完成。运行<code>rails s</code>，使用本地服务器。</p>

<p><strong>4</strong>. 打开浏览器。输入地址<code>localhost:3000/products</code>。</p>

<h1>如何打开服务器</h1>

<p><strong>1</strong>. 打开命令行</p>

<p><code>
cd c:\Sites\MaoZangLED
rails s
</code></p>

<h1>如何更新</h1>

<p><strong>1</strong>. 使用以下命令更新代码。</p>

<p><code>
cd c:\Sites\MaoZangLED
git fetch --all
git reset --hard origin/master
bundle install --path .bundle
rake db:migrate
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Develop a RubyGem using Bundler]]></title>
    <link href="http://Fatman13.github.io/blog/2013/08/12/how-to-develop-a-rubygem-using-bundler/"/>
    <updated>2013-08-12T15:08:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/08/12/how-to-develop-a-rubygem-using-bundler</id>
    <content type="html"><![CDATA[<p>I am by no means a Ruby expert. This is my humble attempt of sharing what I have learned and serves as a note to future me. It should be helpful to whoever is new to Ruby and would like to have a jump start on developing a Ruby gem.</p>

<!--more-->


<h1>Prerequisites</h1>

<h3>Ruby</h3>

<p>Ruby is a powerful programming language which gains popularity with the rise of many active open source projects and communities built around it. Before thinking build some library from scratch, there might already be a free open source library which you can easily leverage. Therefore saving tons of development time.</p>

<h3>gem</h3>

<p>A <code>gem</code> is a Ruby library packaged in a standard format. You can easily download and install gems to help your development through RubyGems, which will be discussed later in the article. In a nutshell, RubyGems works a lot like <code>apt</code> or <code>yum</code>.</p>

<h3>rvm</h3>

<p><code>rvm</code> stands for Ruby enVironment Manager. <code>rvm</code> allows you to switch to a specific Ruby version and a specific set of gems for different projects. It is highly recommended that you install <code>rvm</code> to manage different versions of Ruby and gemsets for your projects.</p>

<p>To install <code>rvm</code>, do.</p>

<p><code>
curl -L https://get.rvm.io | bash -s stable –ruby
</code></p>

<p>To install Ruby 1.9.3, do.</p>

<p><code>
rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest
</code></p>

<p>Use <code>rvm list</code> to verify your Ruby installation. Use <code>rvm list known</code> to see a list of available Ruby versions that rvm is capable of installing.</p>

<p>Notice the last command <code>rvm rubygems lastest</code> will install latest version of <code>rubygems</code>, which is a Ruby library packaging and distribution manager.</p>

<h3>RubyGems</h3>

<p>As mentioned above, with RubyGems, installing libraries published by others is made very easy.</p>

<p><code>
gem install [gem_name]
</code></p>

<p>Substitute [gem_name] in above command to install the actual gem you want.</p>

<ul>
<li><p><strong>Note</strong>: A gem may depend on other gems. Therefore installing one gem may result in installing multiple other gems.</p></li>
<li><p><strong>Tip</strong>: You can specify which version of the gem you want to install by <code>gem install [gem_name] -v ‘1.0.0’</code>,  <code>gem install [gem_name] -v ‘&gt;=1.0.0’</code>, or <code>gem install [gem_name] -v ‘~&gt;1.0.0’</code></p></li>
<li><p><strong>Important</strong>: If you are using <code>rvm</code> like many people recommended, <strong>DO NOT</strong> use <code>sudo</code> when installing gems. You may come across many tutorials telling you to do things like <code>sudo gem install devise</code>. <strong>DON’T</strong> do that. Because <code>sudo</code> will mess up your <code>rvm</code>. See more details on why not using <code>sudo</code> <a href="http://rvm.io/rubies/rubygems">here</a> if you are interested.</p></li>
</ul>


<h3>Git</h3>

<p>Install git, do.</p>

<p><code>
sudo apt-get install git
</code></p>

<!--p2-->


<h1>Building your first gem using Bundler</h1>

<p><code>Bundler</code> is a great gem which can do a lot of things. Scaffolding a new gem is one of its many features.</p>

<p>I will be using <a href="https://github.com/Fatman13/ColorfulMD">colorfulMD</a> as an example gem for this walk through. ColorfulMD colorfies your markdown text by adding <code>&lt;font color=”a_color”&gt;&lt;/color&gt;</code> tag to certain text defined in a <code>config.yaml</code> file.</p>

<p><em>There is a very good guide <a href="https://github.com/radar/guides/blob/master/gem-development.md">here</a>. I will be explaining things that might not be too obvious. At least not so obvious to me.</em></p>

<h3>Getting started</h3>

<p>To install Bundler, do.</p>

<p><code>
gem install bundler
</code></p>

<p>To create a new gem, do.</p>

<p><code>
bundle gem colorfulMD
</code></p>

<p>This should create a new folder called <code>colorfulMD</code>. Some skeleton files and directories will be created under <code>./colorfulMD</code>.</p>

<blockquote><p>If you have Git installed, <code>bundle gem colorfulMD</code> also initializes a Git repository in <code>./colorfulMD</code> so you can start committing right away.</p></blockquote>

<ul>
<li><p><strong>Tip</strong>: You can add <code>.*~</code> and <code>*~</code> to <code>.gitignore</code> file if your text editor creates tmp file ending with <code>~</code>. This will prevent unnecessary files get pushed into your repo.</p></li>
<li><p><strong>Tip</strong>: If you are using IDEs like <code>RubyMine</code>. You may also want to add <code>.idea</code> to your <code>.gitignore</code> file.</p></li>
<li><p><strong>Tip</strong>: Usually you can define all your gem dependencies in your <code>Gemfile</code>. But <code>Bundler</code> creates <code>[gem_name].gemspec</code> file by default and defines dependencies there.</p></li>
<li><p><strong>Tip</strong>: It is a good practice that you put a <code>.rvmrc</code> like <a href="https://github.com/Fatman13/ColorfulMD/blob/master/.rvmrc">this one</a> in <code>colorfulMD</code> folder. <code>cd</code> out of <code>colorfulMD</code> folder and <code>cd</code> back in, you should see that <code>rvm</code> will initialize a independent Ruby environment for this project. This means when working in <code>colorfulMD</code> folder, you are using different Ruby version or gemsets than the global ones.</p></li>
</ul>


<h3>Following BDD</h3>

<p>I didn’t find <a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a> particularly intriguing. But as for this walk through, we shall start writing our test cases even before any actual coding following BDD discipline.</p>

<p>Open <code>colorfulMD.gemspec</code> file and add the following. (<a href="https://github.com/Fatman13/ColorfulMD/blob/master/colorfulMD.gemspec">example here</a>)</p>

<p><code>ruby
s.add_development_dependency "cucumber"
s.add_development_dependency "aruba"
</code>
(<em><code>add_development_dependency</code> means those gems will only be installed for development use.</em>)</p>

<p><code>cucumber</code> gem and <code>aruba</code> gem are great testing tools help us generate test code following BDD discipline. (<em><a href="http://blog.jcoglan.com/2009/10/03/getting-started-with-cucumber-rspec-webrat-and-multiruby/">here</a> is a pretty good introductive tutorial for <code>cucumber</code></em>) <code>bundle install</code> is a command that goes through gemspec file, figure out the dependency and installs gems needed.</p>

<p>Run <code>bundle install</code> to install dependencies.</p>

<p>Inside <code>colorfulMD</code>, do <code>mkdir features</code>. <code>cd</code> into <code>features</code> and create directory structure and files like shown <a href="https://github.com/Fatman13/ColorfulMD/tree/master/features">here</a>.</p>

<ul>
<li><p><strong>/support</strong>: Ruby files in <code>support</code> folder will be executed before <code>cucumber</code> runs any actual tests, therefore it is good to put code that sets up environment here.</p></li>
<li><p><strong>/step_definitions</strong>: Actual test code for a feature will be in this folder.</p></li>
<li><p><strong>cli.feature</strong>: Write your feature in this file. You can name it differently.</p></li>
</ul>


<p>I put down the following into my <code>cli.feature</code> file.</p>

<p>``` ruby
Feature: CLI
  In order to colorfy markdown
  As a CLI
  I want to add <font color> tag to some text</p>

<p>  Scenario: add <font color="given_color"> tag to &ldquo;given_string&rdquo;</p>

<pre><code>Given three arguments "given_color", "given_string" and "text"  
When I call colorfy of CLI with "red" "apple" in "I had an apple this afternoon" 
Then the output should equal 
  """
  I had an &lt;font color="red"&gt;apple&lt;/font&gt; this afternoon
  """
</code></pre>

<p>```</p>

<p>It doesn’t seem to really matter what you put right after <code>Feature:</code> and <code>Scenario:</code>.  The main thing you want to define here is what follows <code>Given</code>, <code>When</code> and <code>Then</code> keywords. It is relatively comprehensive. <code>Given</code> defines what argument(s) your method is taking. (<em>you don’t need <code>given</code> if you are not going to do anything fancy with the arguments</em>) I specified values of the three arguments with <code>When</code> keyword. Note how close the test case is to natural language. That is supposed to be the beauty of BDD. Given the arguments specified after <code>When</code>, I put down the expected output after <code>Then</code> keyword. Triple quotes was used for escaping the quotes in the expected output.</p>

<p>After all that, run <code>bundle exec cucumber features/</code>.  Copy paste the output after <code>You can implement step definitions for undefined steps with these snippets:
</code> to <code>/step_definitions/colorfy_steps.rb</code>. (<em>you should copy paste something close to the below</em>)</p>

<p>``` ruby
Given(/^three arguments &ldquo;(.<em>?)&rdquo;, &ldquo;(.</em>?)&rdquo; and &ldquo;(.*?)&rdquo;$/) do |arg1, arg2, arg3|
  pending # express the regexp above with the code you wish you had
end</p>

<p>When(/^I call colorfy of CLI with &ldquo;(.<em>?)&rdquo; &ldquo;(.</em>?)&rdquo; in &ldquo;(.*?)&rdquo;$/) do |arg1, arg2, arg3|
  pending # express the regexp above with the code you wish you had
end</p>

<p>Then(/^the output should equal$/) do |string|
  pending # express the regexp above with the code you wish you had
end
<code>``
Now add some actual testing code to</code>colorfy_steps.rb` like shown <a href="https://github.com/Fatman13/ColorfulMD/blob/master/features/step_definitions/colorfy_steps.rb">here</a>.</p>

<h3>Implementing CLI</h3>

<p>Add <code>spec.add_dependency "thor"</code> to your <code>gemspec</code> file. And run <code>bundle install</code>.</p>

<p>At project root, do <code>mkdir lib/colorfulMD</code>, <code>touch lib/colorfulMD/cli.rb</code> and <code>touch lib/colorfulMD/colorfulMD.rb</code>. Paste the following to <code>cli.rb</code> and <code>colorfulMD.rb</code> respectively.</p>

<p>``` ruby</p>

<h1>$LOAD_PATH.unshift(File.dirname(<strong>FILE</strong>))</h1>

<p>require &lsquo;thor&rsquo;
require &lsquo;colorfulMD&rsquo;</p>

<p>module ColorfulMD
  class CLI &lt; Thor</p>

<pre><code>desc "colorfy GIVEN_COLOR GIVEN_STRING TEXT", "colorfy a given word by a given color defined in yaml"
def colorfy(given_color, given_string, text)
    clrmd = ColorfulMD::Colorfulmd.new
    clrmd.colorfy(given_color, given_string, text)
end  
</code></pre>

<p>  end
end
```</p>

<p>``` ruby
module ColorfulMD</p>

<pre><code>class Colorfulmd
    # colorfy
    def colorfy(given_color, given_string, text)
      text.gsub(given_string, "&lt;font color=\"" + given_color + "\"&gt;" + given_string + "&lt;/font&gt;" )
    end      
end
</code></pre>

<p>end
```</p>

<p>At this point, if you run <code>bundle exec cucumber features</code>, you should see you have passed all cucumber test! Systems all green!</p>

<p>And now we just need to make a cli executable.</p>

<p>At project root, do <code>mkdir bin</code>. Do <code>touch bin/colorfulMD</code> and <code>sudo chmod +x bin/colorfulMD</code>. <code>bin/colorfulMD</code> will be your CLI executable for your gem. Paste the following code to <code>bin/colorfulMD</code></p>

<p>``` ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>$LOAD_PATH.unshift(File.dirname(<strong>FILE</strong>) + &lsquo;/../lib/colorfulMD&rsquo;)
require &lsquo;colorfulMD/cli&rsquo;
require &lsquo;colorfulMD&rsquo;
ColorfulMD::CLI.start
```</p>

<p>Run your executable by <code>bundle exec bin/colorfulMD colorfy red apple apple</code>. You can modify the code to have colorfy method output string by replacing <code>text.gsub(given_string, "&lt;font color=\"" + given_color + "\"&gt;" + given_string + "&lt;/font&gt;" )</code> with <code>puts text.gsub(given_string, "&lt;font color=\"" + given_color + "\"&gt;" + given_string + "&lt;/font&gt;" )</code> in <code>colorfulMD.rb</code>.</p>

<p>This concludes the tutorial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Disable Bluetooth on startup (Ubuntu 13.04)]]></title>
    <link href="http://Fatman13.github.io/blog/2013/07/12/how-to-disable-bluetooth-on-startup-ubuntu-13-dot-04/"/>
    <updated>2013-07-12T16:53:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/07/12/how-to-disable-bluetooth-on-startup-ubuntu-13-dot-04</id>
    <content type="html"><![CDATA[<p>Somehow whenever I boot up my <code>Ubuntu</code>, <code>Bluetooth</code> would be set to <strong>ON</strong>. <code>Ubuntu</code> didn&rsquo;t seem to remember whether <code>Bluetooth</code> was set to <strong>ON</strong> or <strong>OFF</strong> from last session. Personally I don&rsquo;t use any <code>Bluetooth</code> input devices. I&rsquo;d like to have it <strong>OFF</strong> so that it doesn&rsquo;t waste battery.</p>

<!--more-->


<p><em>Be warned: This tutorial may only applies to System 76 Gazelle pro running Ubuntu 13.04 64-bit. There is also a risk that your Ubuntu splash screen will behave a little differently after applying the change.</em></p>

<p>There is a good <a href="http://catlingmindswipe.blogspot.com/2012/05/how-to-disable-bluetooth-on-startup.html">post</a> for fixing the problem. But in case of <code>System 76 Gazelle pro</code> running <code>Ubuntu 13.04 64-bit</code>, you only need to apply the following steps. (I guess it is due to more customized driver?)</p>

<p><strong>1</strong>. It is recommended that you back up your config file first.
<code>
$ sudo cp /etc/bluetooth/main.conf /etc/bluetooth/main.conf.bak
</code></p>

<p><strong>2</strong>. Open up the config file in a text editor
<code>
$ sudo gedit /etc/bluetooth/main.conf
</code></p>

<p><strong>3</strong>. Change <code>InitiallyPowered = true</code> to <code>InitiallyPowered = false</code>.</p>

<p>And you are done! Reboot your machine and see the result yourself.</p>

<h1>Update</h1>

<p>If you set <code>Ubuntu</code> to login automatically like I did. Then you might be prompt for login keyring after rebooting. To get rid of the keyring dialog you need to do the <a href="http://askubuntu.com/questions/867/how-can-i-stop-being-prompted-to-unlock-the-default-keyring-on-boot">following</a>.</p>

<p><strong>1</strong>. Launch <code>Passwords and Keys</code> through Utility Launcher.</p>

<p><img src="/images/keyrings.jpeg" width="260" height="260" title="1" ></p>

<p><strong>2</strong>. Go to <code>View</code>&ndash;><code>By keyring</code>. You should see the following window.</p>

<p><img src="/images/pass&amp;keyringWindow.png" width="450" height="577" title="1" ></p>

<p><strong>3</strong>. Right click <code>Login</code>, choose <code>Change Password</code>. Type in your old password, then leave new password as empty.</p>

<p>That&rsquo;s it. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress教程大合集]]></title>
    <link href="http://Fatman13.github.io/blog/2013/06/24/shi-yong-octopressjiao-cheng-da-he-ji/"/>
    <updated>2013-06-24T12:11:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/06/24/shi-yong-octopressjiao-cheng-da-he-ji</id>
    <content type="html"><![CDATA[<p>小的消息闭塞，最近才开始使用<code>Octopress</code>。在这儿整理下各种实用的教程，以供大家参考！</p>

<!--more-->


<p><strong>1</strong> 首先是官方<code>Octopress</code>教程在<a href="http://octopress.org/docs/">这里</a>。</p>

<p><strong>2</strong> 使用自定义域名在<a href="http://learnaholic.me/2012/10/10/deploying-octopress-to-github-pages-and-setting-custom-subdomain-cname/">这里</a>。</p>

<p><strong>3</strong> 使用<code>Octopress</code>各种皮肤在<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">这里</a>。</p>

<p><strong>4</strong> 使用<code>greyshade</code>皮肤加上新浪微博在<a href="http://imallen.com/blog/2013/05/12/add-support-for-weibo-and-dribbble-to-greyshade.html">这里</a>。</p>

<p><em>如果你先装<code>greyshade</code>再装这个的话，代码会有点小错，<code>source/_includes/header.html</code>里面的以下这句注释掉。否则在右边会出现2遍博客名和简介。</em>
<code>
% include custom/header.html %
</code>
<em>在<code>_config.yml</code>里面设置<code>weibo_user:</code>的时候，别忘了在微薄里面设置好自己在微薄上的域名。否则会发生找不到id的情况。</em></p>

<p><strong>5</strong> <code>Octopress</code>中的表格没有边框？！请看<a href="http://programus.github.io/blog/2012/03/07/add-table-data-css-for-octopress/">这里</a>。</p>

<p><strong>6</strong> 在不同电脑上用<code>Octopress</code>写博客。请看<a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">这里</a>。</p>

<p><strong>7</strong> 如果你有很多博文，如何只生成最新写的那篇。参看<a href="http://robdodson.me/blog/2012/06/11/some-octopress-rake-tips/">这里</a>。</p>

<p><strong>8</strong> 如何删除一片博文在<a href="http://stackoverflow.com/questions/16762325/how-to-rename-or-delete-a-new-octopress-post">这里</a>。</p>

<p><strong>9</strong> 如何在<code>Octopress</code>里面增加自己的<code>About</code>页面在<a href="http://gangmax.me/blog/2012/05/04/add-about-page-in-octopress/">这里</a>。</p>

<p><strong>10</strong> 使用<code>rake gen_deploy</code>和<code>rake preview</code>之后可以在本地<code>localhost:4000</code>预览还没有上传的博文。修改博文后，<code>rake</code>会自动重新生成，刷新本地页面就能浏览更新的东西了。</p>

<p><strong>11</strong> Octopress各种实用小技巧，包括修改字体，颜色，favicon等等。请看<a href="http://colors4.us/blog/2012/01/08/octopressbo-ke-cong-ling-kai-shi-iii/">这里</a></p>

<p>最后奉上能快速上手markdown的<a href="http://support.mashery.com/docs/customizing_your_portal/Markdown_Cheat_Sheet">作弊小抄</a>。这里有更高阶的<a href="http://daringfireball.net/projects/markdown/syntax">作弊小抄</a></p>

<p>先写这点，以后有好de发现继续更新。:&ndash;)</p>
]]></content>
  </entry>
  
</feed>
