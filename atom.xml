<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fatman13]]></title>
  <link href="http://Fatman13.github.io/atom.xml" rel="self"/>
  <link href="http://Fatman13.github.io/"/>
  <updated>2015-07-18T13:12:36+08:00</updated>
  <id>http://Fatman13.github.io/</id>
  <author>
    <name><![CDATA[Fatman13]]></name>
    <email><![CDATA[tctctcly@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使用Outlook链接Zimbra邮箱]]></title>
    <link href="http://Fatman13.github.io/blog/2015/07/18/ru-he-shi-yong-outlooklian-jie-zimbrayou-xiang/"/>
    <updated>2015-07-18T13:10:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2015/07/18/ru-he-shi-yong-outlooklian-jie-zimbrayou-xiang</id>
    <content type="html"><![CDATA[<p>本文简单介绍如何使用<code>Outlook</code>客户端连接<code>Zimbra</code>邮箱系统。原文在<a href="http://www.upenn.edu/computing/email/help/zimbra/outlook/outlook_config.html">这里</a>。OP还是比较推荐使用<code>Zimbra</code>的<code>Web</code>客户端。</p>

<!--more-->


<h1>连接Outlook步骤</h1>

<p>1 <code>工具</code> &ndash;> <code>账户设置</code></p>

<p><img src="http://i.imgur.com/Ez7Tcje.jpg" alt="" /></p>

<p>2 点击<code>新建</code>。</p>

<p><img src="http://i.imgur.com/XySXE0u.jpg" alt="" /></p>

<p>3 点击<code>下一步</code>。（Microsoft Exchange，POP3，IMAP或HTTP）</p>

<p><img src="http://i.imgur.com/Np7kAk1.jpg" alt="" /></p>

<p>4 勾选<code>手动配置服务器设置或其他服务器类型</code>。</p>

<p><img src="http://i.imgur.com/87QVOQd.jpg" alt="" /></p>

<p>5 点击<code>下一步</code>。（Internet电子邮件）</p>

<p><img src="http://i.imgur.com/wIkOsur.jpg" alt="" /></p>

<p>6 您的姓名：你的姓名，电子邮件地址：xyz@shtowercbre.com，账户类型：POP3，接受邮件服务器：mail.shtowercbre.com，发送邮件服务器：mail.shtowercbre.com，用户名：你的用户名，登陆密码：你的登陆密码。</p>

<p><img src="http://i.imgur.com/Bdtb1nn.jpg" alt="" /></p>

<p>7 点击<code>其他设置</code> &ndash;> <code>发送服务器</code> &ndash;> 勾选<code>我的发送服务器需要验证</code>。</p>

<p><img src="http://i.imgur.com/Umk1IjM.jpg" alt="" /></p>

<p>8 还是在<code>其他设置</code> &ndash;> <code>高级</code> &ndash;> 勾选<code>此服务器要求加密连接（SSL）</code>，发送服务器：25,使用以下加密连接类型：TLS。</p>

<p><img src="http://i.imgur.com/HLvkF7y.jpg" alt="" /></p>

<p>8.5 如果需要在服务器上保存邮件副本的话，需更改<code>Outlook</code>默认设置。在上文第7步中，<code>其他设置</code> &ndash;> <code>高级</code> &ndash;> 勾选<code>在服务器上保留邮件副本</code>。</p>

<p><img src="http://i.imgur.com/aA284uj.jpg" alt="" /></p>

<p>9 点击<code>确定</code>，点击<code>测试账户设置</code>。</p>

<p><img src="http://i.imgur.com/8BANwip.jpg" alt="" /></p>

<h1>日常维护小技巧</h1>

<ol>
<li>添加完新成员后，新邮件填写收件人时，没有自动补完新成员名字？<code>配置</code>&ndash;><code>域名</code>&ndash;>双击右边的域名-><code>GAL</code>&ndash;><code>内部GAL轮询间隔时间</code>改为1分钟或者更低。稍等片刻后，新成员的名字应该就可以自动补完了。</li>
<li>如何添加会议室？<code>管理</code>&ndash;><code>资源</code>&ndash;>点击右上角齿轮图标-><code>新建</code>。（注意：添加完成后需要GAL更新后才会在用户的新约会中生效）</li>
<li>使用多个身份发送邮件？<code>管理</code>&ndash;>选择用户->给该用户添加<code>别名</code>。（注意：添加完成后需要GAL更新后别名才会生效）登录该用户账号，<code>首选项</code>&ndash;><code>账户</code>&ndash;><code>添加身份</code>&ndash;>填入<code>帐户名称</code>&ndash;>填入<code>发件人：选择邮件发件栏中显示名称</code>&ndash;>下拉菜单中选择新添加的别名->点击左上角<code>保存</code>。这样该用户在写新邮件时就可以选择使用不同身份发送了。</li>
</ol>


<h1>附 1</h1>

<p>之前公司网络神秘得把TLS加密给屏蔽了。后来经过多方排查，原来是公司网络行为管理服务器，华为ASG2200，中的<code>病毒过滤</code>功能启用后，把TLS过滤掉了。直接禁用<code>病毒过滤</code>后，问题解决。</p>

<h1>附 2</h1>

<p><code>Zimbra</code>管理员操作<a href="https://www.zimbra.com/docs/os/8.6.0/administration_guide/wwhelp/wwhimpl/js/html/wwhelp.htm#href=860_admin_os.Zimbra_Collaboration.html">手册</a>。
<code>Zimbra</code>安装<a href="https://www.zimbra.com/docs/ne/8.6.0/single_server_install/wwhelp/wwhimpl/js/html/wwhelp.htm#href=860_SingleServer_Install_NE.Performing_a_Single_Server_Installation.html">手册</a>。</p>

<h1>附 3</h1>

<p>华为的一些免费网络<a href="http://support.huawei.com/learning/nodeQueryAction!loadTrainProjectInfo?lang=zh&amp;pbiPath=&amp;courseId=Node1000007759">课程</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDoS引发的阅读和感想]]></title>
    <link href="http://Fatman13.github.io/blog/2015/04/03/ddosyin-fa-de-yue-du-he-gan-xiang/"/>
    <updated>2015-04-03T19:55:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2015/04/03/ddosyin-fa-de-yue-du-he-gan-xiang</id>
    <content type="html"><![CDATA[<p>又好久没有更新博客了。最近朋友<code>S</code>在微信群里问<code>DDos</code>是啥。一半比较好奇<code>S</code>为啥突然询问<code>DDos</code>，一半巩固一下相关互联网常识。我谷歌了<code>DDos</code>，看到谷歌新闻卡片中，<code>Github</code>遭受<code>DDos</code>攻击的新闻。我想，哦哦哦哦，原来<code>S</code>同志是看到了这个新闻了。<a href="http://www.netresec.com/?month=2015-03&amp;page=blog&amp;post=china%27s-man-on-the-side-attack-on-github">这里</a>有该事件的一些<code>技术</code>分析？</p>

<!--more-->


<h1>题外话</h1>

<p>根据我阅读<a href="https://news.ycombinator.com/">HN</a>很多评论的经验来看，大多数意见相左的评论，讨论到最后还是互相不认可对方的观点的。原因无外乎下面这句老话。。。</p>

<blockquote><p>We believe what we want to believe. It is all we ever do.<br/>
&ndash; flemeth 《<a href="http://en.wikipedia.org/wiki/Dragon_Age:_Origins">Dragon Age</a>》</p></blockquote>

<h1>阅读</h1>

<p>好了，回到原来的新闻事件。出于对该次事件一部分舆论反应的好奇，我在<a href="https://news.ycombinator.com/">HN</a>上搜到相关新闻的<a href="https://news.ycombinator.com/item?id=9293849">帖子</a>。该帖有300多条评论。总体来说，大多数评论<code>反革命</code>情绪比较严重。比如说下面这条评论。</p>

<blockquote><p>&hellip;<br/>
China and Russia are both (quite unique) examples of countries with an unfathomable degree of control over their citizens. It can be hard to grasp occasionally, coming from a western mindset but for the vast majority within said countries, the entire reality they see and what they believe to be true is heavily distorted&mdash;in that, it is defined by the vision of the oligarchy and information is carefully controlled to produce a desired set of beliefs. North Korea is an extreme caricature of this pattern.<br/>
&hellip;<br/>
&ndash; j42</p></blockquote>

<p>不过比较让人欣慰的是，可以看到有人马上回复道。</p>

<blockquote><p>The difference between the U.S. and China/Russia is that the people in China/Russia know the media is controlled by the powers that be.
Here, our press is also &ldquo;defined by the vision of the oligarchy and information is carefully controlled to produce a desired set of beliefs.&rdquo; We just believe that it&rsquo;s free.
See: <a href="http://en.wikipedia.org/wiki/Manufacturing_Consent">http://en.wikipedia.org/wiki/Manufacturing_Consent</a><br/>
&ndash; abalone</p></blockquote>

<p>然后？然后有人看到上面那条评论就开喷了。</p>

<blockquote><p>It is rather stupid to equate the degree of media manipulation in the West vs. China and Russia.<br/>
 &ndash; obstinate</p></blockquote>

<p>于是，有位有识之士对上面那条评论进行了回复。</p>

<blockquote><p>You are right. The degree and sophistication of media manipulation is profoundly greater in the west. While the Chinese block a lot of media, the manipulation is minimal. Most Chinese are very cynical and know exactly what is going on. The west, or at least the US, traps people in a matrix of sorts where they don&rsquo;t even see the manipulation. The narrative is exquisitely framed and guided to leave people with a sense of moral superiority and basic faith in the system despite perceived flaws, as is ironically exhibited by your comment.
edit: some good resources on the history and nature of western media manipulation are the BBC documentary &ldquo;The Century of Self&rdquo; and Noam Chomsky&rsquo;s book &ldquo;Manufacturing Consent&rdquo;.<br/>
&ndash; colordrops</p></blockquote>

<p>继续往下拉，看到一条有趣的评论，还去<code>Github</code>挖了一下一个很久之前的<a href="https://github.com/greatfire/wiki/issues/1">issue</a>。</p>

<blockquote><p>Most people might not know what kind of organization GreatFire really is because too much context is missing. I only discovered recently it&rsquo;s not so simple. There have been a lot of talks about the behavior of GreatFire for quite for a while but most of the talks are in Chinese. There are some in English though, to give everybody a glimpse here is an example: <a href="https://github.com/greatfire/wiki/issues/1">https://github.com/greatfire/wiki/issues/1</a>
I have an impression is GreatFire tried to weaponize all the users of github. They succeeded.
I don&rsquo;t like the GFW either. But I think I&rsquo;m very likely to be downvoted because the context of this incident is quite complicated. It&rsquo;s not easy to tell the truth especially when it&rsquo;s against most people&rsquo;s belief.<br/>
&ndash; jjcc</p></blockquote>

<h1>感想</h1>

<p>由此，我忽然想到另外一个中策。就是在<code>Github</code>上建立小号，并且上传维鸡jie密或者shi诺d的文件。这样<code>Github</code>也有台阶下，不用被套上限制自由的骂名。<code>Github</code>可借机更新<code>ToU</code>，关闭一些政z敏感账号。</p>

<h1>附录</h1>

<p>在读帖子的时候，还看到有趣的2个人的评论。先是一个叫<code>gbog</code>的人写到。</p>

<blockquote><p>You obviously haven&rsquo;t been there. I think Chinese gov have the same level of control over its citizens as France: very erratic, sometime works well, some people try to play with fire, but overall the Chinese are all but lobotomized robots in the hands of a few puppet masters. There&rsquo;s over 500 strikes a year in China, not counting all the ones not big enough to be counted. I have seen streets of pedestrians walking against policemen, who were sweating of fear. Right now the prez is quite appreciated and trusted by the people, so he probably has some level of control, but this is earned by its fight against corruption, and not by some matrix-like brainwashing system.</p></blockquote>

<p>然后一个叫<code>westiseast</code>的人回复道。</p>

<blockquote><p>I have been there ;)
You&rsquo;re misinterpreting the nature of control. Yes, there are protests, mostly because the government lets them happen. It helps people let off steam, it gives the government an indication of how people feel, and quite often there are conflicting interests which the Party can rise above (remember, government and the Party are not the same thing). So, often it&rsquo;s a bunch of workers protesting against a company, or a corrupt local official in one department &ndash; the Party can let that happen, and choose sides later when they&rsquo;ve decided which way the wind is blowing. Policemen are shitting themselves because the Party mostly sides with the security apparatus but today they might let the protest get a bit wild if they want to allow the protesters a bit of leeway, and then those untrained, poorly equipped policemen will be screwed.
When stuff he Party doesn&rsquo;t like happens, they shut it down using methods you (on the whole) cannot do in France, the UK, and the U.S. Try introducing political censorship of material critical to Hollande. Try censoring books and courses in university. Try locking up journalists and writers (on tax evasion charges of course) when they say stuff you disagree with. Try rolling out the tanks when a protest gets out of hand. Etc.
So don&rsquo;t be fooled by the seemingly light hand of the gov &ndash; they&rsquo;ve intentionally backed off from the Cultural Recolution level of control because they know that most people don&rsquo;t give a damn, and if left alone they will do nothing. How about an experiment &ndash; I&rsquo;ll hold up an anti government sign in front of the French parliament, and you do the same in Tiananmen Square and we&rsquo;ll see how much control the Chinese gov has ;)</p></blockquote>

<p><code>gbog</code>继续回复道。</p>

<blockquote><p>You&rsquo;re misinterpreting the nature of control.
I don&rsquo;t think so. I am just taking the other angle, from the people&rsquo;s perspective, and want to debunk the cliche that Chinese people are easy to control. They&rsquo;ve had much more revolutions than any other country in their long history. They&rsquo;re all but easy to control. In French we say &ldquo;like boiling milk&rdquo;, which means they can easily and suddenly get out of control and wash out anything on their way. Just blocking a few topics on social network is certainly not enough. As for things that are allowed or forbidden, it seems more cultural than anything else: In China direct verbal confrontation is very rare, while it is very common in the West, and this holds in families, in companies and also at the country&rsquo;s level. Not very surprisingly, in France insulting the head of state is not forbidden, and even something like a national entertainment. However, in France we have laws telling people if they are allowed to work on Sundays, which seems extremely weird and borderline &ldquo;totalitarian&rdquo; to the Chinese, which believe people should be allowed to work whenever they need to or want to.
Also, when talking about China, it needs to be reminded that in fact the core Western values (i.e. Enlightment values) and the core Chinese values (i.e. Confucean values) are very similar, and quite compatible. (See how fast Chinese immigrants adapt to and adopt Western values.) For instance, secularism and religious tolerance, equality of rights and before the law, meritocracy, etc.
I think the world is going very badly these days, and a big chunk of it is in the hands of people whose values are really opposed to the core of modern humanist values, and this chunk is not China. We&rsquo;d better team up and fight (with ideas, not with guns) what really threatens humanity as a whole. Just my thoughts.</p></blockquote>

<p>这个时候有趣的事情发生了，这个<code>westiseast</code>回复道。</p>

<blockquote><p>Hey, I didn&rsquo;t see it was you! Still at Douban?
I know what you mean in terms of &ldquo;boiling milk&rdquo; &ndash; in that respect I agree. I keep thinking these days of that old saying of China as a sleeping elephant; instead I think the people are the sleeping elephant. I think the government&rsquo;s strategy relies a lot on ignorance and apathy, but if even half of these stories we read as standard on NYTimes etc made it into the public consciousness, there would be huge issues.
About the laws &ndash; I guess it&rsquo;s not the actual content of the laws or relatively different values that illustrates control. Eg in your example about working on Sunday&rsquo;s &ndash; if you decided to fight one of those laws, you could do it openly and publicly and in principle it would be a fair fight. You might even embarrass the government or a political leader, but here there&rsquo;s so little chance of that &ndash; that&rsquo;s the different nature of the Communist Party control. The government/party has taken away avenues to legitimately discuss/debate/fight, so the options are either total apathy or explosive revolution. That&rsquo;s scary!</p></blockquote>

<p>这位<code>gbog</code>先生原来在豆瓣上班。。。。。。这是他的<a href="https://github.com/guibog">github</a>和<a href="https://twitter.com/guibog">twitter</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[宗教视频？]]></title>
    <link href="http://Fatman13.github.io/blog/2015/01/05/zong-jiao-shi-pin-%3F/"/>
    <updated>2015-01-05T17:11:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2015/01/05/zong-jiao-shi-pin-?</id>
    <content type="html"><![CDATA[<p>好久没写博客。最近上海新闻综合频道看到关于圣诞节某教堂人满为患，为预防消防隐患，巡查沐恩堂的新闻。镜头里面很多人坐在教堂里面，外面好像还有人排队。联想到好像周围也有些人入了教。。。凑巧看到某tube上的一个视频，感觉不错。做个笔记。</p>

<!--more-->


<h1>视频</h1>

<iframe width="560" height="315" src="http://Fatman13.github.io//www.youtube.com/embed/sXOdn6vLCuU" frameborder="0" allowfullscreen></iframe>


<p>视频无法显示？搜一下<code>Don't hug me I am scared 3</code>，注意是3，应该有人搬运。</p>

<h1>摘录</h1>

<p>引用该视频下，一位用户的评论。（个人感觉写得挺好）</p>

<blockquote><p>Let&rsquo;s see if I can offer an analysis of my own.</p>

<p>&mdash;&ndash; Overall &mdash;&ndash;</p>

<p>It is obvious to anyone who&rsquo;s watched the full thing that this video is about the corrupting influence of religious values and the idea of &lsquo;absolute truth&rsquo; to society, especially children or the weak-minded. Now to the more specific stuff:</p>

<p>&mdash;&ndash; Specific moments and potential meaning &mdash;&ndash;</p>

<p>0:30 This moment shows the bird killing the butterfly (or &lsquo;pesky bee&rsquo;, as he puts it), which upsets the yellow one. This shows that sometimes, people do things that will upset or scare others, because, well, people differ in moral values. However, the yellow one feels it is wrong to the point where he is disillusioned, making him easy prey for the religious.</p>

<p>0:44 Here we see a priest or preacher-like figure (the butterfly/pesky bee/little baby pigeon) using a common religious tactic: asserting that the entire world is evil to make their own order seem like the good guys. They set the world up to be a horrible place full of hatred, and present their religion as a refuge from that. Such religious strategies are most effective on those easily swayed by smooth talk and misanthropes/the disillusioned and cynical. In this case, the yellow one is a combination of the naive and the disillusioned.</p>

<p>0:54 Here the priest goes on to say his religion has all the answers. He does not need to present facts, as a naive person will take his assertions at face value. Opening with the rhetorical question of &lsquo;have you ever wondered why we&rsquo;re here?&rsquo; he goes ahead and answers his own question, forcing his own ideas of life and purpose onto the naive recipient of his &lsquo;gospel&rsquo;.</p>

<p>1:17 Here we have the priest offering comfort (in the form of offering to hold his hand), however, when the yellow one reaches out to hold said hand, the priest ignores his request for comfort. This shows the priests true feelings for his flock&rsquo;s feelings- apathy, merely people to lead along with promises of comfort.</p>

<p>1:47 Here the priest does another common tactic to ensure loyal followers- implicitly lowering your self-worth by stating (without proof) the world&rsquo;s opinions of you, claiming everyone hates you. It can also be seen as a priest breaking self-esteem by claiming that you, as a mere human, are nothing compared to God and that God should be (as in the Christian faith) torturing you as well as everyone else forever, and only lets some of us not out of his &lsquo;love&rsquo; and &lsquo;kindness.</p>

<p>2:00 Here, the priest offsets real-life needs (like hunger in this case) for imaginary, constructed &lsquo;needs&rsquo;, like sin and &lsquo;spiritual illness&rsquo; of similar sorts. He establishes this by calling him lonely, in this case, and later as is shown, the naive believer-to-be genuinely comes to believe that they are &lsquo;spiritually ill&rsquo;, cementing their faith through low self-esteem yet again.</p>

<p>2:05 Here, the proselyte begins to ask questions of his own, however, the priest brushes off the questions due to them not being his own rhetorical ones that will lead into more convincing spiel. Hence he just says that all his questions will be answered soon.</p>

<p>2:08 His friends are naturally the congregation. Congregations are a necessary structure of religion, as it makes the religion more of a community thing, and ensures conformity to the religion, as if one decides to leave, they will be invariably shunned by the community.</p>

<p>2:13 Here is a mostly comical interlude, but it does show that when people join a religion that could have deleterious effects, a lot of people, assuming religion is harmless, decide not to lift a finger to stop people falling into insane piety.</p>

<p>2:32 The insistence that all the congregation loves the proselyte by the priest is another part of his &lsquo;refuge&rsquo; spiel. If they all appear to be friendly from the offset, it allows the proselyte to settle in and become dependent on the community later on, despite its rotten core.</p>

<p>2:42 This &lsquo;furry boy&rsquo; is a representative of the more perverse members of religious organisations, the ones that exploit the overly trusting nature of religious congregations for sexual purposes.</p>

<p>2:44 Once again, mostly a comedic aside, but it highlights the sheer apathy people have regarding the deleterious effects of religion on society.</p>

<p>3:02 The rabbit speaks in a simpleton&rsquo;s voice and is overly physically friendly. He is likely representative of the genuinely kind, good-hearted (yet socially awkward due to religious conditioning) and overall true believers. Unlike the perverse member, who exploits, this one genuinely hangs on to everything the priest says, and as his later words following the Story of Michael show, he is willing to come up with positive interpretations of any and every &lsquo;religious text&rsquo; of his religion.</p>

<p>3:10 Here the yellow one begins to get carried away and interprets the faith his own way. This is where the priest steps in and corrects him to ensure conformity, as all priests by trade kinda have to do.</p>

<p>3:12 The idea of &lsquo;your special one&rsquo; is not criticised as a criticism of religion, however it is a criticism of imposing the ideas of absolute truth onto things. The idea of there being a special one for all is dubious to say the least, others would say there are many compatible people for many others, etc, etc, however, the priest states it as an absolute truth, and the proselyte, being simple-minded, believes him.</p>

<p>3:20 Here we have the proselyte bemoaning his &lsquo;spiritual sickness&rsquo; that he only began realising once the priest fabricated it. This is to show the influence priests have over the weak-willed. The priest then has the gall to say that yes, he is sick, and that he&rsquo;s confused and stupid, and that he should just let him, the priest, do the thinking for him</p>

<p>3:28 The Story of Michael is analagous to, say, Biblical stories that are meant to illustrate a point, like, say, the love of God, but never actually do, just as the Story of Michael never gets onto Michael finding his special one or being loved. A perfect example would be the Book of Job, wherein God allows an innocent, God-fearing man become the plaything of Satan for, as he puts it, no reason. Satan proceeds to kill his children, servants, and gives Job sores. Job keeps loyal to God for an admirable time before finally God ends the bet and Job rightfully asks why, wondering if he&rsquo;s just. God proceeds to say he&rsquo;s so powerful that he&rsquo;s above good and evil, and Job sarcastically notes he has nothing to say to that. However, both priests and enthusiastic believers (like the aforementioned rabbit) cite the book of Job as a sign of Job&rsquo;s loyalty to God (though he in fact became bitter) and God&rsquo;s love for Job (because apparently replacing Job&rsquo;s children and servants apparently undoes the loss of his first beloved children and all the deaths of the tangentially related servants).</p>

<p>3:56 Here the priest once again states the proselytes desires for him, giving him needs where he didn&rsquo;t have any before.</p>

<p>4:01 The idea of being patient and hoping that the promises of the faith be delivered is the crux of holding believers. Paying believers in promises is how priests keep controlling people without repercussions. Heaven will eventually come. Armageddon will eventually come, if you happen to be the death cult-level sects like Jehovah&rsquo;s Witnesses, Jihad, the coming of Kalki, etc etc. All of these are unfulfilled promises religions make to either hold their followers in wait for their reward, or keeps them paralysed in fear of genocide/retribution.</p>

<p>4:05 Here&rsquo;s the more Judeo-Christian specific areas- &lsquo;he&rsquo;s made for her and she&rsquo;s made for him&rsquo; is the very basis of homophobic attitudes enforced by religion. Saying &lsquo;that&rsquo;s the way it&rsquo;s always been&rsquo;, as well as protecting the sanctity of marriage and no divorce being allowed are all alluded to in this segment, and are all criticising the assertions by the religious that straight marriage is the only acceptable form of romantic love.</p>

<p>4:21 Here is where the final piece of the religious puzzle comes in. So far, the ideas of asserting absolute truths, breaking self esteem to ensure compliance and dependency, and exploiting the naive and disillusioned could all be said of a secular cult of some sort too. However, religion is special in that it also (quite randomly) shoehorns in a supernatural deity, often one which all good sprouts from, but yet can also be angry. Gravel feeding is representative of blood sacrifice, mass, ramadan, any other sort of ritualistic behaviour which the religious demand in order to appease their God.</p>

<p>4:39 Here is a criticism of another tactic used by priests, related to the poisoning of the prospective proselyte&rsquo;s worldview- in addition to convincing the person that the world cannot be trusted and is evil (as opposed to their cult, which can be, according to them), they also tell them to forget the world, essentially, rejecting true reality for the cult&rsquo;s twisted version. Here they refer to it as &lsquo;changing your name&rsquo; (likely a reference to biblical name changes representing covenants with God, like Abram to Abraham and Jacob to Israel) and &lsquo;cleaning your brain&rsquo; (a reference to rejecting reality that conflicts with your faith).</p>

<p>4:52 Here the final initiation concludes, and the promise of never being alone acts as a two-edged sword- yes, in a religious community, you&rsquo;ll never be alone, but you can never escape it either, never be free from its judging eyes.</p>

<p>5:08 Here, in a surprising bit of heartwarming material, the duck shows that (in a way) the world the religious describe as twisted and evil actually DOES care about a person if you let it. Shame it ends on a jump scare.</p>

<p>Anyway, that&rsquo;s my take on this. I&rsquo;d like to see what people think!﻿</p></blockquote>

<p><em>注：最近这条评论被删除了也不知道怎么了，好像找不到了。。。</em></p>

<h1>附录</h1>

<blockquote><p>The role played by time at the beginning of the universe is, I believe, the final key to removing the need for a Grand Designer, and revealing how the universe created itself. … Time itself must come to a stop. You can’t get to a time before the big bang, because there was no time before the big bang. We have finally found something that does not have a cause because there was no time for a cause to exist in. For me this means there is no possibility of a creator because there is no time for a creator to have existed. Since time itself began at the moment of the Big Bang, it was an event that could not have been caused or created by anyone or anything. … So when people ask me if a god created the universe, I tell them the question itself makes no sense. Time didn’t exist before the Big Bang, so there is no time for God to make the universe in. It’s like asking for directions to the edge of the Earth. The Earth is a sphere. It does not have an edge, so looking for it is a futile exercise.<br/>
&mdash; <a href="https://www.goodreads.com/author/quotes/1401.Stephen_Hawking">Stephen Hawking</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[（译）不工作艺术]]></title>
    <link href="http://Fatman13.github.io/blog/2014/11/10/%28yi-%29bu-gong-zuo-yi-zhu/"/>
    <updated>2014-11-10T19:49:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/11/10/(yi-)bu-gong-zuo-yi-zhu</id>
    <content type="html"><![CDATA[<p>This is Chinese translation of the original post <a href="http://www.theatlantic.com/business/archive/2014/11/the-art-of-not-working-at-work/382121/?single_page=true">here</a> by fatman13.</p>

<p>本文是<a href="http://www.theatlantic.com/business/archive/2014/11/the-art-of-not-working-at-work/382121/?single_page=true">原文</a>的中文翻译。</p>

<!--more-->


<p>两年前，一名德国<code>Menden</code>镇的公务员在退休的那一天给同事们的道别信中写道，他在十四年中几乎没有干过任何事情。他写道，“从1998年开始，我在这儿，但却没有正真在这儿。所以我要为退休做周全的准备。Adieu，拜拜”。这封道别电子邮件被德国<code>Westfalen</code>报纸<a href="http://www.telegraph.co.uk/news/worldnews/europe/germany/9200054/German-civil-servant-says-he-did-nothing-for-14-years.html">曝光</a>，并迅速为全世界所知。国家机关职业道德受到重创，<code>Menden</code>镇长在几天后表示对该事件歉意，并称“感受到了公众的愤怒。”</p>

<p><code>Menden</code>镇政府召开新闻发布会，对该名雇员没有向领导报告他的无所事事感到遗憾。一个月之后，在一个曝光度不是很高的<code>Bild</code>报<a href="http://www.bild.de/regional/ruhrgebiet/beamter/fauler-verwaltungsangestellter-14-jahre-nichts-getan-745-000-kassiert-23588774.bild.html">采访</a>中，这位前公务员回应称，他的电子邮件被断章取义了。他14年中没有试图逃避工作；在他部门发展的同时，他的工作被分配给了其他人。他说，“我从来没有感到受挫，即使是今天我也会写一样的电子邮件。我一直提供我的劳动，但是他们不用就不是我的问题了。”</p>

<p>这个德国政府机关的故事引发了一些关于工作偷懒的问题。有一份工作就意味着有事情做吗？如果答案是否定的，那一份工作是如何，为什么失去了他实质的工作内容呢？有什么不让员工偷懒的方法？抑或是，在现有体制下，这是一个正确合理的问题吗？再跟40个超级懒人谈话后，我想我能道出一些答案。</p>

<p>很多社会学家赞成在工作中偷懒只是极少数人，极少，少到可以被忽略。很多<a href="http://digitalcommons.ilr.cornell.edu/cgi/viewcontent.cgi?article=2595&amp;context=ilrreview">统计</a>都指向了越来越强的工作强度，加班加点，各种压力大。但是也有一些<a href="http://org.sagepub.com/content/early/2013/12/24/1350508413515541.abstract">调查</a>指出工作时间中平均1到3个小时会被花在私人的事情上。通过对某些网站访问流量的监测，<a href="http://www.sciencedirect.com/science/article/pii/S0010880401800562">据查</a>，在2000年后，美国色情网站70%的访问流量和全美60%的网上购物都发生在周中的9点到5点之间。工作时上网偷懒不止在美国有，新加坡，德国，芬兰也有。（大部分工作时间调查来自美国）</p>

<p>即使那些自称一直工作很忙的上班族的人数在增加，但是绝大多数人并没有受到影响。实际上，那些说自己工作不忙的人要比说忙的人<a href="http://www.sciencedirect.com/science/article/pii/S0927537101000276">多得多</a>。关于工作压力大的文章书籍可能有成千上万，但是为什么与之对应的另一个极端却没有那么多文章呢？</p>

<p>懒人们自己已经写了一些关于这个话题的书籍。在“你好懒人”这本书中，法国作者<code>Corinne Maier</code>给出了她的解释。<code>Maier</code>打开了<a href="http://corinnemaier.blogspot.se/2011/07/edf-encules-de-france.html">最终让他丢掉她工作的书</a>，声称社会学没能诠释办公室机理：“上百万人都在工作，但是消息并不透明。这是因为谈论这些问题的大多数都是大学教授——他们本身并没有参加工作；他们根本不懂。”<code>Maier</code>曾在法国电力公司做过好几年的领导，他得出结论，工作越来越变成假装在办公室，“形象大于产品，诱惑大于效益。”</p>

<p>在这些情况下，假装服从和假装承担变成了工作的重要的一部分，以至于任何有异于以上的假装行为都会被视为令人难堪的举动。<code>Maier</code>回忆道：“一天，在一个关于工作积极性的会议上，我大胆地说我来上班只是为了混口饭吃。在15秒的沉默以后，每个人都好像有点别扭。即使法语中工作<code>travail</code>一词源于一种刑具，在任何情况下，你都要迫切地让别人知道你正在工作，因为你对你的工作很感兴趣。”</p>

<p>形象和本质的差距也是漫画<code>Dilbert</code>中一个老声长谈的主题了。<code>Dilbert</code>漫画作者<code>Scott Adams</code>从他以前的工作中获得创作灵感。一次又一次，<code>Adams</code>质疑工作的合理性，以及工作和效率的关系：“工作可以被定义为‘所有你不高兴做的事情’，效率就是另外一回事儿了。”</p>

<p>在<code>Dilbert collection This Is the Part Where You Pretend to Add Value</code>一书的前言中，<code>Adams</code>公开的表示了他在<code>Crocker National Bank</code>和<code>Pacific Bell</code>的16年工作映象。</p>

<blockquote><p>“If I had to describe my 16 years of corporate work with one phrase, it would be ‘pretending to add value.’ … The key to career advancement is appearing valuable despite all hard evidence to the contrary. … If you add any actual value to your company today, your career is probably not moving in the right direction. Real work is for people at the bottom who plan to stay there.”</p>

<p>“如果我一定要用一句话形容我我16年工作的话，那应该是‘假装给公司增加价值’。升职加薪关键在于看上去很有价值，无论有多少铁证说明你没有价值。如果你现在正在为公司增加正真的价值，你的职业道路可能已经走歪了。正真的工作是给那些底层并计划一直呆在底层的人的。”</p></blockquote>

<p>其他上班族们也有类似的情况。在<code>Living Dead</code>一书中，<code>David Bolchover</code>称“形象大于实际，忽悠大于清楚，勾心斗角大于工作业绩，是当下主流。”在<code>City Slackers</code>一书中，<code>Steve McKevitt</code>，一个幻想皮灭的“商务交流专家”，沮丧的写道：“在当前包装就是一切的社会中，你做什么已经不重要了，重要的是你看上去在做什么。”</p>

<p>假装，掩饰，失去意义，行话，勾心斗角，办公室政治，危机，乏味，绝望，这些都是上班族生活经常出现的要素。以上种种经常出现在主流文化中的风险是让我们开始把这些问题当成比喻和夸张。但是如果我们更认真地思考这些“不重要的”工作问题又会是怎能样呢？</p>

<p>在<code>David Foster Wallace</code>的小说<code>The Pale King</code>中，一个美国税务局的职员死在了他的办公桌上，直到数天后才被发现他已经死了。这个故事可以被解读为工作吸收了个人很多精力，导致没有人注意到你是死是活。但是，这样的事不仅仅发生在小说中。2004年，一个<a href="http://news.bbc.co.uk/2/hi/europe/3410547.stm">芬兰税务局的工作人员在检查退税报表时死亡</a>。尽管有100个跟他在同一楼层的工作人员，其中30人跟他属于同一部门，直到2天后，他才被发现死亡。没有人因为他没有工作而发现他的死亡；他被发现死亡是因为他的朋友想问他要不要一起吃午饭。</p>

<p>（注1：本文不代表译者立场，仅供娱乐）
（注2：后面其实还有，但是译者不想翻了。。。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinkpad T440 Ubuntu 14.04 安装指南]]></title>
    <link href="http://Fatman13.github.io/blog/2014/08/04/thinkpad-t440-ubuntu-14-dot-04-an-zhuang-zhi-nan/"/>
    <updated>2014-08-04T20:38:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/08/04/thinkpad-t440-ubuntu-14-dot-04-an-zhuang-zhi-nan</id>
    <content type="html"><![CDATA[<p>前几周买了一台<code>Thinkpad t440 20B6002XCD</code>。<code>新蛋</code>链接在<a href="http://www.newegg.cn/Product/A36-125-C0K.htm">这里</a>。记录一下改装配置、简单评测、以及在这台电脑上曲折的安装<code>Ubuntu</code>的经历。</p>

<!--more-->


<h1>我的t440配置</h1>

<p>原计划是要陪朋友去买电脑的，后来没想到我自己先买了一台<code>t440</code>。徐汇商圈电脑硬件销售竞争非常激烈，销售员也非常主动。最后我把内存加到<code>8G</code>（<code>t440</code>好像只有一个内存条插槽），把本来的机械硬盘换成了<code>256G</code>的固态硬盘。最后价格从<code>6199元</code>升至<code>7800元</code>。</p>

<h1>t440第一感觉</h1>

<p>装好固态硬盘之后非常快。在这里强烈推荐大家升级固态硬盘。预算允许的话，可以尝试纯固态。<code>t440</code>的键盘很舒服。触控板有点失望，过于敏感。在使用<code>Thinkpad</code>小红点，尝试按下触控板上的鼠标键时，没有像<code>x220</code>那样机械按键精准。<code>Thinkpad</code>的屏幕工艺比较特别。<code>AntiGlare</code>技术感觉黑屏的时候，容易看见屏幕边角区域大片白色光晕（美版好像有升级至<code>1600x900</code>分辨率的选项 +$50）。内置3芯电池，更持久续航时间 （Ubuntu识别了第2块电池。但是我有一次没关机，回家后看电脑已经没电，接入电源启动后<code>Ubuntu</code>报了错。不清楚是不是<code>Ubuntu</code>不知道怎么切换电池？）。整机的做工非常漂亮，而且比一般的<code>Thinkpad</code>14寸的机器要轻薄很多。开机时机屏幕背面<code>Thinkpad</code>上的小红点会亮，感觉非常炫酷。关于t440更详细的评测，请参见<a href="https://www.youtube.com/watch?v=L6GvbQPwJuo">这里</a>。</p>

<h1>安装Ubuntu</h1>

<p>本来想试试看<code>Ubuntu</code>专为中国用户打造的<a href="http://www.ubuntu.com/desktop/ubuntu-kylin">麒麟</a>版。后来想了一想还是装普通版吧。不过<code>金山</code>，<code>搜狗</code>公司等等针对<a href="http://www.ubuntu.com/desktop/ubuntu-kylin">麒麟</a>版开发的软件值得关注（业界良心？）。</p>

<ul>
<li>下载<code>Ubuntu 14.04 LTS</code>的<a href="http://www.ubuntu.com/download/desktop/">镜像</a>。</li>
<li>使用<a href="http://www.pendrivelinux.com/">pendrivelinux</a>把官网上下载镜像刷到<code>u盘</code>上，具体步骤参考<a href="http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-windows">这里</a>。</li>
<li>把<code>u盘</code>插入<code>t440</code>。重启<code>t440</code>，不停点<code>F1</code>，进入<code>BIOS</code>。</li>
<li><code>startup</code>&mdash;&ndash;><code>Boot</code>，按<code>+</code>（其实按的是<code>shift + 等于键</code>）把你插入<code>u盘</code>的那个<code>usb</code>端口的<code>Boot</code>顺序排在第一位。</li>
<li><code>Esc</code>&mdash;&ndash;><code>Exit and save changes</code>&mdash;&ndash;><code>yes</code></li>
<li>重启后，按照<code>Ubuntu</code>的提示一步一步安装。</li>
</ul>


<h1>无线网卡问题</h1>

<p>问题来了，你也有可能注意到了。<code>Ubuntu</code>安装的时候因为没有驱动，无法检测到<code>t440</code>的无线网卡。这也印证了一句古话，电脑中<code>Intel</code>的芯片越多，就越容易装<code>Ubuntu</code>。使用<code>sudo lshw</code>或者<code>lspci -nnk | grep -iA2 net</code>，发现<code>t440</code>的网卡芯片是<code>RealTek rtl8192ee PCIe</code>。而且<code>Ubuntu 14.04</code>没有对应的驱动。</p>

<ul>
<li>确认路由器的加密方式为<code>WPA2</code>。（参考<a href="http://ubuntuforums.org/archive/index.php/t-2003972.html">这里</a>）</li>
<li>根据在<code>Ubuntu bugs</code>中<a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1239578">这个</a>帖子里的讨论，<code>RealTek</code>已经把<code>rtl8192</code>驱动的代码发给了<code>Larry Finger</code>，他已经把驱动合入了<code>Linux kernel 3.16 rc2</code>。所以大家可以参考<a href="http://linuxg.net/how-to-install-kernel-3-16-rc2-on-ubuntu-linux-mint-pinguy-os-and-other-ubuntu-derivatives/">这里</a>的步骤安装新的<code>Linux</code>内核。值得一提的是<code>Ubuntu 14.10 Utopic Unicorn</code>已经使用<code>3.16 rc2</code>为默认内核了。</li>
<li>到这里<code>t440</code>应该可以连上<code>Wifi</code>了。如果还是不行的话可以参考附录2。</li>
</ul>


<h1>附录1</h1>

<blockquote><p>Also go into your router settings and change wpa to just wpa2 if you have that option it works best with ubuntu.
&mdash; <a href="http://ubuntuforums.org/archive/index.php/t-2003972.html">Wild man</a></p></blockquote>

<h1>附录2</h1>

<p>如何设置<a href="http://superuser.com/questions/564519/ubuntu-cant-connect-to-internet">静态ip</a>呢？</p>

<h1>附录3</h1>

<p>Install <a href="http://askubuntu.com/questions/172698/how-do-i-install-sublime-text-2-3">Sublime Text 2/3</a> on Ubuntu.</p>

<h1>附录4</h1>

<p>关于<a href="https://www.khanacademy.org/economics-finance-domain/core-finance/money-and-banking/bitcoin/v/bitcoin-overview">Bitcoin</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何整合支付宝到Rails应用中]]></title>
    <link href="http://Fatman13.github.io/blog/2014/06/21/ru-he-zheng-he-zhi-fu-bao-dao-railsying-yong-zhong/"/>
    <updated>2014-06-21T12:38:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/06/21/ru-he-zheng-he-zhi-fu-bao-dao-railsying-yong-zhong</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何接入支付宝到你的<code>Rails4</code>应用中。本人已知的一些支持接入支付宝的<code>gem</code>有<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>等等。但是由于<code>RoR</code>目前国内仍然比较非主流，这2个<code>gem</code>并没有维护的非常好。本文将介绍如何自己写一个简单接入支付宝的<code>Rails helper</code>。（用到了很多<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>中的源代码）</p>

<!--more-->


<h1>申请支付宝商家服务</h1>

<p>在技术集成之前，首先需要申请支付宝<a href="https://b.alipay.com/">商家服务</a>产品，获取<code>PID</code>和<code>Key</code>。现在支付宝商家服务最常见的产品包括<code>双功能收款</code>和<code>平台商双功能收款</code>。二者的主要区别在于<code>双功能收款</code>的买家只能对你进行付款，<code>平台商双功能收款</code>能让买家直接对入驻你平台的卖家进行付款。审核通过后，就能在<a href="https://b.alipay.com/order/techService.htm?src=nsf05/">这里</a>找到相关的技术文档，进行技术集成了。</p>

<h1>支付宝接口调用流程</h1>

<p>当用户在你的应用上完成订单，点击例如<code>去支付</code>之类的按钮时，按照<a href="https://b.alipay.com/order/techService.htm?src=nsf05/">支付宝文档</a>中的参数要求生成请求参数，利用<code>Rails</code>的 <code>redirect_to</code>函数，让用户跳转到<code>支付宝网关的url+请求参数</code>。你应用这边的事情就结束了，一切顺利的话，用户跳转到支付宝网关，登录支付宝账号并支付，一笔交易就完成啦！需要注意的是，请求参数中提供了2个可选参数<code>return_url</code>和<code>notify_url</code>。分别是支付宝交易处理完成后，同步和异步反调请求地址。也就是说，你的应用需要提供2个<code>url</code>给支付宝调用，用来通知你交易的状态。如果这2个参数为空，支付宝不会进行反调。所有交易记录都可以在支付宝账号中查看。</p>

<h1>关于生成签名</h1>

<p>你发送给支付宝网关的请求参数，支付宝会通过验证<code>sign</code>和<code>sign_type</code>这2个必填参数来判断请求的合法性。但是如何生成<code>sign</code>和<code>sign_type</code>呢？举个例子，假如说现在除了<code>sign</code>和<code>sign_type</code>我只要传<code>a=1</code>，<code>b=2</code>，<code>c=3</code>这三个参数给支付宝网关。那么sign的值应该如下。（注意：参数需按照字母顺序排序。示例使用<code>sign_type</code>为MD5，其他还有<code>RSA</code>等等的验证方式。<code>key</code>就是之前申请支付宝商家服务时，支付宝给你的一个密钥。）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sign      = MD5('a=1&b=2&c=3' + key )
</span><span class='line'>sign_type = 'MD5'</span></code></pre></td></tr></table></div></figure>


<h1>helper函数</h1>

<p>首先在helper文件夹下建<code>alipay</code>文件夹。这里比较随意，你也可以不建这个文件夹。在<code>alipay</code>下建立<code>gateway_helper.rb</code>。名字可以随意，<code>_helper.rb</code>后缀能保证默认配置下，<code>Rails</code>读取这个文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>D:.
</span><span class='line'>├─app
</span><span class='line'>│  ├─assets
</span><span class='line'>│  ├─controllers
</span><span class='line'>│  ├─helpers
</span><span class='line'>│  │  └─alipay</span></code></pre></td></tr></table></div></figure>


<h1>生成请求参数</h1>

<p>在<code>gateway_helper.rb</code>中添加如下代码。（其中用到了很多<a href="https://github.com/transist/pay_fu">pay_fu</a>，<a href="https://github.com/flyerhzm/activemerchant_patch_for_china">activemerchant_patch_for_china</a>中的源代码）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;digest/md5&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Alipay</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">GatewayHelper</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 直接叫这个函数，放入参数，就能实现跳转啦</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">alipay_purchase</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="c1"># 准备请求参数</span>
</span><span class='line'>      <span class="n">query</span> <span class="o">=</span> <span class="n">prep_params</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 阿里网关url + 请求参数</span>
</span><span class='line'>      <span class="n">alipay_url</span> <span class="o">=</span> <span class="s1">&#39;https://mapi.alipay.com/gateway.do?&#39;</span> <span class="o">+</span> <span class="n">querify_esc</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 页面跳转</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">alipay_url</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">prep_params</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>      <span class="n">query_params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># ===&gt; 配置信息 &lt;===</span>
</span><span class='line'>      <span class="c1">#   隐藏隐私信息在配置文件中，配置文件不要用SCM管理。</span>
</span><span class='line'>        <span class="ss">:partner</span> <span class="o">=&gt;</span> <span class="no">ALIPAY_CONFIG</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">][</span><span class="s1">&#39;pid&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:&quot;_input_charset&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="c1"># return_url和notify_url暂时不用</span>
</span><span class='line'>        <span class="c1"># :notify_url =&gt; options[:notify_url],</span>
</span><span class='line'>        <span class="c1"># :return_url =&gt; options[:return_url],</span>
</span><span class='line'>      <span class="c1"># 支付宝商家服务类型，这里是双功能收款。</span>
</span><span class='line'>        <span class="ss">:service</span> <span class="o">=&gt;</span> <span class="s1">&#39;trade_create_by_buyer&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1"># ===&gt; 交易信息 &lt;===</span>
</span><span class='line'>      <span class="c1">#   你系统中的订单号，交易成功的订单号再次请求会失败</span>
</span><span class='line'>        <span class="ss">:out_trade_no</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:out_trade_no</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:price</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:quantity</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="c1"># :seller_email =&gt; SELLER_EMAIL,</span>
</span><span class='line'>        <span class="ss">:seller_id</span> <span class="o">=&gt;</span> <span class="no">ALIPAY_CONFIG</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">][</span><span class="s1">&#39;pid&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:payment_type</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="c1">#   题目（你网站名称）</span>
</span><span class='line'>        <span class="ss">:subject</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:subject</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="c1">#   商品清单（我个人理解。。。）</span>
</span><span class='line'>        <span class="ss">:body</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="c1"># ===&gt; 物流 &lt;===</span>
</span><span class='line'>        <span class="ss">:logistics_type</span> <span class="o">=&gt;</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:logistics_fee</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:logistics_payment</span> <span class="o">=&gt;</span> <span class="s1">&#39;BUYER_PAY&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1"># ===&gt; 用户信息 &lt;=== </span>
</span><span class='line'>        <span class="ss">:receive_name</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:receive_name</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:receive_address</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:receive_address</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:receive_mobile</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:receive_mobile</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:receive_zip</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:receive_zip</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:receive_phone</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:receive_phone</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">query_params</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[</span><span class="n">query_params</span><span class="o">.</span><span class="n">sort</span><span class="o">]</span>
</span><span class='line'>    <span class="c1"># sign = MD5(&#39;a=1&amp;b=2&amp;c=3&#39; + key )</span>
</span><span class='line'>      <span class="n">query_params</span><span class="o">[</span><span class="ss">:sign</span><span class="o">]</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">querify</span><span class="p">(</span><span class="n">query_params</span><span class="p">)</span> <span class="o">+</span> <span class="no">ALIPAY_CONFIG</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">][</span><span class="s1">&#39;key&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">query_params</span><span class="o">[</span><span class="ss">:sign_type</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;MD5&#39;</span>
</span><span class='line'>      <span class="n">query_params</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">querify</span><span class="p">(</span><span class="n">query_hash</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 把哈希变成&#39;a=1&amp;b=2&amp;c=3&#39;，验证md5用</span>
</span><span class='line'>      <span class="n">query_hash</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">=</span><span class="si">#{</span><span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;&amp;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">querify_esc</span><span class="p">(</span><span class="n">query_hash</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># 把哈希变成&#39;a=1&amp;b=2&amp;c=3&#39;，跳转用</span>
</span><span class='line'>      <span class="n">query_hash</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">=</span><span class="si">#{</span><span class="no">CGI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;&amp;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>    
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就<code>okay</code>了。下面将简单示范参考调用方法。</p>

<h1>在routes.rb中 （参考用法）</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:orders</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;pay&#39;</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:member</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>在View中 （参考用法）</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">pay_order_path</span><span class="p">(</span><span class="vi">@order</span><span class="p">),</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;btn-u&#39;</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:post</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x">去支付</span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<h1>在Controller中 （参考用法）</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">pay</span>
</span><span class='line'>  <span class="n">alipay_purchase</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">:out_trade_no</span> <span class="o">=&gt;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:price</span> <span class="o">=&gt;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">total_price</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:subject</span> <span class="o">=&gt;</span> <span class="s1">&#39;某某网&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:body</span> <span class="o">=&gt;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">products</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:receive_name</span> <span class="o">=&gt;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:receive_address</span> <span class="o">=&gt;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">address</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:receive_mobile</span> <span class="o">=&gt;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">cell_phone</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:receive_zip</span> <span class="o">=&gt;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">zip</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:receive_phone</span> <span class="o">=&gt;</span> <span class="vi">@order</span><span class="o">.</span><span class="n">phone</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>附录</h1>

<ul>
<li>平台商双功能收款接入<a href="http://pan.baidu.com/s/1qWwgs7E">文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Deploy Rails 4 app from Windows dev environment using Capistrano 3]]></title>
    <link href="http://Fatman13.github.io/blog/2014/05/24/how-to-deploy-rails-4-app-from-windows-dev-environment-using-capistrano-3/"/>
    <updated>2014-05-24T21:26:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/05/24/how-to-deploy-rails-4-app-from-windows-dev-environment-using-capistrano-3</id>
    <content type="html"><![CDATA[<p>This post will be primarily sharing some gotchas when I went through this <a href="http://corlewsolutions.com/articles/article-10-how-to-deploy-rails-applications-using-capistrano-3-1-and-windows-7">post</a> for deploying to a Linux server from Windows development machines using capistrano 3.</p>

<!--more-->


<h1>Environment</h1>

<ul>
<li>Development on Windows 7</li>
<li>Deployment on <a href="http://www.aliyun.com/">aliyun ECS</a> Ubuntu 12.04 image</li>
<li>Rails 4</li>
<li>Capistrano 3</li>
</ul>


<h1>Sidenote</h1>

<ul>
<li>Capistrano will automatically run <code>rake db:migration</code> for you if you uncomment <code>require 'capistrano/rails/migrations'</code> in capfile.</li>
<li>Capistrano will automatically precompile assets for you if you uncomment <code>require 'capistrano/rails/assets'</code> in capfile.</li>
</ul>


<h1>fetch not working?</h1>

<p>When running <code>cap production git:check</code>, I always get something like the following error when I use a variable defined by <code>set</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:github_user</span><span class="p">,</span> <span class="s1">&#39;Fatman13&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;https://github.com/#{fetch(:github_user)}/foo.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span> <span class="no">Running</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">git</span> <span class="n">ls</span><span class="o">-</span><span class="n">remote</span> <span class="o">-</span><span class="n">h</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="c1">#{fetch(:github_user)}/foo.git on 114.***.***.***</span>
</span><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span> <span class="ss">Command</span><span class="p">:</span> <span class="p">(</span> <span class="no">GIT_ASKPASS</span><span class="o">=</span><span class="sr">/bin/e</span><span class="n">cho</span> <span class="no">GIT_SSH</span><span class="o">=</span><span class="sr">/tmp/</span><span class="n">foo</span><span class="o">/</span><span class="n">git</span><span class="o">-</span><span class="n">ssh</span><span class="o">.</span><span class="n">sh</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">git</span> <span class="n">ls</span><span class="o">-</span><span class="n">remote</span> <span class="o">-</span><span class="n">h</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="c1">#{fetch(:github_user)}/foo.git )</span>
</span><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span> <span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">962</span> <span class="n">seconds</span> <span class="n">with</span> <span class="nb">exit</span> <span class="n">status</span> <span class="mi">1</span> <span class="p">(</span><span class="n">failed</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span>        <span class="ss">bash</span><span class="p">:</span> <span class="o">-</span><span class="ss">c</span><span class="p">:</span> <span class="n">line</span> <span class="mi">0</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span> <span class="n">near</span> <span class="n">unexpected</span> <span class="n">token</span> <span class="sb">`(&#39;</span>
</span><span class='line'><span class="sb">DEBUG [39feea1e]        bash: -c: line 0: `</span><span class="p">(</span> <span class="no">GIT_ASKPASS</span><span class="o">=</span><span class="sr">/bin/e</span><span class="n">cho</span> <span class="no">GIT_SSH</span><span class="o">=</span><span class="sr">/tmp/</span><span class="n">deepot</span><span class="o">/</span><span class="n">git</span><span class="o">-</span><span class="n">ssh</span><span class="o">.</span><span class="n">sh</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">git</span> <span class="n">ls</span><span class="o">-</span><span class="n">remote</span> <span class="o">-</span><span class="n">h</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="c1">#{fetch(:github_user)}/foo.git )&#39;</span>
</span><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span> <span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">962</span> <span class="n">seconds</span> <span class="n">with</span> <span class="nb">exit</span> <span class="n">status</span> <span class="mi">1</span> <span class="p">(</span><span class="n">failed</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have to ditch <code>fetch</code> method and write something like&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;https://github.com/Fatman13/foo.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>No such file to load &mdash; bcrypt</h1>

<p>Capistrano will try to precompile assets at somepoint while running <code>cap production deploy</code>. It kept throwing an error saying <code>No such file to load -- bcrypt</code>. I found a comment from <a href="http://railscasts.com/episodes/335-deploying-to-a-vps?view=comments">Railscast</a> solved my problem.</p>

<blockquote><p>I had this issue. I develop on Windows 7, and certain gems have windows-specific versions. I went into my Gemfile.lock and removed all &ldquo;x86-mingw32&rdquo; in the gem version numbers. After commiting the changes and deploying again, it worked. I also had this problem with postgres and the pg gem.
(by <a href="https://github.com/jdresner">jdresner</a>)</p></blockquote>

<h1>References</h1>

<ul>
<li>[1] My <a href="https://github.com/Fatman13/deepot/blob/master/Gemfile">gemfile</a>.</li>
<li>[2] Corlew solutions&rsquo;s <a href="http://corlewsolutions.com/articles/article-10-how-to-deploy-rails-applications-using-capistrano-3-1-and-windows-7">How-To Deploy Rails Applications Using Capistrano 3.1 and Windows 7</a></li>
<li>[3] Corlew solutions&rsquo;s <a href="http://corlewsolutions.com/articles/article-11-guide-to-setting-up-ssh-on-windows-7">Guide To Setting Up SSH on Windows 7</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4 strong parameter gotcha for beginners]]></title>
    <link href="http://Fatman13.github.io/blog/2014/05/24/rails4-strong-parameter-gotcha-for-beginners/"/>
    <updated>2014-05-24T21:24:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/05/24/rails4-strong-parameter-gotcha-for-beginners</id>
    <content type="html"><![CDATA[<p><code>Rails 4</code> gotcha for noobies(like me) &mdash; Strong Parameters</p>

<!--more-->


<p><code>Rails 4</code> now comes with <a href="https://github.com/rails/strong_parameters">strong_parameters</a> gem as part of standard installation now. For example if you run <code>rails g scaffold product name price:decimal</code>, the following will be generated in <code>app/controllers/products_controller.rb</code> under <code>private</code> methods section.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Never trust parameters from the scary internet, only allow the white list through.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">product_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:product</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:price</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the comments suggested, <code>product_params</code> will only allow a whitelist of product attributes. This is done by using <code>permit</code> method as shown above.</p>

<p>Now the gotcha part&hellip; When you add new columns using <code>rails g migration add_stock_to_product stock:integer</code>, <code>rake db:migrate</code>, changing the corresponding scaffold <code>html.erb</code> files. You expect the new product attribute <code>stock</code> to work, but it won&rsquo;t. You still need to add <code>:stock</code> hash to <code>permit</code> method like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Never trust parameters from the scary internet, only allow the white list through.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">product_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:product</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:stock</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I kept forgetting adding new attribute to <code>permit</code>. Thus render controller methods not recognizing new attributes. It got me twice, so putting a note here. Hopefully helping someone on the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[顾妈妈网一期试运营版正式上线]]></title>
    <link href="http://Fatman13.github.io/blog/2014/04/18/gu-ma-ma-wang-yi-qi-shi-yun-ying-ban-zheng-shi-shang-xian/"/>
    <updated>2014-04-18T21:44:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/04/18/gu-ma-ma-wang-yi-qi-shi-yun-ying-ban-zheng-shi-shang-xian</id>
    <content type="html"><![CDATA[<p>公告，顾妈妈网一期试运行版上线啦。大家也快来<a href="gumama13.com">访问</a>吧。非常可惜<code>gumama.com</code>这个域名被人捷足先登了。好像是一个叫<code>谷妈妈</code>的婚庆网站。在下只能屈就于<code>gumama13.com</code>这个域名了。现在随便写下点什么。</p>

<!--more-->


<h1>流量统计</h1>

<p><img src="http://i.imgur.com/u4MlWXT.jpg" alt="" /></p>

<p>使用<a href="http://www.google.com/analytics/">Google Analytics</a>统计的第一天的流量。不过由于<code>Rails 4</code>自带的<code>turbo link</code>功能，不一定每次翻页都统计进去了。尝试了<code>SO</code>上<a href="http://stackoverflow.com/questions/18632644/google-analytics-with-rails-4">这个</a>答案。但是好像没有起到作用。</p>

<h1>部署</h1>

<p>这次部署使用了<a href="http://www.aliyun.com/?utm_medium=text&amp;utm_source=bdbrand&amp;utm_campaign=bdbrand">阿里云</a>。用下来真的挺好。而且阿里在使用百度推广的时候确实也挺精明。在大搜中搜索例如<code>Azure</code>，<code>ucloud</code>等等其他云服务供应商的时候，阿里故意买这些敏感词汇，然后打出自己的广告。</p>

<p><img src="http://i.imgur.com/S3PtAJL.jpg" alt="" /></p>

<p>搜索&#8221;Azure&#8221;。</p>

<p><img src="http://i.imgur.com/a4456Kx.jpg" alt="" /></p>

<p>搜索&#8221;uCloud&#8221;</p>

<p>而且<code>阿里云</code>在同类型云服务提供商中间，确实有价格优势，一个月55元。1核CPU，512MB内存，20G硬盘，1MBps网络流量，<code>Ubuntu 12.04</code>，对一个初出茅庐的小网站，是绰绰有余了。阿里杭州机房的响应速度也是良好。在用<code>passenger</code>部署我的<code>Rails 4</code>应用的时候，<code>passenger</code>提示我最好有1G内存，并且给了增加<code>swap</code>内存的指令。阿里云机器默认没有<code>swap</code>内存，不过使用root之后倒也改成功了。不知道是不是阿里云的初衷。</p>

<h1>题外话</h1>

<p>推荐一个4月神番，<a href="http://comic.letv.com/zt/pingpongbili/index.shtml#p1">乒乓</a>。就第一集来看，在下非常喜欢这部片子。鄙人总结了一些该番的看点。虽然都是一些商业片惯用的手法，但是运用的恰到好处。</p>

<h4>&mdash;&ndash;> 剧透分割线 &lt;&mdash;&ndash;</h4>

<ul>
<li>猪脚不苟言笑，但是有个外号叫&#8221;smile&#8221;</li>
<li>片子开头和当中2段<code>教练</code>和<code>山田队长</code>的对话，埋下了很多伏笔。不经意间带过了很多事情。特别是开头那段对话，后面<code>阿扁</code>被<code>China</code>打败时，让人不禁有“哇~”的感觉。</li>
<li>分镜和<code>BGM</code>也是一流。（从分镜就能感觉到制作满满的诚意）</li>
<li>人物各种幽默的对话，在CV的演绎下，感觉特别好。这个<code>China</code>的教练的CV很好，<code>China</code>的CV一般。</li>
<li><code>12:58</code>和<code>13:17</code>日本教练的细节表情。<code>16:32</code>天空中有鸟飞过。</li>
<li><code>China</code>和<code>阿扁</code>的对局很燃！</li>
<li>对局后<code>China</code>的自我评价，让人对角色的好感度上升很多。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber小黄瓜页面级自动化测试入门教程]]></title>
    <link href="http://Fatman13.github.io/blog/2014/03/12/cucumberxiao-huang-gua-ye-mian-ji-zi-dong-hua-ce-shi-ru-men-jiao-cheng/"/>
    <updated>2014-03-12T20:44:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/03/12/cucumberxiao-huang-gua-ye-mian-ji-zi-dong-hua-ce-shi-ru-men-jiao-cheng</id>
    <content type="html"><![CDATA[<p>之前也写了<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">一篇</a>小黄瓜页面级自动化测试的教程，但是感觉写的可能不是最好。再尝试写一篇入门级别的页面自动化教程。源代码在<a href="https://github.com/Fatman13/cuke_midpage">这里</a>。</p>

<!--more-->


<h1>自动化测试对象</h1>

<p>这段<a href="https://github.com/Fatman13/cuke_midpage">源代码</a>主要自动化测试了<code>百度微购</code>页面上的几个链接是否为死链。</p>

<h1>使用代码</h1>

<ul>
<li>首先<code>git clone https://github.com/Fatman13/cuke_midpage.git</code>。</li>
<li><code>cd cuke_midpage</code>进入刚下载的文件夹中。</li>
<li>运行<code>bundle install</code>。</li>
<li>跑自动化case运行<code>cucumber</code>。（你应该能看到小黄瓜打开火狐，并验证给予的链接是否是死链）</li>
</ul>


<h1>源代码结构</h1>

<p>小黄瓜大致文件结构如下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>D:.
</span><span class='line'>└─features
</span><span class='line'>    ├─step_definitions
</span><span class='line'>    └─support</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>features</code>文件夹：主要存放<code>.feature</code>文档。是每个测试case的文字解释。</li>
<li><code>step_definition</code>文件夹：主要存放<code>.rb</code>文件。每个case具体执行的代码，都应该放在这里。</li>
<li><code>support</code>文件夹：主要存放<code>env.rb</code>。主要定义一个环境变量。所有<code>require</code>都可以放在这儿里。因为<code>小黄瓜</code>在运行测试前，一定会先运行<code>env.rb</code>这个文件。</li>
</ul>


<p>如上所示，开发者只需将对应的<code>.feature</code>，<code>.rb</code>文件等等，按照小黄瓜约定，放入对应的文件夹中。运行<code>cucumber</code>时，小黄瓜就会自动在对应的文件夹中找运行case所需的代码。</p>

<h1>feature文档讲解</h1>

<p>作为一个<a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>行为驱动测试框架，小黄瓜会逼迫你写一些文档。给测死链case写一个feature文档可能略显<code>鸡肋</code>。这里主要是作为一个简单的例子做讲解一下<code>features/wgmp_link.feature</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> 中间页死链</span>
</span><span class='line'><span class="nf">  为了保证中间页没有死链。</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario Outline:</span><span class="nf"> 测死链（Capybara）</span>
</span><span class='line'><span class="k">    When </span><span class="nf">我访问&quot;</span><span class="s">http://weigou.baidu.com</span><span class="nf">&quot;并点击</span><span class="nv">&lt;some_link&gt;</span><span class="nf">链接时</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">页面状态应该为&quot;</span><span class="s">200</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Examples:</span><span class="nf"> 点这些</span><span class="k"></span>
</span><span class='line'><span class="k">      |</span><span class="nv"> some_link</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> 团购</span><span class="k"> |</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="nt">@new</span><span class="nf">   </span>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario Outline:</span><span class="nf"> 测死链（http client）</span>
</span><span class='line'><span class="k">    When </span><span class="nf">我访问</span><span class="nv">&lt;some_link&gt;</span><span class="nf">链接时</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">我得到的页面状态应该为&quot;</span><span class="s">200</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Examples:</span><span class="nf"> 点这些</span><span class="k"></span>
</span><span class='line'><span class="k">      |</span><span class="nv"> some_link</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> http://weigou.baidu.com/</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> http://weigou.baidu.com/topic/food</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> http://weigou.baidu.com/topic/beauty</span><span class="k"> |</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>feature</code>文档使用的是<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gerkins</a>的语法。以上这篇<code>feature</code>文档，使用了<code>Scenario Outline:</code>关键词，写了2个case。第一个是使用<code>Capybara</code>测死链，第二个是直接使用<code>http</code>客户端测死链。<code>Given</code>，<code>When</code>，<code>Then</code>三个关键词可以用来定义一个case所需要走的一个流程。（这个例子中省略了<code>Given</code>）这三个关键词后面的话都是可以根据case的需求改写的。<code>小黄瓜</code>会用这些话，用正则表达式自动对应到<code>feature/step_definitions/link_steps.rb</code>中每句话对应的<code>code block</code>中，并在测试时，运行每句话所对应的代码。</p>

<h1>代码讲解</h1>

<p>接下来讲解一下<code>feature/step_definitions/link_steps.rb</code>中的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使用Capybara</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^我访问&quot;(.*?)&quot;并点击(.*)链接时$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 正则不仅将When关键词的话对应到这个code block中，</span>
</span><span class='line'>  <span class="c1"># 还能从那句话中读取参数。</span>
</span><span class='line'>  <span class="c1"># arg1的值是&quot;http://weigou.baidu.com&quot;</span>
</span><span class='line'>  <span class="c1"># arg2的值是&quot;团购&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># visit是capybara封装的一个函数。</span>
</span><span class='line'>  <span class="c1"># 他会自动打开火狐，并访问arg1。 </span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">arg1</span>
</span><span class='line'>  <span class="c1"># find是capybara封装的一个函数。</span>
</span><span class='line'>  <span class="c1"># 这里通过html的a元素上的text找到了这个a元素，</span>
</span><span class='line'>  <span class="c1"># 并将他存到@elem变量中。</span>
</span><span class='line'>  <span class="vi">@elem</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="sr">/\A</span><span class="si">#{</span><span class="n">arg2</span><span class="si">}</span><span class="sr">\z/</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^页面状态应该为&quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 点击该链接</span>
</span><span class='line'>  <span class="vi">@elem</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使用http client</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^我访问(.*)链接时$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 由于在feature文档中使用了examples关键词</span>
</span><span class='line'>  <span class="c1"># 这里arg1分别对应了</span>
</span><span class='line'>  <span class="c1"># &quot;http://weigou.baidu.com/&quot;</span>
</span><span class='line'>  <span class="c1"># &quot;http://weigou.baidu.com/topic/food&quot;</span>
</span><span class='line'>  <span class="c1"># &quot;http://weigou.baidu.com/topic/beauty&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg1</span>
</span><span class='line'>  <span class="c1"># 直接使用http客户端，向每个arg1发送get请求。</span>
</span><span class='line'>  <span class="vi">@response</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="n">arg1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^我得到的页面状态应该为&quot;(.*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg1</span>
</span><span class='line'>  <span class="c1"># 检查页面status是不是200。</span>
</span><span class='line'>  <span class="vi">@response</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里可以清楚的看到，在<code>feature</code>文档中，<code>When</code>和<code>Then</code>后面跟的话，都一一对应了一块代码。在运行自动化case时，他们会按照<code>feature</code>文档中每个<code>Scenario</code>的顺序，依次执行每一段对应的代码。</p>

<h1>附录</h1>

<ul>
<li>如有问题可以发送邮件至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</li>
<li><a href="https://s3.amazonaws.com/macslow/index.html">这个</a>挺有意思。</li>
</ul>


<object data="https://s3.amazonaws.com/macslow/clock7.svg?w=3&amp;h=3" id="clock1" type="image/svg+xml"></object>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Jacoco远程统计tomcat服务的覆盖率]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/27/ru-he-shi-yong-jacocoyuan-cheng-tong-ji-tomcatfu-wu-de-fu-gai-lu/"/>
    <updated>2014-02-27T20:18:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/27/ru-he-shi-yong-jacocoyuan-cheng-tong-ji-tomcatfu-wu-de-fu-gai-lu</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用<code>Jacoco</code>生成远程<code>tomcat</code>服务的覆盖率报告。<br/>
(<em>注：使用<code>jacoco</code>打开远程服务端口，有一定安全风险。</em>)</p>

<!--more-->


<h1>软件安装</h1>

<ul>
<li><a href="http://ant.apache.org/bindownload.cgi">Ant</a></li>
<li><a href="http://www.eclemma.org/jacoco/">Jacoco</a></li>
</ul>


<h1>远程Tomcat服务配置</h1>

<ul>
<li><code>sh shutdown.sh</code>先关闭<code>tomcat</code>服务。</li>
<li>修改<code>bin/catalina.sh</code>中<code>JAVA_OPTS</code>的配置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># -javaagent: 的后面跟jacoco的安装路径</span>
</span><span class='line'><span class="c"># includes= 选项，选择你要覆盖率的服务</span>
</span><span class='line'><span class="c"># port= 选项，选择你要打开的端口</span>
</span><span class='line'><span class="c"># address= 选项，tomcat服务所在机器的ip地址（如果想在跟tomcat服务同一台机器上执行ant任务的话，需要改为127.0.0.1）</span>
</span><span class='line'><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;-javaagent:/path/to/your/jacoco_0.6.4/lib/jacocoagent.jar=includes=com.baidu.*,output=tcpserver,port=8893,address=10.81.14.77&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>sh startup.sh</code>重新启动<code>tomcat</code>服务。</li>
</ul>


<h1>本地Ant任务配置</h1>

<ul>
<li>配置<code>build.xml</code>。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">name=</span><span class="s">&quot;Lengyu&quot;</span> <span class="na">xmlns:jacoco=</span><span class="s">&quot;antlib:org.jacoco.ant&quot;</span> <span class="na">default=</span><span class="s">&quot;jacoco&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--Jacoco的安装路径--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jacocoantPath&quot;</span> <span class="na">value=</span><span class="s">&quot;/home/work/software/jacoco_0.6.4/lib/jacocoant.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--最终生成.exec文件的路径，Jacoco就是根据这个文件生成最终的报告的--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jacocoexecPath&quot;</span> <span class="na">value=</span><span class="s">&quot;/home/work/local/hudson_home/workspace/wg_merchant_oc_regression/jacoco.exec&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--生成覆盖率报告的路径--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;reportfolderPath&quot;</span> <span class="na">value=</span><span class="s">&quot;E:/Libs/coverage_ant_task/report/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--远程tomcat服务的ip地址--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;server_ip&quot;</span> <span class="na">value=</span><span class="s">&quot;10.81.14.77&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--前面配置的远程tomcat服务打开的端口，要跟上面配置的一样--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;server_port&quot;</span> <span class="na">value=</span><span class="s">&quot;8893&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--源代码路径--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;checkOrderSrcpath&quot;</span> <span class="na">value=</span><span class="s">&quot;E:/Src/ordercenter/ordercenter-biz/src/main/java/&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--.class文件路径--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;checkOrderClasspath&quot;</span> <span class="na">value=</span><span class="s">&quot;E:/Src/ordercenter/ordercenter-biz/target/classes/com/baidu/ordercenter/service/Impl&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--让ant知道去哪儿找Jacoco--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;taskdef</span> <span class="na">uri=</span><span class="s">&quot;antlib:org.jacoco.ant&quot;</span> <span class="na">resource=</span><span class="s">&quot;org/jacoco/ant/antlib.xml&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;classpath</span> <span class="na">path=</span><span class="s">&quot;${jacocoantPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/taskdef&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--dump任务:</span>
</span><span class='line'><span class="c">      根据前面配置的ip地址，和端口号，</span>
</span><span class='line'><span class="c">      访问目标tomcat服务，并生成.exec文件。--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;dump&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;jacoco:dump</span> <span class="na">address=</span><span class="s">&quot;${server_ip}&quot;</span> <span class="na">reset=</span><span class="s">&quot;false&quot;</span> <span class="na">destfile=</span><span class="s">&quot;${jacocoexecPath}&quot;</span> <span class="na">port=</span><span class="s">&quot;${server_port}&quot;</span> <span class="na">append=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">&lt;!--jacoco任务:</span>
</span><span class='line'><span class="c">      根据前面配置的源代码路径和.class文件路径，</span>
</span><span class='line'><span class="c">      根据dump后，生成的.exec文件，生成最终的html覆盖率报告。--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;report&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;delete</span> <span class="na">dir=</span><span class="s">&quot;${reportfolderPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${reportfolderPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nt">&lt;jacoco:report&gt;</span>
</span><span class='line'>          <span class="nt">&lt;executiondata&gt;</span>
</span><span class='line'>              <span class="nt">&lt;file</span> <span class="na">file=</span><span class="s">&quot;${jacocoexecPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/executiondata&gt;</span>
</span><span class='line'>              
</span><span class='line'>          <span class="nt">&lt;structure</span> <span class="na">name=</span><span class="s">&quot;JaCoCo Report&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;group</span> <span class="na">name=</span><span class="s">&quot;Check Order related&quot;</span><span class="nt">&gt;</span>           
</span><span class='line'>                  <span class="nt">&lt;classfiles&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;${checkOrderClasspath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/classfiles&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;sourcefiles</span> <span class="na">encoding=</span><span class="s">&quot;gbk&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;${checkOrderSrcpath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/sourcefiles&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/group&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/structure&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nt">&lt;html</span> <span class="na">destdir=</span><span class="s">&quot;${reportfolderPath}&quot;</span> <span class="na">encoding=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>         
</span><span class='line'>      <span class="nt">&lt;/jacoco:report&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>生成覆盖率报告</h1>

<ul>
<li>执行<code>ant dump</code>。成功的话，应会有如下输出。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[work@st01-ecom-jn2.st01.baidu.com ant]$ ant dump
</span><span class='line'>Buildfile: /home/work/local/hudson_home/workspace/wg_merchant_oc_regression/ant/build.xml
</span><span class='line'>
</span><span class='line'>dump:
</span><span class='line'>[jacoco:dump] Connecting to /10.81.14.77:8893
</span><span class='line'>[jacoco:dump] Dumping execution data to /home/work/local/hudson_home/workspace/wg_merchant_oc_regression/jacoco.exec
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>Total time: 0 seconds
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后执行<code>ant report</code>。<code>jacoco</code>就会在你指定的路径生成覆盖率报告了。</li>
</ul>


<h1>附录</h1>

<ul>
<li>更多关于<code>Jacocoagent</code>以及各种<code>task</code>可以参考<a href="http://www.eclemma.org/jacoco/trunk/doc/ant.html">官方文档</a></li>
<li><code>Jenkins</code>的<code>Jacoco plugin</code>可以根据<code>.exec</code>文件直接生成覆盖率报告，并在<code>Jenkins</code>中生成图表等等。那样的话，<code>ant report</code>这个任务就没用了。</li>
<li>如有问题，可发email至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在没有外网的机器上安装gem]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/27/ru-he-zai-mei-you-wai-wang-de-ji-qi-shang-an-zhuang-gem/"/>
    <updated>2014-02-27T20:16:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/27/ru-he-zai-mei-you-wai-wang-de-ji-qi-shang-an-zhuang-gem</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何在没有外网的机器上安装<code>Cucumber</code>小黄瓜自动化测所需的<code>gem</code>库。</p>

<!--more-->


<h1>1. 软件安装（Jenkins机器）</h1>

<ul>
<li>安装<code>Jumbo</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash -c "$( curl http://jumbo.baidu.com/install_jumbo.sh )"; source ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装<code>Ruby 1.9.3</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jumbo install ruby</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装<code>svn</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jumbo install subversion</span></code></pre></td></tr></table></div></figure>


<h1>2. 在无外网的Jenkins服务器（或者Slave机）上安装Gem</h1>

<ul>
<li>在jenkins机器上，选择一个合适的文件夹。从<code>svn</code>上下载小黄瓜所依赖的<code>gem</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn export https://svn.baidu.com/app-test/ecom/shifen/sf-crm/trunk/weigou/cuke_gems/</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>cd cuke_gems</code>至刚刚下载的文件夹中。运行如下指令，会先安装<code>bundler</code>这个<code>gem</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install --local bundler-1.3.4.gem</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装完成后，运行以下指令。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install --local </span></code></pre></td></tr></table></div></figure>


<h1>3. 添加新的Gem</h1>

<ul>
<li>如果需要添加新的gem的话，找一台有外网的机器。（如果Jenkins或者Slave机器是Linux机器，就得用Linux机器，是Windows就得用Windows机器。）</li>
<li>先<code>co</code>之前的<code>gem</code>库。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn co https://svn.baidu.com/app-test/ecom/shifen/sf-crm/trunk/weigou/cuke_gems/</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>cd cuke_gems</code>至刚下载的文件夹中，修改<code>Gemfile</code>，添加新的<code>gem</code>。（最好能选定<code>gem</code>的版本）例如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span> <span class="s1">&#39;1.7.3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bundler&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 添加新Gem示例 &lt;------</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;new_gem&#39;</span><span class="p">,</span> <span class="s1">&#39;0.0.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber&#39;</span><span class="p">,</span> <span class="s1">&#39;1.2.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="s1">&#39;2.11.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;httparty&#39;</span><span class="p">,</span> <span class="s1">&#39;0.8.3&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rest-client&#39;</span><span class="p">,</span> <span class="s1">&#39;1.6.7&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加完成后，运行<code>bundle install</code>，然后运行<code>bundle package</code>。这样<code>bundler</code>就会生成新添加的<code>gem</code>的<code>.gem</code>文件以提供本地安装了。</li>
<li>把更新后的代码提交至<code>svn</code>。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">svn</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;add new gem(s)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后重复上文第2大点中的步骤，就能更新Jenkins机器上的<code>gem</code>库了。</li>
</ul>


<h1>附录</h1>

<ul>
<li><code>bundler</code>是给<code>gem</code>打包的一个<code>gem</code>，所以在上文中先安装了<code>bundler</code>，然后让<code>bundler</code>去本地安装其他的<code>gem</code>。</li>
<li>更多关于<code>Gemfile</code>的使用方法，可以参考<a href="http://bundler.io/">官方网站</a>。</li>
<li>所有<code>.gem</code>文件都可以在<a href="http://rubygems.org/">rubygems.org</a>上下载到。其中包括<code>gem</code>的所有历史版本。</li>
<li>如有更多问题，发送email至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试桩使用指南]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/19/ce-shi-zhuang-shi-yong-zhi-nan/"/>
    <updated>2014-02-19T21:35:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/19/ce-shi-zhuang-shi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<p>本文将简单介绍<code>测试桩</code>现有的一些功能以及如何使用<code>测试桩</code>提供的<code>API</code>接口。</p>

<!--more-->


<h1>测试桩简介</h1>

<p>现在测试桩使用<code>Django</code>框架，大致分为<code>mysite</code>，<code>jsonrpc</code>，<code>scaffolding</code>这3个模块。<br/>
（注：在项目的根目录使用了<code>python manage.py startapp [模块名]</code>这个命令创建了这些模块，模块化<code>Django</code>提供的服务）</p>

<ul>
<li><code>mysite</code>是项目的第一个模块。主要提供了kv以及商品库的几个接受jsonrpc请求的接口。<code>mysite</code>下的<code>urls.py</code>是定义<code>测试桩</code>各项API接口url的主入口。</li>
<li><code>jsonrpc</code>提供了几个发送jsonrpc请求的接口（mcpack封装），还有发送通用的jsonrpc请求的接口。（无mcpack封装，vanilla版jsonrpc请求）</li>
<li><code>scaffolding</code>主要负责提供制造各种mock商品的接口，便于自动化case的setup中，制造case所需的mock商品。</li>
</ul>


<h1>Chrome插件</h1>

<p>使用<code>chrome</code>的<code>cRest Client</code>插件可以手动向<code>测试桩</code>发送各种请求。</p>

<p><img src="http://i.imgur.com/oJEztF2.jpg" alt="" /></p>

<h1>Jsonrpc工具</h1>

<p>输入<code>测试桩</code>商品库地址<code>http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</code>，选择api，method，并填入请求参数就可以手动给<code>测试桩</code>发送jsonrpc请求了。jsonrpc工具可在附件中下载。</p>

<p><img src="http://i.imgur.com/ALJTrbi.jpg" alt="" /></p>

<h1>1. Mysite接口</h1>

<p>（可试用jsonrpc工具手动访问这些接口，或者使用renliang开发的jsonrpc-client）</p>

<h3>1.1 ProductAPI/queryInfo 获取商品详情</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</a></li>
<li>ProductAPI</li>
<li>queryInfo</li>
<li>{&ldquo;products&rdquo;:[&ldquo;183019616&rdquo;],&ldquo;uc_id&rdquo;:29844}</li>
</ul>


<h3>1.2 PromotionAPI/query 获取促销详情</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</a></li>
<li>PromotionAPI</li>
<li>query</li>
<li>{&ldquo;promotion_id&rdquo;:&ldquo;3000&rdquo;,&ldquo;uc_id&rdquo;:29844}</li>
</ul>


<h3>1.3 StockAPI/updateIncrement 增减库存</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</a></li>
<li>StockAPI</li>
<li>updateIncrement</li>
<li>{&ldquo;uc_id&rdquo;:6195321,&ldquo;products&rdquo;:[{&ldquo;product_id&rdquo;:&ldquo;600528576&rdquo;,&ldquo;items&rdquo;:[{&ldquo;stock&rdquo;:-2,&ldquo;region&rdquo;:&ldquo;全国&rdquo;}]}]}</li>
</ul>


<h3>1.4 PromotionAPI/updateStockInc 增减促销库存</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</a></li>
<li>PromotionAPI</li>
<li>updateStockInc</li>
<li>{&ldquo;uc_id&rdquo;: 29844,&ldquo;product_outerid&rdquo;:&ldquo;F47&rdquo;,&ldquo;promotion_id&rdquo;:37,&ldquo;stock_inc&rdquo;:5}</li>
</ul>


<h1>2. kv接口</h1>

<p>（kv接口主要应用于验单时，查询该商品是否存在。新kv接口是一个新的技术优化，与老kv接口还并存着。。。）</p>

<h3>2.1 新kv接口</h3>

<p><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/midpage/product/details?ids=183019611">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/midpage/product/details?ids=183019611</a></p>

<h3>2.2 老kv接口</h3>

<p><a href="http://st01-ecom-jn2.st01.baidu.com:8890/api/midpage/product/details?ids=183019611">http://st01-ecom-jn2.st01.baidu.com:8890/api/midpage/product/details?ids=183019611</a></p>

<h1>3. Scaffolding接口</h1>

<p>（主要用于各种商品库接口的mock数据的制造，便于自动化case的setup。）</p>

<h3>3.1 制造kv接口的返回值</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/kv?product_id=77582589&amp;stock=0&amp;promotionId=1013">http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/kv?product_id=77582589&amp;stock=0&amp;promotionId=1013</a></li>
<li>(可以跟更多参数。参照<code>mysite/response/new_KV/new_kv_template.json</code>。)</li>
</ul>


<h3>3.2 制造老kv接口的返回值（老kv）</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/oldkv?product_id=77582589&amp;merchantId=298440&amp;newPrice=100.00">http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/oldkv?product_id=77582589&amp;merchantId=298440&amp;newPrice=100.00</a></li>
<li>(可以跟更多参数。参照<code>mysite/response/KV/kv_template.json</code>。)</li>
</ul>


<h3>3.3 制造queryInfo接口的返回值</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/ProductAPI/queryInfo?product_id=77582589&amp;active=0&amp;fid=1157">http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/ProductAPI/queryInfo?product_id=77582589&amp;active=0&amp;fid=1157</a></li>
<li>(可以跟更多参数。参照<code>mysite/response/ProductAPI/queryInfo/queryInfo_template.json</code>。)</li>
</ul>


<h3>3.4 制造query接口的返回值</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/PromotionAPI/query?product_id=77582589&amp;active=0&amp;fid=1157">http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/PromotionAPI/query?product_id=77582589&amp;active=0&amp;fid=1157</a></li>
<li>(可以跟更多参数。参照<code>mysite/response/PromotionAPI/query/query_template.json</code>。)</li>
</ul>


<h1>4. Jsonrpc接口</h1>

<p>（用post方法，带着参数，访问这些接口。<code>测试桩</code>会代为发送jsonrpc请求，相当于一个接口级的jsonrpc工具。推荐使用上文提到的Chrome中<code>cRest Client</code>这个插件。使用post方法的话，Request entity中放请求的json串，或者其他参数。）</p>

<h3>4.1 vanilla示例（无mcpack封装，支持大多数jsonrpc的api）</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/vanilla/ProductAPI/queryInfo">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/vanilla/ProductAPI/queryInfo</a></li>
<li>{&ldquo;products&rdquo;:[&ldquo;183019611&rdquo;],&ldquo;uc_id&rdquo;:29844}</li>
</ul>


<h3>4.2 jsonrpc示例（有mcpack封装，只支持个别jsonrpc的api）</h3>

<h4>4.2.1 OrderInnerAPI/daigouCreateOrder（代购api）</h4>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/OrderInnerAPI/daigouCreateOrder">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/OrderInnerAPI/daigouCreateOrder</a></li>
<li>{&ldquo;daigouOrder&rdquo;:{&ldquo;daigouId&rdquo;:1,&ldquo;passportId&rdquo;:&ldquo;1245&rdquo;,&ldquo;productIds&rdquo;:&ldquo;181835090&rdquo;,&ldquo;productCounts&rdquo;:&ldquo;1&rdquo;,&ldquo;customer&rdquo;:&ldquo;木根&rdquo;,&ldquo;mobile&rdquo;:&ldquo;12383846326&rdquo;,&ldquo;payStyle&rdquo;:&ldquo;DAIGOU&rdquo;,&ldquo;province&rdquo;:&ldquo;山东&rdquo;,&ldquo;city&rdquo;:&ldquo;济南市&rdquo;,&ldquo;district&rdquo;:&ldquo;大观区&rdquo;,&ldquo;town&rdquo;:&ldquo;白贤镇&rdquo;,&ldquo;districtId&rdquo;:&ldquo;120001&rdquo;,&ldquo;detailAddress&rdquo;:&ldquo;龙山路22号&rdquo;,&ldquo;needInvoice&rdquo;:&ldquo;true&rdquo;,&ldquo;invoiceTitle&rdquo;:&ldquo;百度中国&rdquo;},&ldquo;token&rdquo;:&ldquo;daigou_token_26e588a503074&rdquo;}</li>
</ul>


<h4>4.2.2 PostageAPI/addTemplate（添加运费模板api）</h4>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/PostageAPI/addTemplate">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/PostageAPI/addTemplate</a></li>
<li>{&ldquo;name&rdquo;:&ldquo;运费模板名称&rdquo;,&ldquo;ucId&rdquo;:29844,&ldquo;outerId&rdquo;:null,&ldquo;assumer&rdquo;:&ldquo;SELLER&rdquo;,&ldquo;valuation&rdquo;:&ldquo;QUANTITY&rdquo;,&ldquo;consignAreaId&rdquo;:&ldquo;110101&rdquo;,&ldquo;lastModify&rdquo;:&ldquo;2014-01-02 19:06:01&rdquo;,&ldquo;shippingMethodList&rdquo;:[{&ldquo;name&rdquo;:&ldquo;COD&rdquo;,&ldquo;defaultStartStandards&rdquo;:&ldquo;1&rdquo;,&ldquo;defaultStartFees&rdquo;:&ldquo;10.00&rdquo;,&ldquo;defaultAddStandards&rdquo;:&ldquo;1&rdquo;,&ldquo;defaultAddFees&rdquo;:&ldquo;4.00&rdquo;,&ldquo;regionGroupList&rdquo;:[]}]}</li>
</ul>


<h4>4.2.3 PostageAPI/deleteTemplate（删除运费模板api）</h4>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/PostageAPI/deleteTemplate">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/PostageAPI/deleteTemplate</a></li>
<li>109</li>
</ul>


<h4>4.2.4 DeliveryRegionsAPI/updateDeliveryRegions（更新配送范围api）</h4>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/DeliveryRegionsAPI/updateDeliveryRegions">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/DeliveryRegionsAPI/updateDeliveryRegions</a></li>
<li>0</li>
</ul>


<h1>总结</h1>

<p>如有问题可以发送邮件至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何整合Cucumber小黄瓜至Jenkins持续集成服务器]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/17/ru-he-zheng-he-cucumberxiao-huang-gua-zhi-jenkinschi-xu-ji-cheng-fu-wu-qi/"/>
    <updated>2014-02-17T21:18:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/17/ru-he-zheng-he-cucumberxiao-huang-gua-zhi-jenkinschi-xu-ji-cheng-fu-wu-qi</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何将<code>Cucumber</code>小黄瓜的测试case整合到你的<code>Jenkins CI服务器</code>中。</p>

<!--more-->


<h1>软件安装</h1>

<p>以Windows工作机为例<br/>
&ndash; JDK或者JRE（记得设置JAVA_HOME这个环境变量）<br/>
&ndash; git（如果你已经安装了<a href="http://railsinstaller.org/">RailsInstaller</a>，里面是包含git的）<br/>
&ndash; 下载最新稳定版的<a href="http://mirrors.jenkins-ci.org/war/latest/jenkins.war">Jenkins</a></p>

<h1>本地建立git代码库</h1>

<p>下载，解压源代码，打开命令行，cd至刚解压的文件夹中，运行以下命令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m "initial commit"</span></code></pre></td></tr></table></div></figure>


<h1>本地配置和运行Jenkins</h1>

<ul>
<li>拷贝<code>Jenkins</code>的<code>war包</code>至你想要的文件夹，打开命令行，cd至那个文件夹。</li>
<li>运行<code>java -Dfile.encoding=UTF-8 -jar jenkins.war</code>。</li>
<li>在网页浏览器中打开<code>http://localhost:8080/configureSecurity/</code>，按下图中的配置以后点击<code>Save</code>。</li>
</ul>


<p><img src="http://i.imgur.com/ea5IK3k.jpg" alt="" /></p>

<ul>
<li>打开<code>http://localhost:8080/pluginManager/available</code>，勾选<code>Source Code Management</code>下的<code>Git Plugin</code>和<code>Build Tools</code>下的<code>Rake plugin</code>。点击<code>Download now and install after restart</code>。</li>
<li>等待Jenkins安装插件，失败的话再重新装。安装完成后<code>ctrl+c</code>杀掉进程，并重新运行<code>Jenkins</code>。</li>
<li>打开<code>http://localhost:8080/view/All/newJob</code>。填入你想要的Job名称，选择<code>Build a free-style software project</code>。点击<code>OK</code>。</li>
<li>打开<code>http://localhost:8080/job/[job名称]/configure</code>。</li>
<li>在<code>Source Code Management</code>下，选择<code>Git</code>。并在<code>Repository URL</code>中填上小黄瓜case所在的文件夹地址。如下图。</li>
</ul>


<p><img src="http://i.imgur.com/OVjhttE.jpg" alt="" /></p>

<ul>
<li>在<code>Build Triggers</code>中勾选<code>Trigger builds remotely</code>。填一个你喜欢的token。这样这个job就可以被远程执行了。以下图为例，在浏览器中输入<code>http://localhost:8080/job/wg_merchant_oc_regression/build?token=lengyu</code>就能执行这个job了。</li>
</ul>


<p><img src="http://i.imgur.com/YhfCOzS.jpg" alt="" /></p>

<ul>
<li>在<code>Build</code>下，点击<code>Add Build Step</code>，并选择<code>Invoke Rake</code>。点击<code>Advanced</code>。配置如下图。<code>features</code>是一个<code>rake task</code>，需要在前面<code>Repository URL</code>目录中配置<code>Rakefile</code>，参见上传的代码。</li>
</ul>


<p><img src="http://i.imgur.com/V7AfNPc.jpg" alt="" /></p>

<h1>总结</h1>

<p>在<code>git plugin</code>和<code>rake plugin</code>的帮助下，轻轻松松就能将小黄瓜整合到<code>jenkins</code>中。如有问题可发送邮件至<a href="mailto:lengu@baidu.com">lengyu@baidu.com</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Cucumber小黄瓜做结算中心数据校验自动化]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/15/ru-he-shi-yong-cucumberxiao-huang-gua-zuo-jie-suan-zhong-xin-shu-ju-xiao-yan-zi-dong-hua/"/>
    <updated>2014-02-15T15:53:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/15/ru-he-shi-yong-cucumberxiao-huang-gua-zuo-jie-suan-zhong-xin-shu-ju-xiao-yan-zi-dong-hua</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用<code>小黄瓜</code>来实结算中心数据比对的自动化。如果你对小黄瓜还没有初步认识的话，推荐阅读我之前写的一篇<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">文章</a>。</p>

<!--more-->


<h1>运行自动化</h1>

<p>按照惯例，下载代码，解压，打开命令行，切换到解压后的文件夹中。<br/>
运行<code>bundle install</code>。<br/>
运行<code>cucumber features/wgpc_sc.feature</code>，运行成功的话，应该能看见如下输出。</p>

<p><img src="http://i.imgur.com/oPyqlVY.jpg" alt="" /></p>

<p>注意这个case挂掉了，因为<code>jianzhong</code>2月14号的数据跟线上数据校验后有出入。输出中浅蓝色的字体（{&ldquo;540&rdquo;=>[46.0, 0.0]}）为账户金额有出入的商家id以及<code>jianzhong</code>与线上数据金额的差额。</p>

<h1>feature文档</h1>

<p>这次的feature文档简单很多。如对feature文档中的关键词存有疑惑，可参考我之前写的这篇<a href="http://tauntaunslayer13.me/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi/">文章</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> 比对结算数据</span>
</span><span class='line'><span class="nf">  为了保证结算数据中各个资金帐户余额的准确性，跟建忠计算的数据进行验对。</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> 校验逻辑</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">我读取&quot;</span><span class="s">./data/sc/2014-02-13.xls</span><span class="nf">&quot;建忠excel文件中的数据</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">我打开&quot;</span><span class="s">http://settlement.weigou.baidu.com/macount/account_info?merchantId=</span><span class="nf">&quot;线上结算中心网站并抓取结算数据</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">我比对这二组数据</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">我将会生成校验报告并评估此次校验</span>
</span></code></pre></td></tr></table></div></figure>


<p>整个比对过程大致为，打开<code>jianzhong</code>的excel文件，打开线上的结算中心，并抓取线上结算中心网页上的数据，并跟<code>jianzhong</code>的数据进行比对，如有出入，打印有出入的商家id以及2份数据余额的差额并断言。（注：本来想自动发email的，但是mail这个gem所依赖的mime-type这个gem跟cucumber也不知道是capybara用到的mime-type的版本好像有冲突。望高人留言指点。）</p>

<h1>代码详解</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我读取&quot;(.*?)&quot;建忠excel文件中的数据$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">excel_file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 使用spreadsheet这个gem来读取xls文件</span>
</span><span class='line'>  <span class="n">sc_file</span> <span class="o">=</span> <span class="no">Spreadsheet</span><span class="o">.</span><span class="n">open</span> <span class="n">excel_file</span>
</span><span class='line'>  <span class="c1"># 选择记录各资金账户余额的一张sheet</span>
</span><span class='line'>  <span class="n">sc_sheet</span> <span class="o">=</span> <span class="n">sc_file</span><span class="o">.</span><span class="n">worksheet</span> <span class="mi">2</span>
</span><span class='line'>  <span class="c1"># @sc_data_jianzhong以商家id为key，对应value为长度为2的一个数组</span>
</span><span class='line'>  <span class="c1"># 数组中第1个值为用户担保帐余额，第2个是待结算账户余额</span>
</span><span class='line'>  <span class="vi">@sc_data_jianzhong</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="c1"># 读取每一行</span>
</span><span class='line'>  <span class="n">sc_sheet</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># 跳过第一行，其实不跳也没关系</span>
</span><span class='line'>    <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">counter</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">next</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># row[2]就是用户担保帐余额，row[3]是待结算账户余额</span>
</span><span class='line'>    <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从excel文件里面读取<code>jianzhong</code>结算的结算数据，并保存到<code>@sc_data_jianzhong</code>这个变量中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我打开&quot;(.*?)&quot;线上结算中心网站并抓取结算数据$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">sc_url</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 访问结算中心线上环境</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">sc_url</span>
</span><span class='line'>  <span class="c1"># 算一下一共有多少行商家</span>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="s1">&#39;table tr&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>  <span class="vi">@sc_data_yanghu</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="c1"># 有多少行，就loop多少次</span>
</span><span class='line'>  <span class="n">count</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># 跳过第一行，其实也可以不跳</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">next</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># 用xpath选到每一行，拿他的text。</span>
</span><span class='line'>    <span class="n">row</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;(//tr)[&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot;]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span>
</span><span class='line'>    <span class="vi">@sc_data_yanghu</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="c1"># row[4]为用户担保帐余额，row[5]为待结算账户余额</span>
</span><span class='line'>    <span class="vi">@sc_data_yanghu</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">4</span><span class="o">][</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">[</span><span class="mi">4</span><span class="o">].</span><span class="n">length</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@sc_data_yanghu</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">5</span><span class="o">][</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">[</span><span class="mi">5</span><span class="o">].</span><span class="n">length</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>selenium-webdriver</code>配合<code>capybara</code>打开结算中心线上环境。并抓取页面上的数据，保存至<code>@sc_data_yanghu</code>这个参数中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^我比对这二组数据$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 数据比对结果</span>
</span><span class='line'>  <span class="vi">@result</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="c1"># 比对@sc_data_yanghu和@sc_data_jianzhong，写的比较死，不是最灵活</span>
</span><span class='line'>  <span class="vi">@sc_data_yanghu</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@sc_data_jianzhong</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="n">to_f</span> <span class="o">!=</span> <span class="n">value</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span> <span class="o">||</span> <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="mi">1</span><span class="o">].</span><span class="n">to_f</span> <span class="o">!=</span> <span class="n">value</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>        <span class="vi">@result</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>        <span class="c1"># 现在想来可能这个delete(&#39;,&#39;)的处理放在上面可能比较好。</span>
</span><span class='line'>        <span class="vi">@result</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="n">to_f</span> <span class="o">-</span> <span class="n">value</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@result</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="mi">1</span><span class="o">].</span><span class="n">to_f</span> <span class="o">-</span> <span class="n">value</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>比对@sc_data_yanghu和@sc_data_jianzhong里面的数据，如果数据有出入的话，保存商家id至<code>@result</code>中，然后计算2份数据之间的差额，差额越大bug的可能性也越大，大概。。。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="sr">/^我将会生成校验报告并评估此次校验$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 本来想自动发email的，但是这个mail的依赖好像有冲突，求高人指点</span>
</span><span class='line'>  <span class="c1"># Mail.deliver do</span>
</span><span class='line'>  <span class="c1">#   from     &#39;qa-automation@baidu.com&#39;</span>
</span><span class='line'>  <span class="c1">#   to       &#39;lengyu@baidu.com&#39;</span>
</span><span class='line'>  <span class="c1">#   subject  &#39;【结算中心线上数据与建忠数据比对结果】&#39;</span>
</span><span class='line'>  <span class="c1">#   body     @result.to_s</span>
</span><span class='line'>  <span class="c1">#   # add_file &#39;/full/path/to/somefile.png&#39;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 打印结果</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="vi">@result</span>
</span><span class='line'>  <span class="c1"># 断言，@result应该为空。</span>
</span><span class='line'>  <span class="vi">@result</span><span class="o">.</span><span class="n">should</span> <span class="n">be_empty</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后看<code>@result</code>是否为空，不是的话，就需要断言。说明2份数据有出入。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用小黄瓜来做接口级自动化测试]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi/"/>
    <updated>2014-02-13T21:08:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用<code>小黄瓜</code>来实现接口级别的自动化测试。如果你还没有对小黄瓜有初步认识的话，推荐阅读我之前写的一篇<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">文章</a>。</p>

<!--more-->


<h1>运行自动化</h1>

<p>下载代码，解压，打开命令行，切换到解压后的文件夹中，运行<code>bundle install</code>。<br/>
运行<code>cucumber features/wgpc_check_kai.feature</code>，运行成功的话，应该能看见如下输出。</p>

<p><img src="http://i.imgur.com/ghYr3bJ.jpg" alt="" /></p>

<p>以及其他的一些case等等&hellip;</p>

<h1>feature文档</h1>

<p>用<code>小黄瓜</code>写测试case的第一步就是写case的feature文档。<br/>
例如：<code>cuke_oc\features\wgoc_check_kai.feature</code>。<br/>
<code>小黄瓜</code>的feature文档使用<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a>格式来更好的帮你理解，管理和维护你的case。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nt">@checkorder</span><span class="nf"></span>
</span><span class='line'><span class="k">Feature:</span><span class="nf"> Check Order</span>
</span><span class='line'><span class="nf">  为了保证订单的准确性，在提交订单之前，对订单进行验对。</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Background:</span><span class="nf"></span>
</span><span class='line'><span class="k">    Given </span><span class="nf">我根据&quot;</span><span class="s">./data/wgoc_cases/shipping_region.txt</span><span class="nf">&quot;设置配送范围</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario Outline:</span><span class="nf"> 验单逻辑</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">我根据 </span><span class="nv">&lt;mprpc_data_file&gt;</span><span class="nf"> 文件中的配置建立运费信息</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">我根据 </span><span class="nv">&lt;mock_data_file&gt;</span><span class="nf"> 文件中的配置制造mock商品信息</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">我从 </span><span class="nv">&lt;request_data_file&gt;</span><span class="nf"> 文件中读取某http请求</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">我用post方法发送该请求至oc的话</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">我将得到与 </span><span class="nv">&lt;response_data_file&gt;</span><span class="nf"> 文件中相同的json串</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Examples:</span><span class="nf"> case_1: 默认全国10块, 非促销商品验单成功（购买1件&amp;支持配送&lt;上海&amp;北京&amp;天津&gt;&amp;未绑定运费模板）</span><span class="k"></span>
</span><span class='line'><span class="k">    |</span><span class="nv"> mprpc_data_file</span><span class="k"> |</span><span class="nv"> mock_data_file</span><span class="k"> |</span><span class="nv"> request_data_file</span><span class="k"> |</span><span class="nv"> response_data_file</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> empty.json</span><span class="k"> |</span><span class="s"> check_mock_1.yaml</span><span class="k"> |</span><span class="s"> check_request_1.yaml</span><span class="k"> |</span><span class="s"> check_response_1.json</span><span class="k"> |</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Feature</code>关键词：简单介绍你要测试的feature。<code>Feature: Check Order</code>的下一行可以跟任意长度的更为详细的功能摘要。一个<code>Feature</code>能包含多个<code>Scenario</code>。（以上例子只有一个<code>Scenario</code>）</li>
<li><code>Backgroud</code>关键词：定义一个全局的setup的步骤。<code>Background</code>对应的代码，整个feature只运行一次。</li>
<li><code>Scenario Outline</code>关键词：配合<code>&lt;&gt;</code>括号内的变量与<code>Examples</code>关键词，用<code>Examples</code>下面的表格中定义的具体数值来对应到<code>&lt;&gt;</code>括号中的变量中的位置。（以上面为例，当这个<code>Scenario</code>被执行的时候，<code>&lt;mprpc_data_file&gt;</code>这个参数的数值，就会被<code>Examples</code>中，<code>mprpc_data_file</code>栏中的<code>empty.json</code>替代。）</li>
<li><code>Given</code>关键词：定义case执行时所要做的一些准备工作。</li>
<li><code>When</code>关键词：定义case执行时所要做一个关键动作。</li>
<li><code>Then</code>关键词：定义case执行后，校验工作，一般断言都放在这里。</li>
<li><code>@checkorder</code>关键词：其实这个也不能算是关键词，<code>@checkorder</code>定义了这个feature会使用名为<code>@checkorder</code>的一个hook。hook定义了这个feature在case级别的setup/teardown应该执行哪儿些代码。</li>
</ul>


<h1>code block生成</h1>

<p>有了feature文档以后，运行<code>cucumber features/wgpc_check_kai.feature</code>，<code>小黄瓜</code>会帮你生成如下各个关键词对应的code block。（在你还没有定义对应的steps.rb才会生成，参见<code>cuke_oc/features/step_definitions/check_kai_steps.rb</code>。文件命名关系不大，但是一般以steps结尾。）</p>

<p><img src="http://i.imgur.com/JqweeIf.jpg" alt="" /></p>

<p>复制粘帖以上<code>小黄瓜</code>的输出至<code>cuke_oc/features/step_definitions/foo_steps.rb</code>然后就可以开始填写代码了。当case运行时，会按序运行各个code block中的代码。使用除了英文以外的语言时，别忘记在文件顶端加上<code># encoding: utf-8</code></p>

<h1>代码详解</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我根据 (.*) 文件中的配置建立运费信息$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">mprpc_data_file</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@fid</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="vi">@mprpc_res</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="c1"># 从mprpc_data_file文件中读取这个case所需要的运费模板参数</span>
</span><span class='line'>  <span class="vi">@mprpc_params</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;./data/wgoc_cases/&#39;</span> <span class="o">+</span> <span class="n">mprpc_data_file</span><span class="p">))</span>
</span><span class='line'>  <span class="c1"># 向桩发送请求，生成运费模板</span>
</span><span class='line'>  <span class="vi">@mprpc_res</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">post</span> <span class="no">JSONRPC_SEND_POSTAGEAPI_ADDTEMPLATE_URI</span><span class="p">,</span> <span class="vi">@mprpc_params</span><span class="o">.</span><span class="n">to_json</span> <span class="k">unless</span> <span class="vi">@mprpc_params</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="c1"># 从返回中获得运费模板的id</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="vi">@mprpc_res</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="vi">@mprpc_res</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>    <span class="vi">@fid</span> <span class="o">=</span> <span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="vi">@mprpc_res</span><span class="o">.</span><span class="n">body</span><span class="p">))</span><span class="o">[</span><span class="s1">&#39;result&#39;</span><span class="o">][</span><span class="s1">&#39;result&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>向桩发送请求，并根据<code>mprpc_data_file</code>中的参数，生成运费模板。现在<code>mprpc_data_file</code>用的是yaml格式。使用了<a href="https://github.com/rest-client/rest-client">RestClient</a>这个<code>gem</code>来发送各种<code>http</code>请求。（什么是<a href="http://guides.rubygems.org/">gem</a>?）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我根据 (.*) 文件中的配置制造mock商品信息$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">mock_data_file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 从mock_data_file读取mock商品的参数</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;./data/wgoc_cases/&#39;</span> <span class="o">+</span> <span class="n">mock_data_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@mock_params</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="c1"># 把前面mprpc返回的delivery_id设定为mock商品的fid</span>
</span><span class='line'>  <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;queryInfo&#39;</span><span class="o">][</span><span class="s1">&#39;fid&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@fid</span> <span class="k">unless</span> <span class="vi">@fid</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="c1"># 向桩发送请求，生成mock商品的kv和queryInfo信息</span>
</span><span class='line'>  <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="no">SCAFFOLDING_CREATE_KV_URI</span><span class="p">,</span> <span class="ss">:params</span> <span class="o">=&gt;</span> <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;kv&#39;</span><span class="o">]</span> <span class="k">unless</span> <span class="o">!</span><span class="vi">@mock_params</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="s1">&#39;kv&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;kv&#39;</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>  <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="no">SCAFFOLDING_CREATE_PRODUCTAPI_QUERYINFO_URI</span><span class="p">,</span> <span class="ss">:params</span> <span class="o">=&gt;</span> <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;queryInfo&#39;</span><span class="o">]</span> <span class="k">unless</span> <span class="o">!</span><span class="vi">@mock_params</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="s1">&#39;queryInfo&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;queryInfo&#39;</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>向商品库的桩发送请求，并根据<code>mock_data_file</code>中的参数，制造mock商品。现在<code>mock_data_file</code>用的是yaml格式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我从 (.*) 文件中读取某http请求$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">request_data_file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 从request_data_file中读取验单所需的参数信息</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;./data/wgoc_cases/&#39;</span> <span class="o">+</span> <span class="n">request_data_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@request_params</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>读取<code>request_data_file</code>文件中定义的请求信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^我用post方法发送该请求至oc的话$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 向oc发送验单请求</span>
</span><span class='line'>  <span class="vi">@last_response</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="no">CHECK_REQUEST_URI</span><span class="p">,</span> <span class="ss">:params</span> <span class="o">=&gt;</span> <span class="vi">@request_params</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据刚刚读取的请求信息，给oc发送验单请求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="sr">/^我将得到与 (.*) 文件中相同的json串$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">response_data_file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 使用了Rspec提供的should的断言方法</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="vi">@last_response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;./data/wgoc_cases/&#39;</span> <span class="o">+</span> <span class="n">response_data_file</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>跟<code>response_data_file</code>中定义的预期的json串作比较。不相同的话就触发断言。</p>

<h1>总结</h1>

<p>有问题可发送邮件至<code>lengyu@baidu.com</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Capybara和Cucumber实现页面级别自动化]]></title>
    <link href="http://Fatman13.github.io/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/"/>
    <updated>2014-01-26T21:37:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用capybara/cucumber来实现页面级别的自动化。并将结合微购的订单流程做一个讲解。在这儿为大家强烈推讲下<a href="http://pragprog.com/book/hwcuc/the-cucumber-book">The Cucumber Book</a>以及<a href="http://pragprog.com/book/dhwcr/cucumber-recipes">Cucumber Recipes</a>这2本书。几乎包含了关于<code>小黄瓜</code>的一切。<a href="http://product.dangdang.com/23280484.html#ddclick?act=click&amp;pos=23280484_16_1_p&amp;cat=01.00.00.00.00.00&amp;key=Cucumber&amp;qinfo=&amp;pinfo=20_1_72&amp;minfo=&amp;ninfo=&amp;custid=&amp;permid=20140126101508135714985587192225073&amp;ref=http%3A%2F%2Fbook.dangdang.com%2F&amp;rcount=&amp;type=&amp;t=1390702656000">当当网</a>上也有购买，有兴趣的同学可以问我借阅。以下将这2本书简称为<code>小黄瓜全书</code>和<code>小黄瓜食谱</code>。</p>

<!--more-->


<h1>Capybara简介</h1>

<p>Capybara封装了众多帮助页面自动化的函数。极大的简化了开发流程。Capybara的API可参看<code>小黄瓜全书</code>中<code>15.3 The Capybara API</code>章节。</p>

<h1>Cucumber简介</h1>

<p>小黄瓜是一个强大的自动化测试框架。完善的文档，Gherkin式的测试文档，全局/Case级别的setup/teardown，配合Ruby庞大的gem库，支持各种格式report的生成，等等。</p>

<h1>软件安装</h1>

<p>请参看<code>小黄瓜全书</code>里面的Appendix 2: Installing cucumber的章节。以工作机为例，安装以下即可。<br/>
&ndash; <a href="http://railsinstaller.org/">RailsInstaller</a>（RailsInstaller包含了Ruby1.9.3，Bundler，Git等等众多Ruby开发工具。）<br/>
&ndash; <a href="https://github.com/adoxa/ansicon/downloads">ANSICON</a></p>

<h1>运行自动化</h1>

<p>下载代码，解压，打开命令行，切换到解压后的文件夹中，运行<code>bundle install</code>，修改<code>cuke_pc/features/step_definitions/cod_steps.rb</code>，把以下登录信息改为你自己的百度账号和密码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fill_in</span> <span class="s1">&#39;userName&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;在此输入你的百度账号&#39;</span>
</span><span class='line'><span class="n">fill_in</span> <span class="s1">&#39;TANGRAM__PSP_4__password&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;在此输入你的百度帐号密码&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行<code>cucumber features/wgpc_cod.feature</code>，自动化就跑起来了！</p>

<h1>代码讲解</h1>

<p>在这个<code>cucumber features/wgpc_cod.feature</code>自动化Case中，<br/>
代码都在<code>cuke_pc/features/step_definitions/cod_steps.rb</code>里面。为大家详解一下<code>cod_steps.rb</code>中的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我已登录用户中心$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 访问个人中心页面</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;http://zhixin.baidu.com/Login/index?module=onesite&amp;u=http%3A%2F%2Fcp01-testing-cbbs06.cp01.baidu.com%3A8888%2Fitem%3Fid%3D181835090&amp;from=&#39;</span>
</span><span class='line'>  <span class="c1"># 在登录页面中，输入自己的百度账号</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s1">&#39;userName&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;在此输入你的百度账号&#39;</span>
</span><span class='line'>  <span class="c1"># 输入自己百度账号密码</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s1">&#39;TANGRAM__PSP_4__password&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;在此输入你的百度帐号密码&#39;</span>
</span><span class='line'>  <span class="c1"># 点击登录</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="s1">&#39;TANGRAM__PSP_4__submit&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>visit</code>函数: 根据配置，自动打开网页浏览器，并访问参数中指定的url。<br/>
<code>fill_in</code>函数: 根据id,name或者label text找到输入框，并填写参数所指定的String。<br/>
<code>click_button</code>函数: 根据id,name或者label text找到按钮，并点击该按钮。<br/>
以上代码实现的是，首先打开火狐，进入个人中心页面，输入用户名密码，并点击登录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我在中间页对&quot;(.*?)&quot;商品下单:一$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 这个暂时不关注</span>
</span><span class='line'>  <span class="vi">@expected_time_range</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">.</span><span class="n">.</span> <span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="mi">600</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 点击立即购买</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;#detail-buy&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="c1"># 浏览器窗口最大化</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">maximize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>find</code>函数: 根据CSS Selector或者Xpath找到对应的元素。以便于更进一步的操作。<br/>
以上代码实现的是，在中间页，点击<code>立刻购买</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^我选取货到付款$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 根据lablel元素上的字，找到“货到付款”并点击</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s2">&quot;label&quot;</span><span class="p">,</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="sr">/\A货到付款\z/</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="c1"># 等待“提交订单”的出现</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;.order-summary-submit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 点击“提交订单”</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;.order-summary-submit&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="c1"># 通过xpath，找到查看所有订单按钮，并点击</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;//a[@href=&#39;/service/user/order/list&#39;]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码实现的是，在验单页面，点击<code>货到付款</code>，点击<code>提交订单</code>，点击<code>查看订单</code>。注意，如果提交订单失败的话，这个case就会在这儿挂掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="sr">/^个人中心订单状态被告更改为&quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 这个暂时不关注</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;(//td[@class=&#39;time&#39;])[1]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>  <span class="vi">@order_time</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;(//td[@class=&#39;time&#39;])[1]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="vi">@expected_time_range</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="vi">@order_time</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 使用xpath，找到之前下的订单，并比较订单状态是否是“等待发货”</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;(//span[@class=&#39; status_confirm&#39;])[1]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>should</code>函数: RSpec里面的一个断言的方法。<br/>
<code>have_content</code>函数: 判定元素中是否存在参数中的字段。<br/>
以上代码实现的是，回到个人中心后，比较最近的一个订单是不是处于<code>等待发货</code>状态，如果状态错误Case就会挂掉。</p>

<h1>总结</h1>

<p><code>Capybara/Cucumner</code>是一个有完善文档的，非常强大的测试框架。希望以后能用于主流程的保证。不知道医疗那边的同学需不需要？无论是测死链，或者是ajax也都完全没有问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Setup your personal VPN with Amazon EC2 for FREE]]></title>
    <link href="http://Fatman13.github.io/blog/2013/12/29/how-to-setup-your-personal-vpn-with-amazon-ec2-for-free/"/>
    <updated>2013-12-29T11:20:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/12/29/how-to-setup-your-personal-vpn-with-amazon-ec2-for-free</id>
    <content type="html"><![CDATA[<p>This tutorial will walk you through setting up a personal <a href="http://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol">PPTP</a> VPN server and connecting to it from a Windows Client. Using a VPN have merits like browsing the internet in relative privacy. Also new signups can use Amazon EC2 micro instance without paying for the first year.</p>

<!--more-->


<h1>Step 1: Get Set Up</h1>

<p>Follow the official <code>get set up</code> guide for Amazon EC2 <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html">here</a>. The intructions are more comprehensive, in my opinoin, than blog posts from Google search results.</p>

<h1>Step 2: Create EC2 Instance</h1>

<p>Follow <code>step 1: Launch an Instance</code> and <code>step 2: Connect to your Instance</code> of the offical <code>get started</code> guide for Amazon EC2 <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html">here</a>.<br/>
<strong>Note1:</strong> Instead of <strong>Select an Amazon Machine Image(AMI)</strong>, choose a <code>ubuntu 12.04 server</code> image.<br/>
<strong>Note2:</strong> The dafault accout for AMI images is <code>ec2-user</code>, however, for ubuntu images you have to use <code>ubuntu</code> to connect to your instance.<br/>
<strong>Note3:</strong> In the <code>AWS Management Console</code>, choose a regoin that is geograpgically closest to your location to have best browsing experience. I have chosen Singapore as shown below.</p>

<p><img src="http://Fatman13.github.io/images/ec2_region.jpg" width="233" height="317" title="1" ></p>

<p><strong>Note4:</strong> Below is the my security group settings for your reference.</p>

<p><img src="http://Fatman13.github.io/images/ec2_sg.jpg" width="613" height="253" title="1" ></p>

<h1>Step 3: Configure EC2 Instance</h1>

<p>Follow the guide on the offical Ubuntu documentation <a href="https://help.ubuntu.com/community/PPTPServer">here</a> to configure your ec2 instance into a PPTP server. Remember to right-click on your running instance in <code>AWS Management Console</code> and reboot your ec2 instance after you are done.</p>

<h1>Step 4.1: Connecting from a Windows 7 Client</h1>

<p>Open your Google Chrome, type in <code>chrome://settings/search#proxy</code>, hit <code>enter</code> and then click on <code>Change proxy settings</code> button. Click <code>new VPN(p)</code>. Enter either your ec2 instance public name or ip address as <code>internet address</code> and check the 3rd checkbox like shown below.</p>

<p><img src="http://Fatman13.github.io/images/ec2_conn.jpg" width="635" height="504" title="1" ></p>

<p>Click <code>next</code>, enter your VPN account name and password you have just setup in setp 3, click <code>next</code> and finally click <code>finish</code>. Now you should be able to see your VPN connection once you click the network icon in the notification area on your windows task bar. Right click on your VPN connection, go to <code>properties</code>, under <code>security tab</code>, configure everything the same as the screenshot below.</p>

<p><img src="http://Fatman13.github.io/images/vpn_conf.jpg" width="378" height="456" title="1" ></p>

<p>Now go ahead connect to your VPN, type in your account and password. Wait till the status turns into <code>Connected</code>.</p>

<p><img src="http://Fatman13.github.io/images/vpn_conn.jpg" width="278" height="393" title="1" ></p>

<p>Congratulations! You now have your own personal VPN.</p>

<h1>Welcome to the Internet!</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[乐高园游记]]></title>
    <link href="http://Fatman13.github.io/blog/2013/11/24/le-gao-yuan-you-ji/"/>
    <updated>2013-11-24T12:58:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/11/24/le-gao-yuan-you-ji</id>
    <content type="html"><![CDATA[<p>这次去了一趟传说中的LEGO LAND&copy;。记一篇游记。</p>

<!--more-->


<h1>题外话</h1>

<p><img src="http://Fatman13.github.io/images/Screenshot_gmap_sausalito.png" width="848" height="371" title="1" ></p>

<p>这个是<code>谷歌地图</code>，如果你拖拽街景小人，并放到地图上的话，是这个样子的。</p>

<p><img src="http://Fatman13.github.io/images/Screenshot_gmap_legoland.png" width="852" height="366" title="1" ></p>

<p>如果你拖拽街景小人至乐高园区内的话，街景的火柴人就会变成一乐高小人。挺有爱的。</p>

<h1>行程</h1>

<ul>
<li>11月12号驱车去<code>乐高宾馆</code>住一晚。</li>
<li>11月13号在园区内逛一天。</li>
</ul>


<h1>宾馆</h1>

<p><img src="http://Fatman13.github.io/images/WP_20131112_002.resized.jpg" width="700" height="394" title="1" ></p>

<p>开车开了好久，终于到<code>乐高宾馆</code>啦。</p>

<p><img src="http://Fatman13.github.io/images/WP_20131112_006.resized.jpg" width="700" height="394" title="1" ></p>

<p>总体感觉，没有他们广告里面的照片高级。。。房间是乐高城堡主题。还有海盗和另外一个什么主题的客房。</p>

<p><img src="http://Fatman13.github.io/images/WP_20131112_007.resized.jpg" width="700" height="394" title="1" ></p>

<p>这边有专门给小孩子睡的双层小床。</p>

<h1>游乐园</h1>

<p>正当我要准备进入乐高园时，令人难以置信的一幕发生了！！！！！！</p>

<p>我被告知乐高园每周2，3是不开门的。</p>

<h1>终&hellip;&hellip;</h1>

<p><img src="http://Fatman13.github.io/images/Screenshot_rage_c.png" width="350" height="284" title="1" ></p>

<h1>附录</h1>

<p>U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U</p>

<blockquote><p>We believe what we want to believe. It is all we ever do.<br/>
&mdash; <cite>Flemeth《<a href="http://en.wikipedia.org/wiki/Dragon_Age:_Origins">Dragon Age: Origin</a>》</cite></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[noisehush freedom BT700蓝牙耳机评测]]></title>
    <link href="http://Fatman13.github.io/blog/2013/11/13/noisehush-freedom-bt700lan-ya-er-ji-ping-ce/"/>
    <updated>2013-11-13T13:08:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/11/13/noisehush-freedom-bt700lan-ya-er-ji-ping-ce</id>
    <content type="html"><![CDATA[<p>最近买了一个<a href="http://www.amazon.com/NoiseHush-BT700-12266-Freedom-Bluetooth-Headphones/dp/B00EP7B800/ref=sr_1_2?ie=UTF8&amp;qid=1384377703&amp;sr=8-2&amp;keywords=noisehush+bt700">新耳机</a>。感觉还不错，写一个评测。</p>

<!--more-->


<h1>外观&amp;功能</h1>

<p><img src="http://Fatman13.github.io/images/IMAG0848.resized.jpg" width="600" height="339" title="1" ></p>

<p>盒子不错，简单大方。很硬。</p>

<p><img src="http://Fatman13.github.io/images/IMAG0852.resized.jpg" width="600" height="339" title="1" ></p>

<p>左耳，以及左耳上的功能键。</p>

<p><img src="http://Fatman13.github.io/images/IMAG0853.resized.jpg" width="600" height="339" title="1" ></p>

<p>最上：上一首；下一首；播放；暂停；音量+-<br/>
中间：usb mini接口（<em>充电用</em>）<br/>
最下：电源开关（<em>开机&mdash;&ndash;>长按3秒；关机&mdash;&ndash;>长按3秒；蓝牙搜索&mdash;&mdash;&ndash;>长按5秒</em>)</p>

<p><img src="http://Fatman13.github.io/images/IMAG0855.resized.jpg" width="600" height="339" title="1" ></p>

<p>右耳。</p>

<p><img src="http://Fatman13.github.io/images/IMAG0856.resized.jpg" width="600" height="339" title="1" ></p>

<p>耳朵内侧。</p>

<h1>兼容性</h1>

<p>经测试，以下设备都成功链接上了这个耳机。<br/>
* HTC Sensation<br/>
* Nokia Lumia 820<br/>
* System76 Gazelle-pro （Ubuntu 13.04）</p>

<h1>总体评价</h1>

<p>用下来感觉还是很不错的。第一次用蓝牙耳机，那种没有被一般耳机的那一根线牵着的感觉很好。当然本人不是对声音很敏感的人，所以也听不出好耳机跟坏耳机的区别。声音感觉过得去就行了。这个耳机戴在耳朵上的感觉也不会太紧。感觉开机后左耳的那个灯，晚上的话，会特别闪，可能要贴一张胶布遮住。由于2个耳朵是圆形的设计，所以并不能完全覆盖整个耳朵，所以隔音效果可能没有长方形的耳机好。再来就是有<a href="https://www.youtube.com/watch?v=QK8mJJJvaes">某一些视频</a>会有声音慢半拍的现象，但是经测试大多数情况还是正常的，比如说<a href="http://www.bilibili.tv/">b站</a>什么的。</p>

<h1>附录</h1>

<p>U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U</p>

<iframe width="640" height="360" src="http://Fatman13.github.io//www.youtube.com/embed/XeFxdkaFzRA" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
</feed>
