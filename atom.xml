<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fatman13]]></title>
  <link href="http://Fatman13.github.io/atom.xml" rel="self"/>
  <link href="http://Fatman13.github.io/"/>
  <updated>2014-05-24T21:36:37+08:00</updated>
  <id>http://Fatman13.github.io/</id>
  <author>
    <name><![CDATA[Fatman13]]></name>
    <email><![CDATA[tctctcly@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How-to: Deploy Rails 4 app from Windows dev environment using Capistrano 3]]></title>
    <link href="http://Fatman13.github.io/blog/2014/05/24/how-to-deploy-rails-4-app-from-windows-dev-environment-using-capistrano-3/"/>
    <updated>2014-05-24T21:26:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/05/24/how-to-deploy-rails-4-app-from-windows-dev-environment-using-capistrano-3</id>
    <content type="html"><![CDATA[<p>This post will be primarily sharing some gotchas when I went through this <a href="http://corlewsolutions.com/articles/article-10-how-to-deploy-rails-applications-using-capistrano-3-1-and-windows-7">post</a> for deploying to a Linux server from Windows development machines using capistrano 3.</p>

<!--more-->


<h1>Environment</h1>

<ul>
<li>Development on Windows 7</li>
<li>Deployment on <a href="http://www.aliyun.com/">aliyun ECS</a> Ubuntu 12.04 image</li>
<li>Rails 4</li>
<li>Capistrano 3</li>
</ul>


<h1>Sidenote</h1>

<ul>
<li>Capistrano will automatically run <code>rake db:migration</code> for you if you uncomment <code>require 'capistrano/rails/migrations'</code> in capfile.</li>
<li>Capistrano will automatically precompile assets for you if you uncomment <code>require 'capistrano/rails/assets'</code> in capfile.</li>
</ul>


<h1>fetch not working?</h1>

<p>When running <code>cap production git:check</code>, I always get something like the following error when I use a variable defined by <code>set</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:github_user</span><span class="p">,</span> <span class="s1">&#39;Fatman13&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;https://github.com/#{fetch(:github_user)}/foo.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span> <span class="no">Running</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">git</span> <span class="n">ls</span><span class="o">-</span><span class="n">remote</span> <span class="o">-</span><span class="n">h</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="c1">#{fetch(:github_user)}/foo.git on 114.***.***.***</span>
</span><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span> <span class="ss">Command</span><span class="p">:</span> <span class="p">(</span> <span class="no">GIT_ASKPASS</span><span class="o">=</span><span class="sr">/bin/e</span><span class="n">cho</span> <span class="no">GIT_SSH</span><span class="o">=</span><span class="sr">/tmp/</span><span class="n">foo</span><span class="o">/</span><span class="n">git</span><span class="o">-</span><span class="n">ssh</span><span class="o">.</span><span class="n">sh</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">git</span> <span class="n">ls</span><span class="o">-</span><span class="n">remote</span> <span class="o">-</span><span class="n">h</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="c1">#{fetch(:github_user)}/foo.git )</span>
</span><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span> <span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">962</span> <span class="n">seconds</span> <span class="n">with</span> <span class="nb">exit</span> <span class="n">status</span> <span class="mi">1</span> <span class="p">(</span><span class="n">failed</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span>        <span class="ss">bash</span><span class="p">:</span> <span class="o">-</span><span class="ss">c</span><span class="p">:</span> <span class="n">line</span> <span class="mi">0</span><span class="p">:</span> <span class="n">syntax</span> <span class="n">error</span> <span class="n">near</span> <span class="n">unexpected</span> <span class="n">token</span> <span class="sb">`(&#39;</span>
</span><span class='line'><span class="sb">DEBUG [39feea1e]        bash: -c: line 0: `</span><span class="p">(</span> <span class="no">GIT_ASKPASS</span><span class="o">=</span><span class="sr">/bin/e</span><span class="n">cho</span> <span class="no">GIT_SSH</span><span class="o">=</span><span class="sr">/tmp/</span><span class="n">deepot</span><span class="o">/</span><span class="n">git</span><span class="o">-</span><span class="n">ssh</span><span class="o">.</span><span class="n">sh</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">git</span> <span class="n">ls</span><span class="o">-</span><span class="n">remote</span> <span class="o">-</span><span class="n">h</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="c1">#{fetch(:github_user)}/foo.git )&#39;</span>
</span><span class='line'><span class="no">DEBUG</span> <span class="o">[</span><span class="mi">39</span><span class="n">feea1e</span><span class="o">]</span> <span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">962</span> <span class="n">seconds</span> <span class="n">with</span> <span class="nb">exit</span> <span class="n">status</span> <span class="mi">1</span> <span class="p">(</span><span class="n">failed</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have to ditch <code>fetch</code> method and write something like&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;https://github.com/Fatman13/foo.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>No such file to load &mdash; bcrypt</h1>

<p>Capistrano will try to precompile assets at somepoint while running <code>cap production deploy</code>. It kept throwing an error saying <code>No such file to load -- bcrypt</code>. I found a comment from <a href="http://railscasts.com/episodes/335-deploying-to-a-vps?view=comments">Railscast</a> solved my problem.</p>

<blockquote><p>I had this issue. I develop on Windows 7, and certain gems have windows-specific versions. I went into my Gemfile.lock and removed all &ldquo;x86-mingw32&rdquo; in the gem version numbers. After commiting the changes and deploying again, it worked. I also had this problem with postgres and the pg gem.
(by <a href="https://github.com/jdresner">jdresner</a>)</p></blockquote>

<h1>References</h1>

<ul>
<li>[1] My <a href="https://github.com/Fatman13/deepot/blob/master/Gemfile">gemfile</a>.</li>
<li>[2] Corlew solutions&rsquo;s <a href="http://corlewsolutions.com/articles/article-10-how-to-deploy-rails-applications-using-capistrano-3-1-and-windows-7">How-To Deploy Rails Applications Using Capistrano 3.1 and Windows 7</a></li>
<li>[3] Corlew solutions&rsquo;s <a href="http://corlewsolutions.com/articles/article-11-guide-to-setting-up-ssh-on-windows-7">Guide To Setting Up SSH on Windows 7</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4 strong parameter gotcha for beginners]]></title>
    <link href="http://Fatman13.github.io/blog/2014/05/24/rails4-strong-parameter-gotcha-for-beginners/"/>
    <updated>2014-05-24T21:24:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/05/24/rails4-strong-parameter-gotcha-for-beginners</id>
    <content type="html"><![CDATA[<p><code>Rails 4</code> gotcha for noobies(like me) &mdash; Strong Parameters</p>

<!--more-->


<p><code>Rails 4</code> now comes with <a href="https://github.com/rails/strong_parameters">strong_parameters</a> gem as part of standard installation now. For example if you run <code>rails g scaffold product name price:decimal</code>, the following will be generated in <code>app/controllers/products_controller.rb</code> under <code>private</code> methods section.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Never trust parameters from the scary internet, only allow the white list through.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">product_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:product</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:price</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the comments suggested, <code>product_params</code> will only allow a whitelist of product attributes. This is done by using <code>permit</code> method as shown above.</p>

<p>Now the gotcha part&hellip; When you add new columns using <code>rails g migration add_stock_to_product stock:integer</code>, <code>rake db:migrate</code>, changing the corresponding scaffold <code>html.erb</code> files. You expect the new product attribute <code>stock</code> to work, but it won&rsquo;t. You still need to add <code>:stock</code> hash to <code>permit</code> method like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Never trust parameters from the scary internet, only allow the white list through.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">product_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:product</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:stock</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I kept forgetting adding new attribute to <code>permit</code>. Thus render controller methods not recognizing new attributes. It got me twice, so putting a note here. Hopefully helping someone on the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[顾妈妈网一期试运营版正式上线]]></title>
    <link href="http://Fatman13.github.io/blog/2014/04/18/gu-ma-ma-wang-yi-qi-shi-yun-ying-ban-zheng-shi-shang-xian/"/>
    <updated>2014-04-18T21:44:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/04/18/gu-ma-ma-wang-yi-qi-shi-yun-ying-ban-zheng-shi-shang-xian</id>
    <content type="html"><![CDATA[<p>公告，顾妈妈网一期试运行版上线啦。大家也快来<a href="gumama13.com">访问</a>吧。非常可惜<code>gumama.com</code>这个域名被人捷足先登了。好像是一个叫<code>谷妈妈</code>的婚庆网站。在下只能屈就于<code>gumama13.com</code>这个域名了。现在随便写下点什么。</p>

<!--more-->


<h1>流量统计</h1>

<p><img src="http://i.imgur.com/u4MlWXT.jpg" alt="" /></p>

<p>使用<a href="http://www.google.com/analytics/">Google Analytics</a>统计的第一天的流量。不过由于<code>Rails 4</code>自带的<code>turbo link</code>功能，不一定每次翻页都统计进去了。尝试了<code>SO</code>上<a href="http://stackoverflow.com/questions/18632644/google-analytics-with-rails-4">这个</a>答案。但是好像没有起到作用。</p>

<h1>部署</h1>

<p>这次部署使用了<a href="http://www.aliyun.com/?utm_medium=text&amp;utm_source=bdbrand&amp;utm_campaign=bdbrand">阿里云</a>。用下来真的挺好。而且阿里在使用百度推广的时候确实也挺精明。在大搜中搜索例如<code>Azure</code>，<code>ucloud</code>等等其他云服务供应商的时候，阿里故意买这些敏感词汇，然后打出自己的广告。</p>

<p><img src="http://i.imgur.com/S3PtAJL.jpg" alt="" /></p>

<p>搜索&#8221;Azure&#8221;。</p>

<p><img src="http://i.imgur.com/a4456Kx.jpg" alt="" /></p>

<p>搜索&#8221;uCloud&#8221;</p>

<p>而且<code>阿里云</code>在同类型云服务提供商中间，确实有价格优势，一个月55元。1核CPU，512MB内存，20G硬盘，1MBps网络流量，<code>Ubuntu 12.04</code>，对一个初出茅庐的小网站，是绰绰有余了。阿里杭州机房的响应速度也是良好。在用<code>passenger</code>部署我的<code>Rails 4</code>应用的时候，<code>passenger</code>提示我最好有1G内存，并且给了增加<code>swap</code>内存的指令。阿里云机器默认没有<code>swap</code>内存，不过使用root之后倒也改成功了。不知道是不是阿里云的初衷。</p>

<h1>题外话</h1>

<p>推荐一个4月神番，<a href="http://comic.letv.com/zt/pingpongbili/index.shtml#p1">乒乓</a>。就第一集来看，在下非常喜欢这部片子。鄙人总结了一些该番的看点。虽然都是一些商业片惯用的手法，但是运用的恰到好处。</p>

<h4>&mdash;&ndash;> 剧透分割线 &lt;&mdash;&ndash;</h4>

<ul>
<li>猪脚不苟言笑，但是有个外号叫&#8221;smile&#8221;</li>
<li>片子开头和当中2段<code>教练</code>和<code>山田队长</code>的对话，埋下了很多伏笔。不经意间带过了很多事情。特别是开头那段对话，后面<code>阿扁</code>被<code>China</code>打败时，让人不禁有“哇~”的感觉。</li>
<li>分镜和<code>BGM</code>也是一流。（从分镜就能感觉到制作满满的诚意）</li>
<li>人物各种幽默的对话，在CV的演绎下，感觉特别好。这个<code>China</code>的教练的CV很好，<code>China</code>的CV一般。</li>
<li><code>12:58</code>和<code>13:17</code>日本教练的细节表情。<code>16:32</code>天空中有鸟飞过。</li>
<li><code>China</code>和<code>阿扁</code>的对局很燃！</li>
<li>对局后<code>China</code>的自我评价，让人对角色的好感度上升很多。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber小黄瓜页面级自动化测试入门教程]]></title>
    <link href="http://Fatman13.github.io/blog/2014/03/12/cucumberxiao-huang-gua-ye-mian-ji-zi-dong-hua-ce-shi-ru-men-jiao-cheng/"/>
    <updated>2014-03-12T20:44:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/03/12/cucumberxiao-huang-gua-ye-mian-ji-zi-dong-hua-ce-shi-ru-men-jiao-cheng</id>
    <content type="html"><![CDATA[<p>之前也写了<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">一篇</a>小黄瓜页面级自动化测试的教程，但是感觉写的可能不是最好。再尝试写一篇入门级别的页面自动化教程。源代码在<a href="https://github.com/Fatman13/cuke_midpage">这里</a>。</p>

<!--more-->


<h1>自动化测试对象</h1>

<p>这段<a href="https://github.com/Fatman13/cuke_midpage">源代码</a>主要自动化测试了<code>百度微购</code>页面上的几个链接是否为死链。</p>

<h1>使用代码</h1>

<ul>
<li>首先<code>git clone https://github.com/Fatman13/cuke_midpage.git</code>。</li>
<li><code>cd cuke_midpage</code>进入刚下载的文件夹中。</li>
<li>运行<code>bundle install</code>。</li>
<li>跑自动化case运行<code>cucumber</code>。（你应该能看到小黄瓜打开火狐，并验证给予的链接是否是死链）</li>
</ul>


<h1>源代码结构</h1>

<p>小黄瓜大致文件结构如下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>D:.
</span><span class='line'>└─features
</span><span class='line'>    ├─step_definitions
</span><span class='line'>    └─support</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>features</code>文件夹：主要存放<code>.feature</code>文档。是每个测试case的文字解释。</li>
<li><code>step_definition</code>文件夹：主要存放<code>.rb</code>文件。每个case具体执行的代码，都应该放在这里。</li>
<li><code>support</code>文件夹：主要存放<code>env.rb</code>。主要定义一个环境变量。所有<code>require</code>都可以放在这儿里。因为<code>小黄瓜</code>在运行测试前，一定会先运行<code>env.rb</code>这个文件。</li>
</ul>


<p>如上所示，开发者只需将对应的<code>.feature</code>，<code>.rb</code>文件等等，按照小黄瓜约定，放入对应的文件夹中。运行<code>cucumber</code>时，小黄瓜就会自动在对应的文件夹中找运行case所需的代码。</p>

<h1>feature文档讲解</h1>

<p>作为一个<a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>行为驱动测试框架，小黄瓜会逼迫你写一些文档。给测死链case写一个feature文档可能略显<code>鸡肋</code>。这里主要是作为一个简单的例子做讲解一下<code>features/wgmp_link.feature</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> 中间页死链</span>
</span><span class='line'><span class="nf">  为了保证中间页没有死链。</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario Outline:</span><span class="nf"> 测死链（Capybara）</span>
</span><span class='line'><span class="k">    When </span><span class="nf">我访问&quot;</span><span class="s">http://weigou.baidu.com</span><span class="nf">&quot;并点击</span><span class="nv">&lt;some_link&gt;</span><span class="nf">链接时</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">页面状态应该为&quot;</span><span class="s">200</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Examples:</span><span class="nf"> 点这些</span><span class="k"></span>
</span><span class='line'><span class="k">      |</span><span class="nv"> some_link</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> 团购</span><span class="k"> |</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="nt">@new</span><span class="nf">   </span>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario Outline:</span><span class="nf"> 测死链（http client）</span>
</span><span class='line'><span class="k">    When </span><span class="nf">我访问</span><span class="nv">&lt;some_link&gt;</span><span class="nf">链接时</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">我得到的页面状态应该为&quot;</span><span class="s">200</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Examples:</span><span class="nf"> 点这些</span><span class="k"></span>
</span><span class='line'><span class="k">      |</span><span class="nv"> some_link</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> http://weigou.baidu.com/</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> http://weigou.baidu.com/topic/food</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> http://weigou.baidu.com/topic/beauty</span><span class="k"> |</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>feature</code>文档使用的是<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gerkins</a>的语法。以上这篇<code>feature</code>文档，使用了<code>Scenario Outline:</code>关键词，写了2个case。第一个是使用<code>Capybara</code>测死链，第二个是直接使用<code>http</code>客户端测死链。<code>Given</code>，<code>When</code>，<code>Then</code>三个关键词可以用来定义一个case所需要走的一个流程。（这个例子中省略了<code>Given</code>）这三个关键词后面的话都是可以根据case的需求改写的。<code>小黄瓜</code>会用这些话，用正则表达式自动对应到<code>feature/step_definitions/link_steps.rb</code>中每句话对应的<code>code block</code>中，并在测试时，运行每句话所对应的代码。</p>

<h1>代码讲解</h1>

<p>接下来讲解一下<code>feature/step_definitions/link_steps.rb</code>中的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使用Capybara</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^我访问&quot;(.*?)&quot;并点击(.*)链接时$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 正则不仅将When关键词的话对应到这个code block中，</span>
</span><span class='line'>  <span class="c1"># 还能从那句话中读取参数。</span>
</span><span class='line'>  <span class="c1"># arg1的值是&quot;http://weigou.baidu.com&quot;</span>
</span><span class='line'>  <span class="c1"># arg2的值是&quot;团购&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># visit是capybara封装的一个函数。</span>
</span><span class='line'>  <span class="c1"># 他会自动打开火狐，并访问arg1。 </span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">arg1</span>
</span><span class='line'>  <span class="c1"># find是capybara封装的一个函数。</span>
</span><span class='line'>  <span class="c1"># 这里通过html的a元素上的text找到了这个a元素，</span>
</span><span class='line'>  <span class="c1"># 并将他存到@elem变量中。</span>
</span><span class='line'>  <span class="vi">@elem</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="sr">/\A</span><span class="si">#{</span><span class="n">arg2</span><span class="si">}</span><span class="sr">\z/</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^页面状态应该为&quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 点击该链接</span>
</span><span class='line'>  <span class="vi">@elem</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使用http client</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^我访问(.*)链接时$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 由于在feature文档中使用了examples关键词</span>
</span><span class='line'>  <span class="c1"># 这里arg1分别对应了</span>
</span><span class='line'>  <span class="c1"># &quot;http://weigou.baidu.com/&quot;</span>
</span><span class='line'>  <span class="c1"># &quot;http://weigou.baidu.com/topic/food&quot;</span>
</span><span class='line'>  <span class="c1"># &quot;http://weigou.baidu.com/topic/beauty&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg1</span>
</span><span class='line'>  <span class="c1"># 直接使用http客户端，向每个arg1发送get请求。</span>
</span><span class='line'>  <span class="vi">@response</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="n">arg1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^我得到的页面状态应该为&quot;(.*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg1</span>
</span><span class='line'>  <span class="c1"># 检查页面status是不是200。</span>
</span><span class='line'>  <span class="vi">@response</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里可以清楚的看到，在<code>feature</code>文档中，<code>When</code>和<code>Then</code>后面跟的话，都一一对应了一块代码。在运行自动化case时，他们会按照<code>feature</code>文档中每个<code>Scenario</code>的顺序，依次执行每一段对应的代码。</p>

<h1>附录</h1>

<ul>
<li>如有问题可以发送邮件至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</li>
<li><a href="https://s3.amazonaws.com/macslow/index.html">这个</a>挺有意思。</li>
</ul>


<object data="https://s3.amazonaws.com/macslow/clock7.svg?w=3&amp;h=3" id="clock1" type="image/svg+xml"></object>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Jacoco远程统计tomcat服务的覆盖率]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/27/ru-he-shi-yong-jacocoyuan-cheng-tong-ji-tomcatfu-wu-de-fu-gai-lu/"/>
    <updated>2014-02-27T20:18:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/27/ru-he-shi-yong-jacocoyuan-cheng-tong-ji-tomcatfu-wu-de-fu-gai-lu</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用<code>Jacoco</code>生成远程<code>tomcat</code>服务的覆盖率报告。<br/>
(<em>注：使用<code>jacoco</code>打开远程服务端口，有一定安全风险。</em>)</p>

<!--more-->


<h1>软件安装</h1>

<ul>
<li><a href="http://ant.apache.org/bindownload.cgi">Ant</a></li>
<li><a href="http://www.eclemma.org/jacoco/">Jacoco</a></li>
</ul>


<h1>远程Tomcat服务配置</h1>

<ul>
<li><code>sh shutdown.sh</code>先关闭<code>tomcat</code>服务。</li>
<li>修改<code>bin/catalina.sh</code>中<code>JAVA_OPTS</code>的配置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># -javaagent: 的后面跟jacoco的安装路径</span>
</span><span class='line'><span class="c"># includes= 选项，选择你要覆盖率的服务</span>
</span><span class='line'><span class="c"># port= 选项，选择你要打开的端口</span>
</span><span class='line'><span class="c"># address= 选项，tomcat服务所在机器的ip地址（如果想在跟tomcat服务同一台机器上执行ant任务的话，需要改为127.0.0.1）</span>
</span><span class='line'><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;-javaagent:/path/to/your/jacoco_0.6.4/lib/jacocoagent.jar=includes=com.baidu.*,output=tcpserver,port=8893,address=10.81.14.77&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>sh startup.sh</code>重新启动<code>tomcat</code>服务。</li>
</ul>


<h1>本地Ant任务配置</h1>

<ul>
<li>配置<code>build.xml</code>。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">name=</span><span class="s">&quot;Lengyu&quot;</span> <span class="na">xmlns:jacoco=</span><span class="s">&quot;antlib:org.jacoco.ant&quot;</span> <span class="na">default=</span><span class="s">&quot;jacoco&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--Jacoco的安装路径--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jacocoantPath&quot;</span> <span class="na">value=</span><span class="s">&quot;/home/work/software/jacoco_0.6.4/lib/jacocoant.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--最终生成.exec文件的路径，Jacoco就是根据这个文件生成最终的报告的--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jacocoexecPath&quot;</span> <span class="na">value=</span><span class="s">&quot;/home/work/local/hudson_home/workspace/wg_merchant_oc_regression/jacoco.exec&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--生成覆盖率报告的路径--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;reportfolderPath&quot;</span> <span class="na">value=</span><span class="s">&quot;E:/Libs/coverage_ant_task/report/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--远程tomcat服务的ip地址--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;server_ip&quot;</span> <span class="na">value=</span><span class="s">&quot;10.81.14.77&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--前面配置的远程tomcat服务打开的端口，要跟上面配置的一样--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;server_port&quot;</span> <span class="na">value=</span><span class="s">&quot;8893&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--源代码路径--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;checkOrderSrcpath&quot;</span> <span class="na">value=</span><span class="s">&quot;E:/Src/ordercenter/ordercenter-biz/src/main/java/&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--.class文件路径--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;checkOrderClasspath&quot;</span> <span class="na">value=</span><span class="s">&quot;E:/Src/ordercenter/ordercenter-biz/target/classes/com/baidu/ordercenter/service/Impl&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--让ant知道去哪儿找Jacoco--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;taskdef</span> <span class="na">uri=</span><span class="s">&quot;antlib:org.jacoco.ant&quot;</span> <span class="na">resource=</span><span class="s">&quot;org/jacoco/ant/antlib.xml&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;classpath</span> <span class="na">path=</span><span class="s">&quot;${jacocoantPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/taskdef&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--dump任务:</span>
</span><span class='line'><span class="c">      根据前面配置的ip地址，和端口号，</span>
</span><span class='line'><span class="c">      访问目标tomcat服务，并生成.exec文件。--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;dump&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;jacoco:dump</span> <span class="na">address=</span><span class="s">&quot;${server_ip}&quot;</span> <span class="na">reset=</span><span class="s">&quot;false&quot;</span> <span class="na">destfile=</span><span class="s">&quot;${jacocoexecPath}&quot;</span> <span class="na">port=</span><span class="s">&quot;${server_port}&quot;</span> <span class="na">append=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">&lt;!--jacoco任务:</span>
</span><span class='line'><span class="c">      根据前面配置的源代码路径和.class文件路径，</span>
</span><span class='line'><span class="c">      根据dump后，生成的.exec文件，生成最终的html覆盖率报告。--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;report&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;delete</span> <span class="na">dir=</span><span class="s">&quot;${reportfolderPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${reportfolderPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nt">&lt;jacoco:report&gt;</span>
</span><span class='line'>          <span class="nt">&lt;executiondata&gt;</span>
</span><span class='line'>              <span class="nt">&lt;file</span> <span class="na">file=</span><span class="s">&quot;${jacocoexecPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/executiondata&gt;</span>
</span><span class='line'>              
</span><span class='line'>          <span class="nt">&lt;structure</span> <span class="na">name=</span><span class="s">&quot;JaCoCo Report&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;group</span> <span class="na">name=</span><span class="s">&quot;Check Order related&quot;</span><span class="nt">&gt;</span>           
</span><span class='line'>                  <span class="nt">&lt;classfiles&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;${checkOrderClasspath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/classfiles&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;sourcefiles</span> <span class="na">encoding=</span><span class="s">&quot;gbk&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;${checkOrderSrcpath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/sourcefiles&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/group&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/structure&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nt">&lt;html</span> <span class="na">destdir=</span><span class="s">&quot;${reportfolderPath}&quot;</span> <span class="na">encoding=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>         
</span><span class='line'>      <span class="nt">&lt;/jacoco:report&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>生成覆盖率报告</h1>

<ul>
<li>执行<code>ant dump</code>。成功的话，应会有如下输出。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[work@st01-ecom-jn2.st01.baidu.com ant]$ ant dump
</span><span class='line'>Buildfile: /home/work/local/hudson_home/workspace/wg_merchant_oc_regression/ant/build.xml
</span><span class='line'>
</span><span class='line'>dump:
</span><span class='line'>[jacoco:dump] Connecting to /10.81.14.77:8893
</span><span class='line'>[jacoco:dump] Dumping execution data to /home/work/local/hudson_home/workspace/wg_merchant_oc_regression/jacoco.exec
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>Total time: 0 seconds
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后执行<code>ant report</code>。<code>jacoco</code>就会在你指定的路径生成覆盖率报告了。</li>
</ul>


<h1>附录</h1>

<ul>
<li>更多关于<code>Jacocoagent</code>以及各种<code>task</code>可以参考<a href="http://www.eclemma.org/jacoco/trunk/doc/ant.html">官方文档</a></li>
<li><code>Jenkins</code>的<code>Jacoco plugin</code>可以根据<code>.exec</code>文件直接生成覆盖率报告，并在<code>Jenkins</code>中生成图表等等。那样的话，<code>ant report</code>这个任务就没用了。</li>
<li>如有问题，可发email至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在没有外网的机器上安装gem]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/27/ru-he-zai-mei-you-wai-wang-de-ji-qi-shang-an-zhuang-gem/"/>
    <updated>2014-02-27T20:16:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/27/ru-he-zai-mei-you-wai-wang-de-ji-qi-shang-an-zhuang-gem</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何在没有外网的机器上安装<code>Cucumber</code>小黄瓜自动化测所需的<code>gem</code>库。</p>

<!--more-->


<h1>1. 软件安装（Jenkins机器）</h1>

<ul>
<li>安装<code>Jumbo</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash -c "$( curl http://jumbo.baidu.com/install_jumbo.sh )"; source ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装<code>Ruby 1.9.3</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jumbo install ruby</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装<code>svn</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jumbo install subversion</span></code></pre></td></tr></table></div></figure>


<h1>2. 在无外网的Jenkins服务器（或者Slave机）上安装Gem</h1>

<ul>
<li>在jenkins机器上，选择一个合适的文件夹。从<code>svn</code>上下载小黄瓜所依赖的<code>gem</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn export https://svn.baidu.com/app-test/ecom/shifen/sf-crm/trunk/weigou/cuke_gems/</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>cd cuke_gems</code>至刚刚下载的文件夹中。运行如下指令，会先安装<code>bundler</code>这个<code>gem</code>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install --local bundler-1.3.4.gem</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装完成后，运行以下指令。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install --local </span></code></pre></td></tr></table></div></figure>


<h1>3. 添加新的Gem</h1>

<ul>
<li>如果需要添加新的gem的话，找一台有外网的机器。（如果Jenkins或者Slave机器是Linux机器，就得用Linux机器，是Windows就得用Windows机器。）</li>
<li>先<code>co</code>之前的<code>gem</code>库。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn co https://svn.baidu.com/app-test/ecom/shifen/sf-crm/trunk/weigou/cuke_gems/</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>cd cuke_gems</code>至刚下载的文件夹中，修改<code>Gemfile</code>，添加新的<code>gem</code>。（最好能选定<code>gem</code>的版本）例如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span> <span class="s1">&#39;1.7.3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bundler&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 添加新Gem示例 &lt;------</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;new_gem&#39;</span><span class="p">,</span> <span class="s1">&#39;0.0.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber&#39;</span><span class="p">,</span> <span class="s1">&#39;1.2.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="s1">&#39;2.11.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;httparty&#39;</span><span class="p">,</span> <span class="s1">&#39;0.8.3&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rest-client&#39;</span><span class="p">,</span> <span class="s1">&#39;1.6.7&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加完成后，运行<code>bundle install</code>，然后运行<code>bundle package</code>。这样<code>bundler</code>就会生成新添加的<code>gem</code>的<code>.gem</code>文件以提供本地安装了。</li>
<li>把更新后的代码提交至<code>svn</code>。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">svn</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;add new gem(s)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后重复上文第2大点中的步骤，就能更新Jenkins机器上的<code>gem</code>库了。</li>
</ul>


<h1>附录</h1>

<ul>
<li><code>bundler</code>是给<code>gem</code>打包的一个<code>gem</code>，所以在上文中先安装了<code>bundler</code>，然后让<code>bundler</code>去本地安装其他的<code>gem</code>。</li>
<li>更多关于<code>Gemfile</code>的使用方法，可以参考<a href="http://bundler.io/">官方网站</a>。</li>
<li>所有<code>.gem</code>文件都可以在<a href="http://rubygems.org/">rubygems.org</a>上下载到。其中包括<code>gem</code>的所有历史版本。</li>
<li>如有更多问题，发送email至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试桩使用指南]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/19/ce-shi-zhuang-shi-yong-zhi-nan/"/>
    <updated>2014-02-19T21:35:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/19/ce-shi-zhuang-shi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<p>本文将简单介绍<code>测试桩</code>现有的一些功能以及如何使用<code>测试桩</code>提供的<code>API</code>接口。</p>

<!--more-->


<h1>测试桩简介</h1>

<p>现在测试桩使用<code>Django</code>框架，大致分为<code>mysite</code>，<code>jsonrpc</code>，<code>scaffolding</code>这3个模块。<br/>
（注：在项目的根目录使用了<code>python manage.py startapp [模块名]</code>这个命令创建了这些模块，模块化<code>Django</code>提供的服务）</p>

<ul>
<li><code>mysite</code>是项目的第一个模块。主要提供了kv以及商品库的几个接受jsonrpc请求的接口。<code>mysite</code>下的<code>urls.py</code>是定义<code>测试桩</code>各项API接口url的主入口。</li>
<li><code>jsonrpc</code>提供了几个发送jsonrpc请求的接口（mcpack封装），还有发送通用的jsonrpc请求的接口。（无mcpack封装，vanilla版jsonrpc请求）</li>
<li><code>scaffolding</code>主要负责提供制造各种mock商品的接口，便于自动化case的setup中，制造case所需的mock商品。</li>
</ul>


<h1>Chrome插件</h1>

<p>使用<code>chrome</code>的<code>cRest Client</code>插件可以手动向<code>测试桩</code>发送各种请求。</p>

<p><img src="http://i.imgur.com/oJEztF2.jpg" alt="" /></p>

<h1>Jsonrpc工具</h1>

<p>输入<code>测试桩</code>商品库地址<code>http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</code>，选择api，method，并填入请求参数就可以手动给<code>测试桩</code>发送jsonrpc请求了。jsonrpc工具可在附件中下载。</p>

<p><img src="http://i.imgur.com/ALJTrbi.jpg" alt="" /></p>

<h1>1. Mysite接口</h1>

<p>（可试用jsonrpc工具手动访问这些接口，或者使用renliang开发的jsonrpc-client）</p>

<h3>1.1 ProductAPI/queryInfo 获取商品详情</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</a></li>
<li>ProductAPI</li>
<li>queryInfo</li>
<li>{&ldquo;products&rdquo;:[&ldquo;183019616&rdquo;],&ldquo;uc_id&rdquo;:29844}</li>
</ul>


<h3>1.2 PromotionAPI/query 获取促销详情</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</a></li>
<li>PromotionAPI</li>
<li>query</li>
<li>{&ldquo;promotion_id&rdquo;:&ldquo;3000&rdquo;,&ldquo;uc_id&rdquo;:29844}</li>
</ul>


<h3>1.3 StockAPI/updateIncrement 增减库存</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</a></li>
<li>StockAPI</li>
<li>updateIncrement</li>
<li>{&ldquo;uc_id&rdquo;:6195321,&ldquo;products&rdquo;:[{&ldquo;product_id&rdquo;:&ldquo;600528576&rdquo;,&ldquo;items&rdquo;:[{&ldquo;stock&rdquo;:-2,&ldquo;region&rdquo;:&ldquo;全国&rdquo;}]}]}</li>
</ul>


<h3>1.4 PromotionAPI/updateStockInc 增减促销库存</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/api</a></li>
<li>PromotionAPI</li>
<li>updateStockInc</li>
<li>{&ldquo;uc_id&rdquo;: 29844,&ldquo;product_outerid&rdquo;:&ldquo;F47&rdquo;,&ldquo;promotion_id&rdquo;:37,&ldquo;stock_inc&rdquo;:5}</li>
</ul>


<h1>2. kv接口</h1>

<p>（kv接口主要应用于验单时，查询该商品是否存在。新kv接口是一个新的技术优化，与老kv接口还并存着。。。）</p>

<h3>2.1 新kv接口</h3>

<p><a href="http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/midpage/product/details?ids=183019611">http://st01-ecom-jn2.st01.baidu.com:8890/serviceAPI/midpage/product/details?ids=183019611</a></p>

<h3>2.2 老kv接口</h3>

<p><a href="http://st01-ecom-jn2.st01.baidu.com:8890/api/midpage/product/details?ids=183019611">http://st01-ecom-jn2.st01.baidu.com:8890/api/midpage/product/details?ids=183019611</a></p>

<h1>3. Scaffolding接口</h1>

<p>（主要用于各种商品库接口的mock数据的制造，便于自动化case的setup。）</p>

<h3>3.1 制造kv接口的返回值</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/kv?product_id=77582589&amp;stock=0&amp;promotionId=1013">http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/kv?product_id=77582589&amp;stock=0&amp;promotionId=1013</a></li>
<li>(可以跟更多参数。参照<code>mysite/response/new_KV/new_kv_template.json</code>。)</li>
</ul>


<h3>3.2 制造老kv接口的返回值（老kv）</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/oldkv?product_id=77582589&amp;merchantId=298440&amp;newPrice=100.00">http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/oldkv?product_id=77582589&amp;merchantId=298440&amp;newPrice=100.00</a></li>
<li>(可以跟更多参数。参照<code>mysite/response/KV/kv_template.json</code>。)</li>
</ul>


<h3>3.3 制造queryInfo接口的返回值</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/ProductAPI/queryInfo?product_id=77582589&amp;active=0&amp;fid=1157">http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/ProductAPI/queryInfo?product_id=77582589&amp;active=0&amp;fid=1157</a></li>
<li>(可以跟更多参数。参照<code>mysite/response/ProductAPI/queryInfo/queryInfo_template.json</code>。)</li>
</ul>


<h3>3.4 制造query接口的返回值</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/PromotionAPI/query?product_id=77582589&amp;active=0&amp;fid=1157">http://st01-ecom-jn2.st01.baidu.com:8890/scaffolding/create/PromotionAPI/query?product_id=77582589&amp;active=0&amp;fid=1157</a></li>
<li>(可以跟更多参数。参照<code>mysite/response/PromotionAPI/query/query_template.json</code>。)</li>
</ul>


<h1>4. Jsonrpc接口</h1>

<p>（用post方法，带着参数，访问这些接口。<code>测试桩</code>会代为发送jsonrpc请求，相当于一个接口级的jsonrpc工具。推荐使用上文提到的Chrome中<code>cRest Client</code>这个插件。使用post方法的话，Request entity中放请求的json串，或者其他参数。）</p>

<h3>4.1 vanilla示例（无mcpack封装，支持大多数jsonrpc的api）</h3>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/vanilla/ProductAPI/queryInfo">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/vanilla/ProductAPI/queryInfo</a></li>
<li>{&ldquo;products&rdquo;:[&ldquo;183019611&rdquo;],&ldquo;uc_id&rdquo;:29844}</li>
</ul>


<h3>4.2 jsonrpc示例（有mcpack封装，只支持个别jsonrpc的api）</h3>

<h4>4.2.1 OrderInnerAPI/daigouCreateOrder（代购api）</h4>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/OrderInnerAPI/daigouCreateOrder">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/OrderInnerAPI/daigouCreateOrder</a></li>
<li>{&ldquo;daigouOrder&rdquo;:{&ldquo;daigouId&rdquo;:1,&ldquo;passportId&rdquo;:&ldquo;1245&rdquo;,&ldquo;productIds&rdquo;:&ldquo;181835090&rdquo;,&ldquo;productCounts&rdquo;:&ldquo;1&rdquo;,&ldquo;customer&rdquo;:&ldquo;木根&rdquo;,&ldquo;mobile&rdquo;:&ldquo;12383846326&rdquo;,&ldquo;payStyle&rdquo;:&ldquo;DAIGOU&rdquo;,&ldquo;province&rdquo;:&ldquo;山东&rdquo;,&ldquo;city&rdquo;:&ldquo;济南市&rdquo;,&ldquo;district&rdquo;:&ldquo;大观区&rdquo;,&ldquo;town&rdquo;:&ldquo;白贤镇&rdquo;,&ldquo;districtId&rdquo;:&ldquo;120001&rdquo;,&ldquo;detailAddress&rdquo;:&ldquo;龙山路22号&rdquo;,&ldquo;needInvoice&rdquo;:&ldquo;true&rdquo;,&ldquo;invoiceTitle&rdquo;:&ldquo;百度中国&rdquo;},&ldquo;token&rdquo;:&ldquo;daigou_token_26e588a503074&rdquo;}</li>
</ul>


<h4>4.2.2 PostageAPI/addTemplate（添加运费模板api）</h4>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/PostageAPI/addTemplate">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/PostageAPI/addTemplate</a></li>
<li>{&ldquo;name&rdquo;:&ldquo;运费模板名称&rdquo;,&ldquo;ucId&rdquo;:29844,&ldquo;outerId&rdquo;:null,&ldquo;assumer&rdquo;:&ldquo;SELLER&rdquo;,&ldquo;valuation&rdquo;:&ldquo;QUANTITY&rdquo;,&ldquo;consignAreaId&rdquo;:&ldquo;110101&rdquo;,&ldquo;lastModify&rdquo;:&ldquo;2014-01-02 19:06:01&rdquo;,&ldquo;shippingMethodList&rdquo;:[{&ldquo;name&rdquo;:&ldquo;COD&rdquo;,&ldquo;defaultStartStandards&rdquo;:&ldquo;1&rdquo;,&ldquo;defaultStartFees&rdquo;:&ldquo;10.00&rdquo;,&ldquo;defaultAddStandards&rdquo;:&ldquo;1&rdquo;,&ldquo;defaultAddFees&rdquo;:&ldquo;4.00&rdquo;,&ldquo;regionGroupList&rdquo;:[]}]}</li>
</ul>


<h4>4.2.3 PostageAPI/deleteTemplate（删除运费模板api）</h4>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/PostageAPI/deleteTemplate">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/PostageAPI/deleteTemplate</a></li>
<li>109</li>
</ul>


<h4>4.2.4 DeliveryRegionsAPI/updateDeliveryRegions（更新配送范围api）</h4>

<ul>
<li><a href="http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/DeliveryRegionsAPI/updateDeliveryRegions">http://st01-ecom-jn2.st01.baidu.com:8890/jsonrpc/send/DeliveryRegionsAPI/updateDeliveryRegions</a></li>
<li>0</li>
</ul>


<h1>总结</h1>

<p>如有问题可以发送邮件至<a href="mailto:lengyu@baidu.com">lengyu@baidu.com</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何整合Cucumber小黄瓜至Jenkins持续集成服务器]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/17/ru-he-zheng-he-cucumberxiao-huang-gua-zhi-jenkinschi-xu-ji-cheng-fu-wu-qi/"/>
    <updated>2014-02-17T21:18:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/17/ru-he-zheng-he-cucumberxiao-huang-gua-zhi-jenkinschi-xu-ji-cheng-fu-wu-qi</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何将<code>Cucumber</code>小黄瓜的测试case整合到你的<code>Jenkins CI服务器</code>中。</p>

<!--more-->


<h1>软件安装</h1>

<p>以Windows工作机为例<br/>
&ndash; JDK或者JRE（记得设置JAVA_HOME这个环境变量）<br/>
&ndash; git（如果你已经安装了<a href="http://railsinstaller.org/">RailsInstaller</a>，里面是包含git的）<br/>
&ndash; 下载最新稳定版的<a href="http://mirrors.jenkins-ci.org/war/latest/jenkins.war">Jenkins</a></p>

<h1>本地建立git代码库</h1>

<p>下载，解压源代码，打开命令行，cd至刚解压的文件夹中，运行以下命令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m "initial commit"</span></code></pre></td></tr></table></div></figure>


<h1>本地配置和运行Jenkins</h1>

<ul>
<li>拷贝<code>Jenkins</code>的<code>war包</code>至你想要的文件夹，打开命令行，cd至那个文件夹。</li>
<li>运行<code>java -Dfile.encoding=UTF-8 -jar jenkins.war</code>。</li>
<li>在网页浏览器中打开<code>http://localhost:8080/configureSecurity/</code>，按下图中的配置以后点击<code>Save</code>。</li>
</ul>


<p><img src="http://i.imgur.com/ea5IK3k.jpg" alt="" /></p>

<ul>
<li>打开<code>http://localhost:8080/pluginManager/available</code>，勾选<code>Source Code Management</code>下的<code>Git Plugin</code>和<code>Build Tools</code>下的<code>Rake plugin</code>。点击<code>Download now and install after restart</code>。</li>
<li>等待Jenkins安装插件，失败的话再重新装。安装完成后<code>ctrl+c</code>杀掉进程，并重新运行<code>Jenkins</code>。</li>
<li>打开<code>http://localhost:8080/view/All/newJob</code>。填入你想要的Job名称，选择<code>Build a free-style software project</code>。点击<code>OK</code>。</li>
<li>打开<code>http://localhost:8080/job/[job名称]/configure</code>。</li>
<li>在<code>Source Code Management</code>下，选择<code>Git</code>。并在<code>Repository URL</code>中填上小黄瓜case所在的文件夹地址。如下图。</li>
</ul>


<p><img src="http://i.imgur.com/OVjhttE.jpg" alt="" /></p>

<ul>
<li>在<code>Build Triggers</code>中勾选<code>Trigger builds remotely</code>。填一个你喜欢的token。这样这个job就可以被远程执行了。以下图为例，在浏览器中输入<code>http://localhost:8080/job/wg_merchant_oc_regression/build?token=lengyu</code>就能执行这个job了。</li>
</ul>


<p><img src="http://i.imgur.com/YhfCOzS.jpg" alt="" /></p>

<ul>
<li>在<code>Build</code>下，点击<code>Add Build Step</code>，并选择<code>Invoke Rake</code>。点击<code>Advanced</code>。配置如下图。<code>features</code>是一个<code>rake task</code>，需要在前面<code>Repository URL</code>目录中配置<code>Rakefile</code>，参见上传的代码。</li>
</ul>


<p><img src="http://i.imgur.com/V7AfNPc.jpg" alt="" /></p>

<h1>总结</h1>

<p>在<code>git plugin</code>和<code>rake plugin</code>的帮助下，轻轻松松就能将小黄瓜整合到<code>jenkins</code>中。如有问题可发送邮件至<a href="mailto:lengu@baidu.com">lengyu@baidu.com</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Cucumber小黄瓜做结算中心数据校验自动化]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/15/ru-he-shi-yong-cucumberxiao-huang-gua-zuo-jie-suan-zhong-xin-shu-ju-xiao-yan-zi-dong-hua/"/>
    <updated>2014-02-15T15:53:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/15/ru-he-shi-yong-cucumberxiao-huang-gua-zuo-jie-suan-zhong-xin-shu-ju-xiao-yan-zi-dong-hua</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用<code>小黄瓜</code>来实结算中心数据比对的自动化。如果你对小黄瓜还没有初步认识的话，推荐阅读我之前写的一篇<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">文章</a>。</p>

<!--more-->


<h1>运行自动化</h1>

<p>按照惯例，下载代码，解压，打开命令行，切换到解压后的文件夹中。<br/>
运行<code>bundle install</code>。<br/>
运行<code>cucumber features/wgpc_sc.feature</code>，运行成功的话，应该能看见如下输出。</p>

<p><img src="http://i.imgur.com/oPyqlVY.jpg" alt="" /></p>

<p>注意这个case挂掉了，因为<code>jianzhong</code>2月14号的数据跟线上数据校验后有出入。输出中浅蓝色的字体（{&ldquo;540&rdquo;=>[46.0, 0.0]}）为账户金额有出入的商家id以及<code>jianzhong</code>与线上数据金额的差额。</p>

<h1>feature文档</h1>

<p>这次的feature文档简单很多。如对feature文档中的关键词存有疑惑，可参考我之前写的这篇<a href="http://tauntaunslayer13.me/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi/">文章</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> 比对结算数据</span>
</span><span class='line'><span class="nf">  为了保证结算数据中各个资金帐户余额的准确性，跟建忠计算的数据进行验对。</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> 校验逻辑</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">我读取&quot;</span><span class="s">./data/sc/2014-02-13.xls</span><span class="nf">&quot;建忠excel文件中的数据</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">我打开&quot;</span><span class="s">http://settlement.weigou.baidu.com/macount/account_info?merchantId=</span><span class="nf">&quot;线上结算中心网站并抓取结算数据</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">我比对这二组数据</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">我将会生成校验报告并评估此次校验</span>
</span></code></pre></td></tr></table></div></figure>


<p>整个比对过程大致为，打开<code>jianzhong</code>的excel文件，打开线上的结算中心，并抓取线上结算中心网页上的数据，并跟<code>jianzhong</code>的数据进行比对，如有出入，打印有出入的商家id以及2份数据余额的差额并断言。（注：本来想自动发email的，但是mail这个gem所依赖的mime-type这个gem跟cucumber也不知道是capybara用到的mime-type的版本好像有冲突。望高人留言指点。）</p>

<h1>代码详解</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我读取&quot;(.*?)&quot;建忠excel文件中的数据$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">excel_file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 使用spreadsheet这个gem来读取xls文件</span>
</span><span class='line'>  <span class="n">sc_file</span> <span class="o">=</span> <span class="no">Spreadsheet</span><span class="o">.</span><span class="n">open</span> <span class="n">excel_file</span>
</span><span class='line'>  <span class="c1"># 选择记录各资金账户余额的一张sheet</span>
</span><span class='line'>  <span class="n">sc_sheet</span> <span class="o">=</span> <span class="n">sc_file</span><span class="o">.</span><span class="n">worksheet</span> <span class="mi">2</span>
</span><span class='line'>  <span class="c1"># @sc_data_jianzhong以商家id为key，对应value为长度为2的一个数组</span>
</span><span class='line'>  <span class="c1"># 数组中第1个值为用户担保帐余额，第2个是待结算账户余额</span>
</span><span class='line'>  <span class="vi">@sc_data_jianzhong</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="c1"># 读取每一行</span>
</span><span class='line'>  <span class="n">sc_sheet</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># 跳过第一行，其实不跳也没关系</span>
</span><span class='line'>    <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">counter</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">next</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># row[2]就是用户担保帐余额，row[3]是待结算账户余额</span>
</span><span class='line'>    <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从excel文件里面读取<code>jianzhong</code>结算的结算数据，并保存到<code>@sc_data_jianzhong</code>这个变量中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我打开&quot;(.*?)&quot;线上结算中心网站并抓取结算数据$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">sc_url</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 访问结算中心线上环境</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">sc_url</span>
</span><span class='line'>  <span class="c1"># 算一下一共有多少行商家</span>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="s1">&#39;table tr&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>  <span class="vi">@sc_data_yanghu</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="c1"># 有多少行，就loop多少次</span>
</span><span class='line'>  <span class="n">count</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># 跳过第一行，其实也可以不跳</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">next</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># 用xpath选到每一行，拿他的text。</span>
</span><span class='line'>    <span class="n">row</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;(//tr)[&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot;]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span>
</span><span class='line'>    <span class="vi">@sc_data_yanghu</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="c1"># row[4]为用户担保帐余额，row[5]为待结算账户余额</span>
</span><span class='line'>    <span class="vi">@sc_data_yanghu</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">4</span><span class="o">][</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">[</span><span class="mi">4</span><span class="o">].</span><span class="n">length</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@sc_data_yanghu</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">row</span><span class="o">[</span><span class="mi">5</span><span class="o">][</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">[</span><span class="mi">5</span><span class="o">].</span><span class="n">length</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>selenium-webdriver</code>配合<code>capybara</code>打开结算中心线上环境。并抓取页面上的数据，保存至<code>@sc_data_yanghu</code>这个参数中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^我比对这二组数据$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 数据比对结果</span>
</span><span class='line'>  <span class="vi">@result</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="c1"># 比对@sc_data_yanghu和@sc_data_jianzhong，写的比较死，不是最灵活</span>
</span><span class='line'>  <span class="vi">@sc_data_yanghu</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@sc_data_jianzhong</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="n">to_f</span> <span class="o">!=</span> <span class="n">value</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span> <span class="o">||</span> <span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="mi">1</span><span class="o">].</span><span class="n">to_f</span> <span class="o">!=</span> <span class="n">value</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>        <span class="vi">@result</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>        <span class="c1"># 现在想来可能这个delete(&#39;,&#39;)的处理放在上面可能比较好。</span>
</span><span class='line'>        <span class="vi">@result</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="n">to_f</span> <span class="o">-</span> <span class="n">value</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@result</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="vi">@sc_data_jianzhong</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="mi">1</span><span class="o">].</span><span class="n">to_f</span> <span class="o">-</span> <span class="n">value</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>比对@sc_data_yanghu和@sc_data_jianzhong里面的数据，如果数据有出入的话，保存商家id至<code>@result</code>中，然后计算2份数据之间的差额，差额越大bug的可能性也越大，大概。。。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="sr">/^我将会生成校验报告并评估此次校验$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 本来想自动发email的，但是这个mail的依赖好像有冲突，求高人指点</span>
</span><span class='line'>  <span class="c1"># Mail.deliver do</span>
</span><span class='line'>  <span class="c1">#   from     &#39;qa-automation@baidu.com&#39;</span>
</span><span class='line'>  <span class="c1">#   to       &#39;lengyu@baidu.com&#39;</span>
</span><span class='line'>  <span class="c1">#   subject  &#39;【结算中心线上数据与建忠数据比对结果】&#39;</span>
</span><span class='line'>  <span class="c1">#   body     @result.to_s</span>
</span><span class='line'>  <span class="c1">#   # add_file &#39;/full/path/to/somefile.png&#39;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 打印结果</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="vi">@result</span>
</span><span class='line'>  <span class="c1"># 断言，@result应该为空。</span>
</span><span class='line'>  <span class="vi">@result</span><span class="o">.</span><span class="n">should</span> <span class="n">be_empty</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后看<code>@result</code>是否为空，不是的话，就需要断言。说明2份数据有出入。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用小黄瓜来做接口级自动化测试]]></title>
    <link href="http://Fatman13.github.io/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi/"/>
    <updated>2014-02-13T21:08:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/02/13/ru-he-shi-yong-xiao-huang-gua-lai-zuo-jie-kou-ji-ce-shi</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用<code>小黄瓜</code>来实现接口级别的自动化测试。如果你还没有对小黄瓜有初步认识的话，推荐阅读我之前写的一篇<a href="http://tauntaunslayer13.me/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/">文章</a>。</p>

<!--more-->


<h1>运行自动化</h1>

<p>下载代码，解压，打开命令行，切换到解压后的文件夹中，运行<code>bundle install</code>。<br/>
运行<code>cucumber features/wgpc_check_kai.feature</code>，运行成功的话，应该能看见如下输出。</p>

<p><img src="http://i.imgur.com/ghYr3bJ.jpg" alt="" /></p>

<p>以及其他的一些case等等&hellip;</p>

<h1>feature文档</h1>

<p>用<code>小黄瓜</code>写测试case的第一步就是写case的feature文档。<br/>
例如：<code>cuke_oc\features\wgoc_check_kai.feature</code>。<br/>
<code>小黄瓜</code>的feature文档使用<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a>格式来更好的帮你理解，管理和维护你的case。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nt">@checkorder</span><span class="nf"></span>
</span><span class='line'><span class="k">Feature:</span><span class="nf"> Check Order</span>
</span><span class='line'><span class="nf">  为了保证订单的准确性，在提交订单之前，对订单进行验对。</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Background:</span><span class="nf"></span>
</span><span class='line'><span class="k">    Given </span><span class="nf">我根据&quot;</span><span class="s">./data/wgoc_cases/shipping_region.txt</span><span class="nf">&quot;设置配送范围</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario Outline:</span><span class="nf"> 验单逻辑</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">我根据 </span><span class="nv">&lt;mprpc_data_file&gt;</span><span class="nf"> 文件中的配置建立运费信息</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">我根据 </span><span class="nv">&lt;mock_data_file&gt;</span><span class="nf"> 文件中的配置制造mock商品信息</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">我从 </span><span class="nv">&lt;request_data_file&gt;</span><span class="nf"> 文件中读取某http请求</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">我用post方法发送该请求至oc的话</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">我将得到与 </span><span class="nv">&lt;response_data_file&gt;</span><span class="nf"> 文件中相同的json串</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Examples:</span><span class="nf"> case_1: 默认全国10块, 非促销商品验单成功（购买1件&amp;支持配送&lt;上海&amp;北京&amp;天津&gt;&amp;未绑定运费模板）</span><span class="k"></span>
</span><span class='line'><span class="k">    |</span><span class="nv"> mprpc_data_file</span><span class="k"> |</span><span class="nv"> mock_data_file</span><span class="k"> |</span><span class="nv"> request_data_file</span><span class="k"> |</span><span class="nv"> response_data_file</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> empty.json</span><span class="k"> |</span><span class="s"> check_mock_1.yaml</span><span class="k"> |</span><span class="s"> check_request_1.yaml</span><span class="k"> |</span><span class="s"> check_response_1.json</span><span class="k"> |</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Feature</code>关键词：简单介绍你要测试的feature。<code>Feature: Check Order</code>的下一行可以跟任意长度的更为详细的功能摘要。一个<code>Feature</code>能包含多个<code>Scenario</code>。（以上例子只有一个<code>Scenario</code>）</li>
<li><code>Backgroud</code>关键词：定义一个全局的setup的步骤。<code>Background</code>对应的代码，整个feature只运行一次。</li>
<li><code>Scenario Outline</code>关键词：配合<code>&lt;&gt;</code>括号内的变量与<code>Examples</code>关键词，用<code>Examples</code>下面的表格中定义的具体数值来对应到<code>&lt;&gt;</code>括号中的变量中的位置。（以上面为例，当这个<code>Scenario</code>被执行的时候，<code>&lt;mprpc_data_file&gt;</code>这个参数的数值，就会被<code>Examples</code>中，<code>mprpc_data_file</code>栏中的<code>empty.json</code>替代。）</li>
<li><code>Given</code>关键词：定义case执行时所要做的一些准备工作。</li>
<li><code>When</code>关键词：定义case执行时所要做一个关键动作。</li>
<li><code>Then</code>关键词：定义case执行后，校验工作，一般断言都放在这里。</li>
<li><code>@checkorder</code>关键词：其实这个也不能算是关键词，<code>@checkorder</code>定义了这个feature会使用名为<code>@checkorder</code>的一个hook。hook定义了这个feature在case级别的setup/teardown应该执行哪儿些代码。</li>
</ul>


<h1>code block生成</h1>

<p>有了feature文档以后，运行<code>cucumber features/wgpc_check_kai.feature</code>，<code>小黄瓜</code>会帮你生成如下各个关键词对应的code block。（在你还没有定义对应的steps.rb才会生成，参见<code>cuke_oc/features/step_definitions/check_kai_steps.rb</code>。文件命名关系不大，但是一般以steps结尾。）</p>

<p><img src="http://i.imgur.com/JqweeIf.jpg" alt="" /></p>

<p>复制粘帖以上<code>小黄瓜</code>的输出至<code>cuke_oc/features/step_definitions/foo_steps.rb</code>然后就可以开始填写代码了。当case运行时，会按序运行各个code block中的代码。使用除了英文以外的语言时，别忘记在文件顶端加上<code># encoding: utf-8</code></p>

<h1>代码详解</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我根据 (.*) 文件中的配置建立运费信息$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">mprpc_data_file</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@fid</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="vi">@mprpc_res</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="c1"># 从mprpc_data_file文件中读取这个case所需要的运费模板参数</span>
</span><span class='line'>  <span class="vi">@mprpc_params</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;./data/wgoc_cases/&#39;</span> <span class="o">+</span> <span class="n">mprpc_data_file</span><span class="p">))</span>
</span><span class='line'>  <span class="c1"># 向桩发送请求，生成运费模板</span>
</span><span class='line'>  <span class="vi">@mprpc_res</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">post</span> <span class="no">JSONRPC_SEND_POSTAGEAPI_ADDTEMPLATE_URI</span><span class="p">,</span> <span class="vi">@mprpc_params</span><span class="o">.</span><span class="n">to_json</span> <span class="k">unless</span> <span class="vi">@mprpc_params</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="c1"># 从返回中获得运费模板的id</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="vi">@mprpc_res</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="vi">@mprpc_res</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>    <span class="vi">@fid</span> <span class="o">=</span> <span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="vi">@mprpc_res</span><span class="o">.</span><span class="n">body</span><span class="p">))</span><span class="o">[</span><span class="s1">&#39;result&#39;</span><span class="o">][</span><span class="s1">&#39;result&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>向桩发送请求，并根据<code>mprpc_data_file</code>中的参数，生成运费模板。现在<code>mprpc_data_file</code>用的是yaml格式。使用了<a href="https://github.com/rest-client/rest-client">RestClient</a>这个<code>gem</code>来发送各种<code>http</code>请求。（什么是<a href="http://guides.rubygems.org/">gem</a>?）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我根据 (.*) 文件中的配置制造mock商品信息$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">mock_data_file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 从mock_data_file读取mock商品的参数</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;./data/wgoc_cases/&#39;</span> <span class="o">+</span> <span class="n">mock_data_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@mock_params</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="c1"># 把前面mprpc返回的delivery_id设定为mock商品的fid</span>
</span><span class='line'>  <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;queryInfo&#39;</span><span class="o">][</span><span class="s1">&#39;fid&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@fid</span> <span class="k">unless</span> <span class="vi">@fid</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="c1"># 向桩发送请求，生成mock商品的kv和queryInfo信息</span>
</span><span class='line'>  <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="no">SCAFFOLDING_CREATE_KV_URI</span><span class="p">,</span> <span class="ss">:params</span> <span class="o">=&gt;</span> <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;kv&#39;</span><span class="o">]</span> <span class="k">unless</span> <span class="o">!</span><span class="vi">@mock_params</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="s1">&#39;kv&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;kv&#39;</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>  <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="no">SCAFFOLDING_CREATE_PRODUCTAPI_QUERYINFO_URI</span><span class="p">,</span> <span class="ss">:params</span> <span class="o">=&gt;</span> <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;queryInfo&#39;</span><span class="o">]</span> <span class="k">unless</span> <span class="o">!</span><span class="vi">@mock_params</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="s1">&#39;queryInfo&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="vi">@mock_params</span><span class="o">[</span><span class="s1">&#39;queryInfo&#39;</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>向商品库的桩发送请求，并根据<code>mock_data_file</code>中的参数，制造mock商品。现在<code>mock_data_file</code>用的是yaml格式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我从 (.*) 文件中读取某http请求$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">request_data_file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 从request_data_file中读取验单所需的参数信息</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;./data/wgoc_cases/&#39;</span> <span class="o">+</span> <span class="n">request_data_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@request_params</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>读取<code>request_data_file</code>文件中定义的请求信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^我用post方法发送该请求至oc的话$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 向oc发送验单请求</span>
</span><span class='line'>  <span class="vi">@last_response</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="no">CHECK_REQUEST_URI</span><span class="p">,</span> <span class="ss">:params</span> <span class="o">=&gt;</span> <span class="vi">@request_params</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据刚刚读取的请求信息，给oc发送验单请求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="sr">/^我将得到与 (.*) 文件中相同的json串$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">response_data_file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 使用了Rspec提供的should的断言方法</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="vi">@last_response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;./data/wgoc_cases/&#39;</span> <span class="o">+</span> <span class="n">response_data_file</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>跟<code>response_data_file</code>中定义的预期的json串作比较。不相同的话就触发断言。</p>

<h1>总结</h1>

<p>有问题可发送邮件至<code>lengyu@baidu.com</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Capybara和Cucumber实现页面级别自动化]]></title>
    <link href="http://Fatman13.github.io/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua/"/>
    <updated>2014-01-26T21:37:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2014/01/26/ru-he-shi-yong-capybarahe-cucumbershi-xian-ye-mian-ji-bie-zi-dong-hua</id>
    <content type="html"><![CDATA[<p>本文将简单介绍如何使用capybara/cucumber来实现页面级别的自动化。并将结合微购的订单流程做一个讲解。在这儿为大家强烈推讲下<a href="http://pragprog.com/book/hwcuc/the-cucumber-book">The Cucumber Book</a>以及<a href="http://pragprog.com/book/dhwcr/cucumber-recipes">Cucumber Recipes</a>这2本书。几乎包含了关于<code>小黄瓜</code>的一切。<a href="http://product.dangdang.com/23280484.html#ddclick?act=click&amp;pos=23280484_16_1_p&amp;cat=01.00.00.00.00.00&amp;key=Cucumber&amp;qinfo=&amp;pinfo=20_1_72&amp;minfo=&amp;ninfo=&amp;custid=&amp;permid=20140126101508135714985587192225073&amp;ref=http%3A%2F%2Fbook.dangdang.com%2F&amp;rcount=&amp;type=&amp;t=1390702656000">当当网</a>上也有购买，有兴趣的同学可以问我借阅。以下将这2本书简称为<code>小黄瓜全书</code>和<code>小黄瓜食谱</code>。</p>

<!--more-->


<h1>Capybara简介</h1>

<p>Capybara封装了众多帮助页面自动化的函数。极大的简化了开发流程。Capybara的API可参看<code>小黄瓜全书</code>中<code>15.3 The Capybara API</code>章节。</p>

<h1>Cucumber简介</h1>

<p>小黄瓜是一个强大的自动化测试框架。完善的文档，Gherkin式的测试文档，全局/Case级别的setup/teardown，配合Ruby庞大的gem库，支持各种格式report的生成，等等。</p>

<h1>软件安装</h1>

<p>请参看<code>小黄瓜全书</code>里面的Appendix 2: Installing cucumber的章节。以工作机为例，安装以下即可。<br/>
&ndash; <a href="http://railsinstaller.org/">RailsInstaller</a>（RailsInstaller包含了Ruby1.9.3，Bundler，Git等等众多Ruby开发工具。）<br/>
&ndash; <a href="https://github.com/adoxa/ansicon/downloads">ANSICON</a></p>

<h1>运行自动化</h1>

<p>下载代码，解压，打开命令行，切换到解压后的文件夹中，运行<code>bundle install</code>，修改<code>cuke_pc/features/step_definitions/cod_steps.rb</code>，把以下登录信息改为你自己的百度账号和密码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fill_in</span> <span class="s1">&#39;userName&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;在此输入你的百度账号&#39;</span>
</span><span class='line'><span class="n">fill_in</span> <span class="s1">&#39;TANGRAM__PSP_4__password&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;在此输入你的百度帐号密码&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行<code>cucumber features/wgpc_cod.feature</code>，自动化就跑起来了！</p>

<h1>代码讲解</h1>

<p>在这个<code>cucumber features/wgpc_cod.feature</code>自动化Case中，<br/>
代码都在<code>cuke_pc/features/step_definitions/cod_steps.rb</code>里面。为大家详解一下<code>cod_steps.rb</code>中的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我已登录用户中心$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 访问个人中心页面</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;http://zhixin.baidu.com/Login/index?module=onesite&amp;u=http%3A%2F%2Fcp01-testing-cbbs06.cp01.baidu.com%3A8888%2Fitem%3Fid%3D181835090&amp;from=&#39;</span>
</span><span class='line'>  <span class="c1"># 在登录页面中，输入自己的百度账号</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s1">&#39;userName&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;在此输入你的百度账号&#39;</span>
</span><span class='line'>  <span class="c1"># 输入自己百度账号密码</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s1">&#39;TANGRAM__PSP_4__password&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;在此输入你的百度帐号密码&#39;</span>
</span><span class='line'>  <span class="c1"># 点击登录</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="s1">&#39;TANGRAM__PSP_4__submit&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>visit</code>函数: 根据配置，自动打开网页浏览器，并访问参数中指定的url。<br/>
<code>fill_in</code>函数: 根据id,name或者label text找到输入框，并填写参数所指定的String。<br/>
<code>click_button</code>函数: 根据id,name或者label text找到按钮，并点击该按钮。<br/>
以上代码实现的是，首先打开火狐，进入个人中心页面，输入用户名密码，并点击登录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^我在中间页对&quot;(.*?)&quot;商品下单:一$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 这个暂时不关注</span>
</span><span class='line'>  <span class="vi">@expected_time_range</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">.</span><span class="n">.</span> <span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="mi">600</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 点击立即购买</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;#detail-buy&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="c1"># 浏览器窗口最大化</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">maximize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>find</code>函数: 根据CSS Selector或者Xpath找到对应的元素。以便于更进一步的操作。<br/>
以上代码实现的是，在中间页，点击<code>立刻购买</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^我选取货到付款$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 根据lablel元素上的字，找到“货到付款”并点击</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s2">&quot;label&quot;</span><span class="p">,</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="sr">/\A货到付款\z/</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="c1"># 等待“提交订单”的出现</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;.order-summary-submit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 点击“提交订单”</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;.order-summary-submit&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="c1"># 通过xpath，找到查看所有订单按钮，并点击</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;//a[@href=&#39;/service/user/order/list&#39;]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码实现的是，在验单页面，点击<code>货到付款</code>，点击<code>提交订单</code>，点击<code>查看订单</code>。注意，如果提交订单失败的话，这个case就会在这儿挂掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="sr">/^个人中心订单状态被告更改为&quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 这个暂时不关注</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;(//td[@class=&#39;time&#39;])[1]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>  <span class="vi">@order_time</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;(//td[@class=&#39;time&#39;])[1]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="vi">@expected_time_range</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="vi">@order_time</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 使用xpath，找到之前下的订单，并比较订单状态是否是“等待发货”</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;(//span[@class=&#39; status_confirm&#39;])[1]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>should</code>函数: RSpec里面的一个断言的方法。<br/>
<code>have_content</code>函数: 判定元素中是否存在参数中的字段。<br/>
以上代码实现的是，回到个人中心后，比较最近的一个订单是不是处于<code>等待发货</code>状态，如果状态错误Case就会挂掉。</p>

<h1>总结</h1>

<p><code>Capybara/Cucumner</code>是一个有完善文档的，非常强大的测试框架。希望以后能用于主流程的保证。不知道医疗那边的同学需不需要？无论是测死链，或者是ajax也都完全没有问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Setup your personal VPN with Amazon EC2 for FREE]]></title>
    <link href="http://Fatman13.github.io/blog/2013/12/29/how-to-setup-your-personal-vpn-with-amazon-ec2-for-free/"/>
    <updated>2013-12-29T11:20:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/12/29/how-to-setup-your-personal-vpn-with-amazon-ec2-for-free</id>
    <content type="html"><![CDATA[<p>This tutorial will walk you through setting up a personal <a href="http://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol">PPTP</a> VPN server and connecting to it from a Windows Client. Using a VPN have merits like browsing the internet in relative privacy. Also new signups can use Amazon EC2 micro instance without paying for the first year.</p>

<!--more-->


<h1>Step 1: Get Set Up</h1>

<p>Follow the official <code>get set up</code> guide for Amazon EC2 <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html">here</a>. The intructions are more comprehensive, in my opinoin, than blog posts from Google search results.</p>

<h1>Step 2: Create EC2 Instance</h1>

<p>Follow <code>step 1: Launch an Instance</code> and <code>step 2: Connect to your Instance</code> of the offical <code>get started</code> guide for Amazon EC2 <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html">here</a>.<br/>
<strong>Note1:</strong> Instead of <strong>Select an Amazon Machine Image(AMI)</strong>, choose a <code>ubuntu 12.04 server</code> image.<br/>
<strong>Note2:</strong> The dafault accout for AMI images is <code>ec2-user</code>, however, for ubuntu images you have to use <code>ubuntu</code> to connect to your instance.<br/>
<strong>Note3:</strong> In the <code>AWS Management Console</code>, choose a regoin that is geograpgically closest to your location to have best browsing experience. I have chosen Singapore as shown below.</p>

<p><img src="http://Fatman13.github.io/images/ec2_region.jpg" width="233" height="317" title="1" ></p>

<p><strong>Note4:</strong> Below is the my security group settings for your reference.</p>

<p><img src="http://Fatman13.github.io/images/ec2_sg.jpg" width="613" height="253" title="1" ></p>

<h1>Step 3: Configure EC2 Instance</h1>

<p>Follow the guide on the offical Ubuntu documentation <a href="https://help.ubuntu.com/community/PPTPServer">here</a> to configure your ec2 instance into a PPTP server. Remember to right-click on your running instance in <code>AWS Management Console</code> and reboot your ec2 instance after you are done.</p>

<h1>Step 4.1: Connecting from a Windows 7 Client</h1>

<p>Open your Google Chrome, type in <code>chrome://settings/search#proxy</code>, hit <code>enter</code> and then click on <code>Change proxy settings</code> button. Click <code>new VPN(p)</code>. Enter either your ec2 instance public name or ip address as <code>internet address</code> and check the 3rd checkbox like shown below.</p>

<p><img src="http://Fatman13.github.io/images/ec2_conn.jpg" width="635" height="504" title="1" ></p>

<p>Click <code>next</code>, enter your VPN account name and password you have just setup in setp 3, click <code>next</code> and finally click <code>finish</code>. Now you should be able to see your VPN connection once you click the network icon in the notification area on your windows task bar. Right click on your VPN connection, go to <code>properties</code>, under <code>security tab</code>, configure everything the same as the screenshot below.</p>

<p><img src="http://Fatman13.github.io/images/vpn_conf.jpg" width="378" height="456" title="1" ></p>

<p>Now go ahead connect to your VPN, type in your account and password. Wait till the status turns into <code>Connected</code>.</p>

<p><img src="http://Fatman13.github.io/images/vpn_conn.jpg" width="278" height="393" title="1" ></p>

<p>Congratulations! You now have your own personal VPN.</p>

<h1>Welcome to the Internet!</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[乐高园游记]]></title>
    <link href="http://Fatman13.github.io/blog/2013/11/24/le-gao-yuan-you-ji/"/>
    <updated>2013-11-24T12:58:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/11/24/le-gao-yuan-you-ji</id>
    <content type="html"><![CDATA[<p>这次去了一趟传说中的LEGO LAND&copy;。记一篇游记。</p>

<!--more-->


<h1>题外话</h1>

<p><img src="http://Fatman13.github.io/images/Screenshot_gmap_sausalito.png" width="848" height="371" title="1" ></p>

<p>这个是<code>谷歌地图</code>，如果你拖拽街景小人，并放到地图上的话，是这个样子的。</p>

<p><img src="http://Fatman13.github.io/images/Screenshot_gmap_legoland.png" width="852" height="366" title="1" ></p>

<p>如果你拖拽街景小人至乐高园区内的话，街景的火柴人就会变成一乐高小人。挺有爱的。</p>

<h1>行程</h1>

<ul>
<li>11月12号驱车去<code>乐高宾馆</code>住一晚。</li>
<li>11月13号在园区内逛一天。</li>
</ul>


<h1>宾馆</h1>

<p><img src="http://Fatman13.github.io/images/WP_20131112_002.resized.jpg" width="700" height="394" title="1" ></p>

<p>开车开了好久，终于到<code>乐高宾馆</code>啦。</p>

<p><img src="http://Fatman13.github.io/images/WP_20131112_006.resized.jpg" width="700" height="394" title="1" ></p>

<p>总体感觉，没有他们广告里面的照片高级。。。房间是乐高城堡主题。还有海盗和另外一个什么主题的客房。</p>

<p><img src="http://Fatman13.github.io/images/WP_20131112_007.resized.jpg" width="700" height="394" title="1" ></p>

<p>这边有专门给小孩子睡的双层小床。</p>

<h1>游乐园</h1>

<p>正当我要准备进入乐高园时，令人难以置信的一幕发生了！！！！！！</p>

<p>我被告知乐高园每周2，3是不开门的。</p>

<h1>终&hellip;&hellip;</h1>

<p><img src="http://Fatman13.github.io/images/Screenshot_rage_c.png" width="350" height="284" title="1" ></p>

<h1>附录</h1>

<p>U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U</p>

<blockquote><p>We believe what we want to believe. It is all we ever do.<br/>
&mdash; <cite>Flemeth《<a href="http://en.wikipedia.org/wiki/Dragon_Age:_Origins">Dragon Age: Origin</a>》</cite></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[noisehush freedom BT700蓝牙耳机评测]]></title>
    <link href="http://Fatman13.github.io/blog/2013/11/13/noisehush-freedom-bt700lan-ya-er-ji-ping-ce/"/>
    <updated>2013-11-13T13:08:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/11/13/noisehush-freedom-bt700lan-ya-er-ji-ping-ce</id>
    <content type="html"><![CDATA[<p>最近买了一个<a href="http://www.amazon.com/NoiseHush-BT700-12266-Freedom-Bluetooth-Headphones/dp/B00EP7B800/ref=sr_1_2?ie=UTF8&amp;qid=1384377703&amp;sr=8-2&amp;keywords=noisehush+bt700">新耳机</a>。感觉还不错，写一个评测。</p>

<!--more-->


<h1>外观&amp;功能</h1>

<p><img src="http://Fatman13.github.io/images/IMAG0848.resized.jpg" width="600" height="339" title="1" ></p>

<p>盒子不错，简单大方。很硬。</p>

<p><img src="http://Fatman13.github.io/images/IMAG0852.resized.jpg" width="600" height="339" title="1" ></p>

<p>左耳，以及左耳上的功能键。</p>

<p><img src="http://Fatman13.github.io/images/IMAG0853.resized.jpg" width="600" height="339" title="1" ></p>

<p>最上：上一首；下一首；播放；暂停；音量+-<br/>
中间：usb mini接口（<em>充电用</em>）<br/>
最下：电源开关（<em>开机&mdash;&ndash;>长按3秒；关机&mdash;&ndash;>长按3秒；蓝牙搜索&mdash;&mdash;&ndash;>长按5秒</em>)</p>

<p><img src="http://Fatman13.github.io/images/IMAG0855.resized.jpg" width="600" height="339" title="1" ></p>

<p>右耳。</p>

<p><img src="http://Fatman13.github.io/images/IMAG0856.resized.jpg" width="600" height="339" title="1" ></p>

<p>耳朵内侧。</p>

<h1>兼容性</h1>

<p>经测试，以下设备都成功链接上了这个耳机。<br/>
* HTC Sensation<br/>
* Nokia Lumia 820<br/>
* System76 Gazelle-pro （Ubuntu 13.04）</p>

<h1>总体评价</h1>

<p>用下来感觉还是很不错的。第一次用蓝牙耳机，那种没有被一般耳机的那一根线牵着的感觉很好。当然本人不是对声音很敏感的人，所以也听不出好耳机跟坏耳机的区别。声音感觉过得去就行了。这个耳机戴在耳朵上的感觉也不会太紧。感觉开机后左耳的那个灯，晚上的话，会特别闪，可能要贴一张胶布遮住。由于2个耳朵是圆形的设计，所以并不能完全覆盖整个耳朵，所以隔音效果可能没有长方形的耳机好。再来就是有<a href="https://www.youtube.com/watch?v=QK8mJJJvaes">某一些视频</a>会有声音慢半拍的现象，但是经测试大多数情况还是正常的，比如说<a href="http://www.bilibili.tv/">b站</a>什么的。</p>

<h1>附录</h1>

<p>U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U</p>

<iframe width="640" height="360" src="http://Fatman13.github.io//www.youtube.com/embed/XeFxdkaFzRA" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analytics统计的本博客的流量]]></title>
    <link href="http://Fatman13.github.io/blog/2013/10/16/google-analyticstong-ji-de-ben-bo-ke-de-liu-liang/"/>
    <updated>2013-10-16T16:20:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/10/16/google-analyticstong-ji-de-ben-bo-ke-de-liu-liang</id>
    <content type="html"><![CDATA[<p>发表一下使用<a href="http://www.google.com/analytics/">Google Analytics</a>统计的本博客的流量。</p>

<!--more-->


<p><img src="http://Fatman13.github.io/images/ga_1.resized.JPG" width="951" height="223" title="1" ></p>

<p>55个访客！你们好！</p>

<p><img src="http://Fatman13.github.io/images/ga_2.resized.jpg" width="672" height="415" title="1" ></p>

<p>世界你好！最近习总是不是刚去过坦桑尼亚？之前我记得有2个伊朗的访客呀，被谷歌掐掉了吗？！</p>

<p><img src="http://Fatman13.github.io/images/ga_3.resized.JPG" width="867" height="410" title="1" ></p>

<p>根据国家划分访客。</p>

<p><img src="http://Fatman13.github.io/images/ga_4.resized.JPG" width="848" height="307" title="1" ></p>

<p>根据网页浏览器划分访客。发现Opera&hellip;.</p>

<p><img src="http://Fatman13.github.io/images/ga_6.resized.JPG" width="851" height="245" title="1" ></p>

<p>移动端访客使用的都是苹果&hellip;</p>

<p><img src="http://Fatman13.github.io/images/ga_7.resized.JPG"></p>

<p>根据网络供应商划分访客。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeoGuessr新手心得]]></title>
    <link href="http://Fatman13.github.io/blog/2013/09/26/geoguessrxin-shou-xin-de/"/>
    <updated>2013-09-26T10:52:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/09/26/geoguessrxin-shou-xin-de</id>
    <content type="html"><![CDATA[<p>经同事介绍一个叫<a href="http://geoguessr.com/">GeoGuessr</a>的网页小游戏。玩一下还可以。记录一下心得。</p>

<!--more-->


<h1>游戏流程</h1>

<p>游戏随机把你放到世界某个地方的谷歌街景。然后你可以根据周围的风景，猜你在哪儿。结果离正确答案越近，分数越高。猜完5次以后，结束一个周目。你获得的总分会被显示出来。</p>

<h1>心得</h1>

<ul>
<li><p>很多国家还没有谷歌街景，所以一般可以排除非洲大多数国家，南美(除巴西)，中国(除香港)，很多南亚国家，印度，很多中东国家，等等。</p></li>
<li><p>欧洲很多马路中间分界线是白色的。一般大多数其他国家都是黄色的。</p></li>
<li><p>土壤是红色的话，这个地方比较热。可以参考猜澳洲，中美洲，巴西。</p></li>
<li><p>关于高速公路。</p>

<ul>
<li>看周围的植物。是比较热带的感觉还是比较寒冷的感觉。</li>
<li>看周围是否是大山环绕，还是开阔的平原。</li>
<li>看高速路上的标志，是用英制单位还是国际单位。英制单位的话很有可能就是美国了。</li>
<li>看路上车子的款式。</li>
</ul>
</li>
<li><p>俄罗斯的交通标志跟国内很像。特别是<code>此处有人行道</code>的交通标志。</p></li>
<li><p>街景中看见地名的标志，路牌等等，当然可以直接谷歌下，但是有舞弊的嫌疑&hellip;</p></li>
</ul>


<h1>截图</h1>

<p><img src="http://Fatman13.github.io/images/g10.JPG" width="665" height="500" title="最高记录" ></p>

<p>随手一猜，竟然只差100公里。啧啧。</p>

<p><img src="http://Fatman13.github.io/images/g20.JPG" width="852" height="600" title="一周目" ></p>

<p>一周目结束。</p>

<h1>附录</h1>

<p>U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U</p>

<iframe width="480" height="360" src="http://Fatman13.github.io//www.youtube.com/embed/8EmRZO9fwvk" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Host rails app on OpenShift for FREE]]></title>
    <link href="http://Fatman13.github.io/blog/2013/09/16/how-to-host-rails-app-on-openshift-for-free/"/>
    <updated>2013-09-16T14:39:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/09/16/how-to-host-rails-app-on-openshift-for-free</id>
    <content type="html"><![CDATA[<p>There are many great options for hosting your rails application. For instances, <a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PaaS</a> like <a href="https://www.engineyard.com/">engine yard</a> and <a href="https://www.heroku.com/">heroku</a> provide great scalability and automations to ease your deployment. VPS like <a href="https://www.linode.com/">Linode</a> provides more traditional hosting services, which gives you full control of a node. But what if you just want to test your idea and have a public domain name (no tunneling and router tricks)? Then OpenShift is a great choice, cause it is FREE! (at least for your first 3 gears)</p>

<!--more-->


<h1>Good Resources</h1>

<ul>
<li><p>Official rails quick starter <a href="https://www.openshift.com/kb/kb-e1005-ruby-on-rails-openshift-quickstart-guide">guide</a>.</p></li>
<li><p>Official sample rails app on <a href="https://github.com/openshift-quickstart/rails-sunspot-openshift-quickstart">github</a>.</p></li>
<li><p>Official documentation on deployment <a href="http://openshift.github.io/documentation/oo_cartridge_developers_guide.html#openshift-builds">scripts</a>.</p></li>
<li><p>Deployment tutorial <a href="http://ror-tech.blogspot.com/2013/04/deploying-rails-application-on-to.html">guide</a>.</p></li>
</ul>


<h1>Deployment</h1>

<p><em>This guide will be similar to steps described in the resouces mentioned above. I will add my thoughts to some of the steps.</em></p>

<p><strong>1</strong>. Create an <a href="http://www.openshift.com">OpenShift</a> account.</p>

<p><strong>2</strong>.  Install <code>rhc</code> gem. (If you are using <code>rvm</code>, don’t use <code>sudo</code>.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install rhc</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>3</strong>. Create your cartridge. This should create a folder called <code>[your_rails_app_name]</code> at <code>.</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rhc app create -a [your_rails_app_name] -t ruby-1.9</span></code></pre></td></tr></table></div></figure>


<p><strong>4</strong>. Add database support to your application.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rhc cartridge add -a [your_rails_app_name] -c [database_name]</span></code></pre></td></tr></table></div></figure>


<p>Here is a list of supported database.</p>

<table>
<thead>
<tr>
<th align="left">Short Name </th>
<th align="left"> Full name</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">10gen-mms-agent-0.1 </td>
<td align="left"> 10gen Mongo Monitoring Service Agent</td>
</tr>
<tr>
<td align="left">cron-1.4 </td>
<td align="left"> Cron 1.4</td>
</tr>
<tr>
<td align="left">jenkins-client-1 </td>
<td align="left"> Jenkins Client</td>
</tr>
<tr>
<td align="left">mongodb-2.2 </td>
<td align="left"> MongoDB NoSQL Database 2.2</td>
</tr>
<tr>
<td align="left">mysql-5.1 </td>
<td align="left"> MySQL Database 5.1</td>
</tr>
<tr>
<td align="left">metrics-0.1 </td>
<td align="left"> OpenShift Metrics 0.1</td>
</tr>
<tr>
<td align="left">haproxy-1.4 </td>
<td align="left"> OpenShift Web Balancer</td>
</tr>
<tr>
<td align="left">phpmyadmin-3 </td>
<td align="left"> phpMyAdmin 3.4</td>
</tr>
<tr>
<td align="left">postgresql-8.4 </td>
<td align="left"> PostgreSQL Database 8.4</td>
</tr>
<tr>
<td align="left">postgresql-9.2 </td>
<td align="left"> PostgreSQL Database 9.2</td>
</tr>
<tr>
<td align="left">rockmongo-1.1 </td>
<td align="left"> RockMongo 1.1</td>
</tr>
<tr>
<td align="left">switchyard-0 </td>
<td align="left"> SwitchYard 0.8.0</td>
</tr>
</tbody>
</table>


<p><strong>5</strong>. Add <code>deploy</code> script to <code>[your_rails_app_name]/.openshift/action_hooks/</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch [your_rails_app_name]/.openshift/action_hooks/deploy</span></code></pre></td></tr></table></div></figure>


<p>Add the following code to <code>deploy</code> file to initialize database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pushd</span> <span class="err">$</span><span class="p">{</span><span class="no">OPENSHIFT_REPO_DIR</span><span class="p">}</span> <span class="o">&gt;</span> <span class="sr">/dev/nu</span><span class="n">ll</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span> <span class="no">RAILS_ENV</span><span class="o">=</span><span class="s2">&quot;production&quot;</span>
</span><span class='line'><span class="n">popd</span> <span class="o">&gt;</span> <span class="sr">/dev/nu</span><span class="n">ll</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>NOTE: This might be obvious to experienced Linux user, but I failed to realize this the first time. You have to do a <code>sudo chmod +x [your_rails_app_name]/.openshift/action_hooks/deploy</code> on your <code>deploy</code> script or it won’t be run by the server.</em></p>

<p><strong>6</strong>. Change production database configuration in <code>config/database.yml</code>. Then submit your change to your <a href="https://github.com/">github</a> repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">utf8</span>
</span><span class='line'>  <span class="l-Scalar-Plain">reconnect</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%=ENV[&#39;OPENSHIFT_APP_NAME&#39;]%&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%=ENV[&#39;OPENSHIFT_MYSQL_DB_USERNAME&#39;]%&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%=ENV[&#39;OPENSHIFT_MYSQL_DB_PASSWORD&#39;]%&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">socket</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%=ENV[&#39;OPENSHIFT_MYSQL_DB_SOCKET&#39;]%&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%=ENV[&#39;OPENSHIFT_MYSQL_DB_HOST&#39;]%&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%=ENV[&#39;OPENSHIFT_MYSQL_DB_PORT&#39;]%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>NOTE: Remember to change adapter and ENV variable to corresponding database your are using. For example, If your are using postgresql then change <code>&lt;%=ENV['OPENSHIFT_MYSQL_DB_USERNAME']%&gt;</code> to <code>&lt;%=ENV['OPENSHIFT_POSTGRESQL_DB_USERNAME']%&gt;</code></em></p>

<p><strong>7</strong>. Download your rails application from your github repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">cd railsapp</span>
</span><span class='line'><span class="l-Scalar-Plain">git remote add upstream -m master [your_git_repo_ssh_url]</span>
</span><span class='line'><span class="l-Scalar-Plain">git pull -s recursive -X theirs upstream master</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>8</strong>. Do <code>git push</code>. <code>git push</code> will initialize the server and trigger the <code>deploy</code> script. If everything goes alright, you should see your application running on <code>http://[your_rails_app_name]-[your_namespace].rhcloud.com</code>. You can customize your domain name too. Check this <a href="http://ror-tech.blogspot.com/2013/04/deploying-rails-application-on-to.html">post</a> out to learn details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eador: Masters of the broken worlds 新手心得]]></title>
    <link href="http://Fatman13.github.io/blog/2013/09/08/eador-masters-of-the-broken-worlds-xin-shou-xin-de/"/>
    <updated>2013-09-08T13:55:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/09/08/eador-masters-of-the-broken-worlds-xin-shou-xin-de</id>
    <content type="html"><![CDATA[<p><code>Eador: Masters of the broken worlds</code>是最近少有的奇幻系<a href="http://en.wikipedia.org/wiki/Turn-based_strategy">TBS</a>类型的游戏。玩了几盘，还不错。写下心得体会。</p>

<!--more-->


<p><em>注：本人玩的都是</em><code>beginner</code><em>难度，高阶难度是否适用不得而知&hellip;&hellip;</em></p>

<h1>游戏简介</h1>

<p>这里使用SplatterCat制作的游戏流程影像。</p>

<iframe width="853" height="480" src="http://Fatman13.github.io//www.youtube.com/embed/q4ARvRq8z34?list=PLWIol4T7LuShSOr8zmTvtVbAS0Z-0WxmO" frameborder="0" allowfullscreen></iframe>


<h1>英雄</h1>

<ul>
<li><p>个人比较喜欢<a href="http://eador-masters-of-the-broken-world.wikia.com/wiki/Wizard">法师</a>。英雄升级技能主<code>Necromancy</code>和<code>Magic Power</code>比较实用。特别是<code>Necromancy</code>能使召唤出来的不死族加入到英雄的军队中。初期非常实用。</p></li>
<li><p>法师中后期没有高阶法术的支持，不太好打。但是如果运气好在explore的时候打到好的spell的话，会很强。有一次我在explore province的时候，捡到了<a href="http://eador-masters-of-the-broken-world.wikia.com/wiki/Elemental_Magic">Incinerate</a>，能对对方单体造成40点伤害。初期几乎见谁秒谁。</p></li>
</ul>


<h1>省（Province）</h1>

<ul>
<li><p>一般离主城越近的province敌人的守卫越弱。离主城越远，敌人守卫等级越高，数量也越多。</p></li>
<li><p>省份攻略难度大致为：Free Settlement &lt; Golbin Land, Orcish Tribe &lt; Outlaw Brigand &lt; Lizard Land &lt; Dwarf, Halfing（这儿开始没有T2的兵就很难打了&hellip;）&lt; Nomad &lt; Elven &lt; Centaur  &lt; Giant Spider</p></li>
</ul>


<h1>经济</h1>

<ul>
<li>经济发展主要还是要靠打仗收入，和占领省市。一直捂在家里很难发展起来。初期法师英雄建议早造Shaman帮助英雄打掉主城周围一圈的省份。</li>
</ul>


<h1>作弊大法</h1>

<ul>
<li>由于战役做的实在太冗长&hellip;每次去打新地图的时候，主城，英雄都要从头开始。于是我不能忍了。就作弊了。在<code>Documents/Eador/profiles/player0/saves</code>路径下找到存档文件。用文字编辑器打开存档文件。按<code>ctrl + f</code>寻找<code>gold=</code>找到之后就能修改这个存档的金钱了。要注意的是修改不能改位子位数。例如<code>gold=100</code>那就只能改成<code>gold=999</code>，如果改成<code>gold=99999</code>就会污染存档，导致无法读取&hellip;</li>
</ul>


<h1>附录</h1>

<p>U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
U<br/>
大牛教你如何把肉打松。</p>

<iframe width="853" height="480" src="http://Fatman13.github.io//www.youtube.com/embed/qIxSwn9l41I" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写给毛藏的使用指南]]></title>
    <link href="http://Fatman13.github.io/blog/2013/09/03/xie-gei-mao-cang-de-shi-yong-zhi-nan/"/>
    <updated>2013-09-03T16:46:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/09/03/xie-gei-mao-cang-de-shi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<p>写给毛藏的使用指南。</p>

<!--more-->


<h1>如何安装</h1>

<p><strong>1</strong>. 下载并安装<a href="http://files.rubyforge.vm.bytemark.co.uk/railsinstaller/railsinstaller-2.2.1.exe">RailsInstaller</a>。</p>

<p><strong>2</strong>. 安装完成之后，应该会有一个<code>命令行</code>跳出来。输入以下指令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/Fatman13/MaoZangLED.git
</span><span class='line'>cd MaoZangLED
</span><span class='line'>bundle install
</span><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p><em>注：如果有除了c盘以外其他分盘的话需要替换</em><code>bundle install</code><em>为</em><code>bundle install --path .bundle</code><em>。好像sass在windows上有bug。</em></p>

<p><strong>3</strong>. 至此安装完成。运行<code>rails s</code>，使用本地服务器。</p>

<p><strong>4</strong>. 打开浏览器。输入地址<code>localhost:3000/products</code>。</p>

<h1>如何打开服务器</h1>

<p><strong>1</strong>. 打开命令行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd c:\Sites\MaoZangLED
</span><span class='line'>rails s</span></code></pre></td></tr></table></div></figure>


<h1>如何更新</h1>

<p><strong>1</strong>. 使用以下命令更新代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd c:\Sites\MaoZangLED
</span><span class='line'>git fetch --all
</span><span class='line'>git reset --hard origin/master
</span><span class='line'>bundle install --path .bundle
</span><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[懒人料理其4 烤牛肉]]></title>
    <link href="http://Fatman13.github.io/blog/2013/08/21/lan-ren-liao-li-qi-4-kao-niu-rou/"/>
    <updated>2013-08-21T18:51:00+08:00</updated>
    <id>http://Fatman13.github.io/blog/2013/08/21/lan-ren-liao-li-qi-4-kao-niu-rou</id>
    <content type="html"><![CDATA[<p>新食谱。</p>

<!--more-->


<h1>懒人料理宗旨</h1>

<p>制作简单，能偷懒就偷懒，但是味道还不错。一般都比较能下饭。</p>

<h1>食材</h1>

<p><img src="http://Fatman13.github.io/images/IMAG0380.resized.jpg" width="260" height="460" title="1" ></p>

<p><strong>1</strong>. 一盒切薄片的<font color="Crimson">牛肉</font>。</p>

<h1>制作方法</h1>

<p><strong>0.1</strong>. 可以用少量<font color="SaddleBrown">料酒</font>，<font color="SaddleBrown">酱油</font>事先淋在肉上。放置半个小时，帮助去除腥味。（<em>注：可选做</em>）</p>

<p><strong>1</strong>. 把炒锅加热至<strong>高温</strong>。加热至<strong>高温</strong>后可关至<strong>中温</strong>。</p>

<p><strong>2</strong>. 把<font color="Crimson">牛肉</font>一片一片小心放入锅内。视牛肉厚薄和锅子温度，翻面2，3次。看见肉被卷起来的时候需要翻面了，最好在卷起之前翻面。（<em>注意：油烟可能会很大注意排风</em>）</p>

<p><strong>3</strong>. 出锅后撒上2勺<font color="SaddleBrown">酱油</font>即可食用。</p>

<h1>出锅</h1>

<p><img src="http://Fatman13.github.io/images/IMAG0790.resized.jpg" width="555" height="313" title="1" ></p>

<p>好吃～</p>

<h1>附录</h1>

<iframe width="640" height="480" src="http://Fatman13.github.io//www.youtube.com/embed/QH2-TGUlwu4" frameborder="0" allowfullscreen></iframe>


<p>Nyan Nyan Nyan Nyan Nyan Nyan Nyan Nyan</p>

<!--肉-->


<p><font color="Crimson"></font></p>

<!--蔬菜-->


<p><font color="ForestGreen"></font></p>

<!--生肉-->


<p><font color="DeepPink"></font></p>

<!--水-->


<p><font color="DodgerBlue"></font></p>

<!--调料-->


<p><font color="SaddleBrown"></font></p>
]]></content>
  </entry>
  
</feed>
